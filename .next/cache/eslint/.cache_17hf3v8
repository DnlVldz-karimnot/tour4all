[{"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/category/CreateEdit.tsx":"1","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/collection/CreateEdit.tsx":"2","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/family/CreateEdit.tsx":"3","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/layout/footer.tsx":"4","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/layout/header.tsx":"5","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/layout/main.tsx":"6","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/layout/sidebar.tsx":"7","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/organization/CreateEdit.tsx":"8","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/payment-plataform/CreateEdit.tsx":"9","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/roles/BoxCheckBoxs.tsx":"10","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/roles/CreateEdit.tsx":"11","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/series/CreateEdit.tsx":"12","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/shipping/CreateEdit.tsx":"13","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/type-clients/CreateEdit.tsx":"14","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/DataTableCustom.tsx":"15","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/ImageDropzone.tsx":"16","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/Multiselect.tsx":"17","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/user-organizations/CreateEdit.tsx":"18","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/users/CreateEdit.tsx":"19","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/warehouse/CreateEdit.tsx":"20","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/contexts/AuthContext.tsx":"21","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/_app.tsx":"22","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/api/auth/[...nextauth].ts":"23","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/auth.tsx":"24","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/categories.tsx":"25","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/collections.tsx":"26","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/families.tsx":"27","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/home.tsx":"28","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/index.tsx":"29","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/login.tsx":"30","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/organizations.tsx":"31","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/paymentPlataforms.tsx":"32","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/register.tsx":"33","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/roles.tsx":"34","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/series.tsx":"35","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/shipping.tsx":"36","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/user-organizations.tsx":"37","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/users.tsx":"38","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/warehouses.tsx":"39","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/AuthService.ts":"40","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/CategoryService.ts":"41","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/CollectionService.ts":"42","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/FamilyService.ts":"43","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/HttpClient.ts":"44","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/OrganizationService.ts":"45","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/PaymentPlataformService.ts":"46","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/RolesService.ts":"47","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/SeriesService.ts":"48","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/ShippingService.ts":"49","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/TypeOfClientService.ts":"50","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/UserOrganizationService.ts":"51","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/UsersOrganizationService.ts":"52","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/UsersService.ts":"53","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/WarehouseService.ts":"54","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/theme.ts":"55","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Blog.ts":"56","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Brand.ts":"57","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Carts.ts":"58","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Category.ts":"59","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Client.ts":"60","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Collection.ts":"61","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/ComercialInfo.ts":"62","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Dimensions.ts":"63","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Family.ts":"64","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Location.ts":"65","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/LoginRequest.ts":"66","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/MeasuringUnit.ts":"67","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Movements.ts":"68","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Offer.ts":"69","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Organization.ts":"70","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Page.ts":"71","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/PaymentPlataform.ts":"72","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Product.ts":"73","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/PurchaseIncome.ts":"74","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/RegisterRequest.ts":"75","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Responsepetition.ts":"76","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Role.ts":"77","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/SaleHeader.ts":"78","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Serie.ts":"79","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Shipping.ts":"80","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Stock.ts":"81","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Supplier.ts":"82","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Transfer.ts":"83","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Type.ts":"84","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/User.ts":"85","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Warehouse.ts":"86","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/utils/constants.ts":"87","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/utils/initialStates.ts":"88","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/utils/validationSchemas.ts":"89","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/brand/CreateEdit.tsx":"90","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/client/CreateEdit.tsx":"91","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/BoxCustom.tsx":"92","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/CreateEditBoxes.tsx":"93","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/DragAndDropBoxes.tsx":"94","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/EditCreateBoxes.tsx":"95","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/PropertyOption.tsx":"96","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/suppliers/CreateEdit.tsx":"97","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/suppliers/CreditAdd.tsx":"98","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/suppliers/DiscountAdd.tsx":"99","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/AddChips.tsx":"100","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/DragAndDrop.tsx":"101","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/DrawerCustom.tsx":"102","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/Editor.tsx":"103","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/UploadImages.tsx":"104","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/brands.tsx":"105","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/client.tsx":"106","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/productscopy.tsx":"107","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/suppliers.tsx":"108","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/types-clients.tsx":"109","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/BrandService.ts":"110","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/ClientService.ts":"111","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/CopomexService.ts":"112","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/ImagesService.ts":"113","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/ProductsService.ts":"114","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/SupplierService.ts":"115","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/OrganizationClient.ts":"116","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/TypeOfClient.ts":"117","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/react-dropzone-uploader/Dropzone.tsx":"118","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/react-dropzone-uploader/Input.tsx":"119","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/react-dropzone-uploader/Layout.tsx":"120","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/react-dropzone-uploader/Preview.tsx":"121","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/react-dropzone-uploader/SubmitButton.tsx":"122","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/react-dropzone-uploader/utils.ts":"123","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/LoadingPage.tsx":"124","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/collection/SearchProducts.tsx":"125","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/offers/CreateEdit.tsx":"126","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/EditVariants.tsx":"127","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/ImageBox.tsx":"128","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/ViewProduct.tsx":"129","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/DataTableCustomSimple.tsx":"130","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/helpers/ChannelsData.ts":"131","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/helpers/ColorsData.ts":"132","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/helpers/IvasData.ts":"133","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/helpers/SatCode.ts":"134","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/helpers/SizeData.ts":"135","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/helpers/TypesProducts.ts":"136","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/offers.tsx":"137","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/products/[id].tsx":"138","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/products/create.tsx":"139","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/products/index.tsx":"140","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/stock.tsx":"141","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/OffersService.ts":"142","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/StockService.ts":"143"},{"size":4370,"mtime":1683904716687,"results":"144","hashOfConfig":"145"},{"size":8397,"mtime":1684338833527,"results":"146","hashOfConfig":"145"},{"size":8641,"mtime":1683904716689,"results":"147","hashOfConfig":"145"},{"size":954,"mtime":1683059893952,"results":"148","hashOfConfig":"145"},{"size":6137,"mtime":1683307538609,"results":"149","hashOfConfig":"145"},{"size":395,"mtime":1683059893952,"results":"150","hashOfConfig":"145"},{"size":24769,"mtime":1684338833530,"results":"151","hashOfConfig":"145"},{"size":7998,"mtime":1683904716689,"results":"152","hashOfConfig":"145"},{"size":6647,"mtime":1683904716690,"results":"153","hashOfConfig":"145"},{"size":2124,"mtime":1683897620905,"results":"154","hashOfConfig":"145"},{"size":6284,"mtime":1683904716699,"results":"155","hashOfConfig":"145"},{"size":6610,"mtime":1684338833532,"results":"156","hashOfConfig":"145"},{"size":8180,"mtime":1683904716700,"results":"157","hashOfConfig":"145"},{"size":13874,"mtime":1683904716701,"results":"158","hashOfConfig":"145"},{"size":2807,"mtime":1683897620911,"results":"159","hashOfConfig":"145"},{"size":1626,"mtime":1683317300472,"results":"160","hashOfConfig":"145"},{"size":2599,"mtime":1683897620913,"results":"161","hashOfConfig":"145"},{"size":8806,"mtime":1683904716702,"results":"162","hashOfConfig":"145"},{"size":5811,"mtime":1683904716702,"results":"163","hashOfConfig":"145"},{"size":16718,"mtime":1683904716703,"results":"164","hashOfConfig":"145"},{"size":977,"mtime":1683059893953,"results":"165","hashOfConfig":"145"},{"size":1017,"mtime":1684339777886,"results":"166","hashOfConfig":"145"},{"size":513,"mtime":1683059893953,"results":"167","hashOfConfig":"145"},{"size":869,"mtime":1684338833535,"results":"168","hashOfConfig":"145"},{"size":5452,"mtime":1683904716703,"results":"169","hashOfConfig":"145"},{"size":6236,"mtime":1684338833535,"results":"170","hashOfConfig":"145"},{"size":5730,"mtime":1683904716704,"results":"171","hashOfConfig":"145"},{"size":1505,"mtime":1683317653638,"results":"172","hashOfConfig":"145"},{"size":729,"mtime":1683059893953,"results":"173","hashOfConfig":"145"},{"size":5317,"mtime":1683261304710,"results":"174","hashOfConfig":"145"},{"size":6136,"mtime":1683904716704,"results":"175","hashOfConfig":"145"},{"size":12153,"mtime":1683904716704,"results":"176","hashOfConfig":"145"},{"size":5611,"mtime":1683059893953,"results":"177","hashOfConfig":"145"},{"size":4991,"mtime":1683897620921,"results":"178","hashOfConfig":"145"},{"size":5784,"mtime":1683904716705,"results":"179","hashOfConfig":"145"},{"size":6848,"mtime":1683904716706,"results":"180","hashOfConfig":"145"},{"size":6454,"mtime":1683904716707,"results":"181","hashOfConfig":"145"},{"size":5789,"mtime":1683904716707,"results":"182","hashOfConfig":"145"},{"size":6082,"mtime":1683904716707,"results":"183","hashOfConfig":"145"},{"size":489,"mtime":1683059893954,"results":"184","hashOfConfig":"145"},{"size":1524,"mtime":1683904716708,"results":"185","hashOfConfig":"145"},{"size":1679,"mtime":1684338833537,"results":"186","hashOfConfig":"145"},{"size":1514,"mtime":1683904716708,"results":"187","hashOfConfig":"145"},{"size":1289,"mtime":1683317514203,"results":"188","hashOfConfig":"145"},{"size":1638,"mtime":1683904716709,"results":"189","hashOfConfig":"145"},{"size":1654,"mtime":1683904716709,"results":"190","hashOfConfig":"145"},{"size":836,"mtime":1683904716710,"results":"191","hashOfConfig":"145"},{"size":1512,"mtime":1683904716711,"results":"192","hashOfConfig":"145"},{"size":1522,"mtime":1683904716711,"results":"193","hashOfConfig":"145"},{"size":1641,"mtime":1683904716712,"results":"194","hashOfConfig":"145"},{"size":1643,"mtime":1683904716712,"results":"195","hashOfConfig":"145"},{"size":1415,"mtime":1683904716712,"results":"196","hashOfConfig":"145"},{"size":1454,"mtime":1683154914205,"results":"197","hashOfConfig":"145"},{"size":1527,"mtime":1683904716712,"results":"198","hashOfConfig":"145"},{"size":1184,"mtime":1684338833541,"results":"199","hashOfConfig":"145"},{"size":186,"mtime":1683059893956,"results":"200","hashOfConfig":"145"},{"size":80,"mtime":1683059893956,"results":"201","hashOfConfig":"145"},{"size":175,"mtime":1683059893956,"results":"202","hashOfConfig":"145"},{"size":84,"mtime":1683059893956,"results":"203","hashOfConfig":"145"},{"size":574,"mtime":1683897620930,"results":"204","hashOfConfig":"145"},{"size":161,"mtime":1683059893956,"results":"205","hashOfConfig":"145"},{"size":321,"mtime":1683059893956,"results":"206","hashOfConfig":"145"},{"size":143,"mtime":1683059893956,"results":"207","hashOfConfig":"145"},{"size":99,"mtime":1683059893956,"results":"208","hashOfConfig":"145"},{"size":89,"mtime":1683261710730,"results":"209","hashOfConfig":"145"},{"size":71,"mtime":1683059893956,"results":"210","hashOfConfig":"145"},{"size":97,"mtime":1683059893956,"results":"211","hashOfConfig":"145"},{"size":211,"mtime":1683059893956,"results":"212","hashOfConfig":"145"},{"size":407,"mtime":1684338833541,"results":"213","hashOfConfig":"145"},{"size":108,"mtime":1683059893956,"results":"214","hashOfConfig":"145"},{"size":203,"mtime":1683059893956,"results":"215","hashOfConfig":"145"},{"size":126,"mtime":1683261710730,"results":"216","hashOfConfig":"145"},{"size":866,"mtime":1684338833541,"results":"217","hashOfConfig":"145"},{"size":301,"mtime":1683059893957,"results":"218","hashOfConfig":"145"},{"size":98,"mtime":1683059893957,"results":"219","hashOfConfig":"145"},{"size":83,"mtime":1683904716713,"results":"220","hashOfConfig":"145"},{"size":107,"mtime":1683059893957,"results":"221","hashOfConfig":"145"},{"size":186,"mtime":1683059893957,"results":"222","hashOfConfig":"145"},{"size":136,"mtime":1683904716713,"results":"223","hashOfConfig":"145"},{"size":209,"mtime":1683261710730,"results":"224","hashOfConfig":"145"},{"size":138,"mtime":1683059893957,"results":"225","hashOfConfig":"145"},{"size":272,"mtime":1683059893957,"results":"226","hashOfConfig":"145"},{"size":148,"mtime":1683059893957,"results":"227","hashOfConfig":"145"},{"size":83,"mtime":1683059893957,"results":"228","hashOfConfig":"145"},{"size":257,"mtime":1683059893957,"results":"229","hashOfConfig":"145"},{"size":330,"mtime":1683904716713,"results":"230","hashOfConfig":"145"},{"size":1102,"mtime":1684338833542,"results":"231","hashOfConfig":"145"},{"size":144,"mtime":1683059893957,"results":"232","hashOfConfig":"145"},{"size":408,"mtime":1683059893957,"results":"233","hashOfConfig":"145"},{"size":4308,"mtime":1683904716686,"results":"234","hashOfConfig":"145"},{"size":27392,"mtime":1683904716688,"results":"235","hashOfConfig":"145"},{"size":989,"mtime":1683897620904,"results":"236","hashOfConfig":"145"},{"size":8526,"mtime":1684338833531,"results":"237","hashOfConfig":"145"},{"size":2913,"mtime":1683897620904,"results":"238","hashOfConfig":"145"},{"size":9942,"mtime":1683897620905,"results":"239","hashOfConfig":"145"},{"size":1639,"mtime":1683897620905,"results":"240","hashOfConfig":"145"},{"size":27791,"mtime":1683904716701,"results":"241","hashOfConfig":"145"},{"size":2257,"mtime":1683897620909,"results":"242","hashOfConfig":"145"},{"size":3373,"mtime":1683897620909,"results":"243","hashOfConfig":"145"},{"size":1941,"mtime":1683897620911,"results":"244","hashOfConfig":"145"},{"size":2294,"mtime":1683897620912,"results":"245","hashOfConfig":"145"},{"size":4012,"mtime":1683897620912,"results":"246","hashOfConfig":"145"},{"size":1134,"mtime":1683897620912,"results":"247","hashOfConfig":"145"},{"size":7142,"mtime":1684338833532,"results":"248","hashOfConfig":"145"},{"size":5266,"mtime":1683904716703,"results":"249","hashOfConfig":"145"},{"size":7129,"mtime":1683904716704,"results":"250","hashOfConfig":"145"},{"size":70015,"mtime":1683897620919,"results":"251","hashOfConfig":"145"},{"size":5573,"mtime":1683904716706,"results":"252","hashOfConfig":"145"},{"size":6358,"mtime":1683904716706,"results":"253","hashOfConfig":"145"},{"size":1508,"mtime":1683904716707,"results":"254","hashOfConfig":"145"},{"size":1513,"mtime":1683904716708,"results":"255","hashOfConfig":"145"},{"size":1765,"mtime":1683904716708,"results":"256","hashOfConfig":"145"},{"size":582,"mtime":1683904716709,"results":"257","hashOfConfig":"145"},{"size":2594,"mtime":1684338833537,"results":"258","hashOfConfig":"145"},{"size":1523,"mtime":1683904716711,"results":"259","hashOfConfig":"145"},{"size":140,"mtime":1683897620930,"results":"260","hashOfConfig":"145"},{"size":193,"mtime":1683317953135,"results":"261","hashOfConfig":"145"},{"size":26039,"mtime":1683904716691,"results":"262","hashOfConfig":"145"},{"size":2017,"mtime":1683904716692,"results":"263","hashOfConfig":"145"},{"size":1536,"mtime":1683904716693,"results":"264","hashOfConfig":"145"},{"size":5668,"mtime":1683904716694,"results":"265","hashOfConfig":"145"},{"size":1562,"mtime":1683904716694,"results":"266","hashOfConfig":"145"},{"size":3593,"mtime":1683904716698,"results":"267","hashOfConfig":"145"},{"size":336,"mtime":1684338833527,"results":"268","hashOfConfig":"145"},{"size":6701,"mtime":1684338833530,"results":"269","hashOfConfig":"145"},{"size":32032,"mtime":1684338833530,"results":"270","hashOfConfig":"145"},{"size":11088,"mtime":1684338833531,"results":"271","hashOfConfig":"145"},{"size":1969,"mtime":1684338833531,"results":"272","hashOfConfig":"145"},{"size":1098,"mtime":1684338833531,"results":"273","hashOfConfig":"145"},{"size":1695,"mtime":1684338833532,"results":"274","hashOfConfig":"145"},{"size":221,"mtime":1684338833533,"results":"275","hashOfConfig":"145"},{"size":536,"mtime":1684338833533,"results":"276","hashOfConfig":"145"},{"size":221,"mtime":1684338833533,"results":"277","hashOfConfig":"145"},{"size":386,"mtime":1684338833534,"results":"278","hashOfConfig":"145"},{"size":127,"mtime":1684338833534,"results":"279","hashOfConfig":"145"},{"size":157,"mtime":1684338833534,"results":"280","hashOfConfig":"145"},{"size":7107,"mtime":1684338833535,"results":"281","hashOfConfig":"145"},{"size":107242,"mtime":1684338833536,"results":"282","hashOfConfig":"145"},{"size":104250,"mtime":1684338833536,"results":"283","hashOfConfig":"145"},{"size":5329,"mtime":1684338833537,"results":"284","hashOfConfig":"145"},{"size":3960,"mtime":1683911059549,"results":"285","hashOfConfig":"145"},{"size":1510,"mtime":1684338833537,"results":"286","hashOfConfig":"145"},{"size":490,"mtime":1683911059549,"results":"287","hashOfConfig":"145"},{"filePath":"288","messages":"289","suppressedMessages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"113n9zv",{"filePath":"291","messages":"292","suppressedMessages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294"},{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298"},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305"},{"filePath":"306","messages":"307","suppressedMessages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","suppressedMessages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312"},{"filePath":"313","messages":"314","suppressedMessages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","suppressedMessages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","suppressedMessages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322"},{"filePath":"323","messages":"324","suppressedMessages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326"},{"filePath":"327","messages":"328","suppressedMessages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"330","messages":"331","suppressedMessages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","suppressedMessages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336"},{"filePath":"337","messages":"338","suppressedMessages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","suppressedMessages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","suppressedMessages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346"},{"filePath":"347","messages":"348","suppressedMessages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350"},{"filePath":"351","messages":"352","suppressedMessages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","suppressedMessages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357"},{"filePath":"358","messages":"359","suppressedMessages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","suppressedMessages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","suppressedMessages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","suppressedMessages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370"},{"filePath":"371","messages":"372","suppressedMessages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","suppressedMessages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377"},{"filePath":"378","messages":"379","suppressedMessages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","suppressedMessages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","suppressedMessages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","suppressedMessages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"393","messages":"394","suppressedMessages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396"},{"filePath":"397","messages":"398","suppressedMessages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","suppressedMessages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"403","messages":"404","suppressedMessages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","suppressedMessages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"409","messages":"410","suppressedMessages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"412","messages":"413","suppressedMessages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"415","messages":"416","suppressedMessages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"418","messages":"419","suppressedMessages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"421","messages":"422","suppressedMessages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"424","messages":"425","suppressedMessages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"427","messages":"428","suppressedMessages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","suppressedMessages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"433","messages":"434","suppressedMessages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","suppressedMessages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"439","messages":"440","suppressedMessages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"442","messages":"443","suppressedMessages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"445","messages":"446","suppressedMessages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"448","messages":"449","suppressedMessages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"451","messages":"452","suppressedMessages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","suppressedMessages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"457","messages":"458","suppressedMessages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"460","messages":"461","suppressedMessages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"463","messages":"464","suppressedMessages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"466","messages":"467","suppressedMessages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"469","messages":"470","suppressedMessages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"472","messages":"473","suppressedMessages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"475","messages":"476","suppressedMessages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"478","messages":"479","suppressedMessages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"481","messages":"482","suppressedMessages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"484","messages":"485","suppressedMessages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"487","messages":"488","suppressedMessages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"490","messages":"491","suppressedMessages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"493","messages":"494","suppressedMessages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"496","messages":"497","suppressedMessages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"499","messages":"500","suppressedMessages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"502","messages":"503","suppressedMessages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"505","messages":"506","suppressedMessages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"508","messages":"509","suppressedMessages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"511","messages":"512","suppressedMessages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"514","messages":"515","suppressedMessages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"517","messages":"518","suppressedMessages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"520","messages":"521","suppressedMessages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"523","messages":"524","suppressedMessages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"526","messages":"527","suppressedMessages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"529","messages":"530","suppressedMessages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"532","messages":"533","suppressedMessages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"535","messages":"536","suppressedMessages":"537","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"538","messages":"539","suppressedMessages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"541","messages":"542","suppressedMessages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"544","messages":"545","suppressedMessages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"547","messages":"548","suppressedMessages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"550","messages":"551","suppressedMessages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"553","messages":"554","suppressedMessages":"555","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"556","messages":"557","suppressedMessages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"559","messages":"560","suppressedMessages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"562","messages":"563","suppressedMessages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","suppressedMessages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"568","messages":"569","suppressedMessages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"571","messages":"572","suppressedMessages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574"},{"filePath":"575","messages":"576","suppressedMessages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"578","messages":"579","suppressedMessages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"581","messages":"582","suppressedMessages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"584","messages":"585","suppressedMessages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"587","messages":"588","suppressedMessages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590"},{"filePath":"591","messages":"592","suppressedMessages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594"},{"filePath":"595","messages":"596","suppressedMessages":"597","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"598","messages":"599","suppressedMessages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"601","messages":"602","suppressedMessages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"604","messages":"605","suppressedMessages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"607","messages":"608","suppressedMessages":"609","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"610","messages":"611","suppressedMessages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"613","messages":"614","suppressedMessages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"616","messages":"617","suppressedMessages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"619","messages":"620","suppressedMessages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"622","messages":"623","suppressedMessages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625"},{"filePath":"626","messages":"627","suppressedMessages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"629","messages":"630","suppressedMessages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"632","messages":"633","suppressedMessages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"635","messages":"636","suppressedMessages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"638","messages":"639","suppressedMessages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"641","messages":"642","suppressedMessages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"644","messages":"645","suppressedMessages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"647","messages":"648","suppressedMessages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"650","messages":"651","suppressedMessages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"653","messages":"654","suppressedMessages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"656","messages":"657","suppressedMessages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"659","messages":"660","suppressedMessages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"662","messages":"663","suppressedMessages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"665","messages":"666","suppressedMessages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"668"},{"filePath":"669","messages":"670","suppressedMessages":"671","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"672","messages":"673","suppressedMessages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"675","messages":"676","suppressedMessages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"678","messages":"679","suppressedMessages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"681"},{"filePath":"682","messages":"683","suppressedMessages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"685","messages":"686","suppressedMessages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"688","messages":"689","suppressedMessages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"691"},{"filePath":"692","messages":"693","suppressedMessages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"695","messages":"696","suppressedMessages":"697","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"698","messages":"699","suppressedMessages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"701","messages":"702","suppressedMessages":"703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"704","messages":"705","suppressedMessages":"706","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"707","messages":"708","suppressedMessages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"710","messages":"711","suppressedMessages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"713","messages":"714","suppressedMessages":"715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"716","messages":"717","suppressedMessages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"719","messages":"720","suppressedMessages":"721","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"722"},{"filePath":"723","messages":"724","suppressedMessages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"726"},{"filePath":"727","messages":"728","suppressedMessages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"730","messages":"731","suppressedMessages":"732","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"733","messages":"734","suppressedMessages":"735","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"736","messages":"737","suppressedMessages":"738","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/category/CreateEdit.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/collection/CreateEdit.tsx",["739","740"],[],"import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { notify, _apiUrl } from \"@/utils/constants\";\nimport {\n  createCollection,\n  updateCollection,\n} from \"@/services/CollectionService\";\nimport ImageDropzone from \"../ui/ImageDropzone\";\nimport { Responsepetition } from \"@/types/Responsepetition\";\nimport SearchProducts from \"./SearchProducts\";\n\ninterface FormValues {\n  name: string;\n  title: string;\n  meta: string;\n  url: string;\n}\n\ninterface Props {\n  children?: React.ReactNode;\n  icon?: React.ReactNode;\n  title?: string;\n  type: string;\n  collection?: any;\n  updateTable?: any;\n  open: boolean;\n  handleClose?: any;\n}\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(\"Nombre requerido\"),\n  title: Yup.string().required(\"titulo requerida\"),\n  meta: Yup.string().required(\"meta requerida\"),\n  url: Yup.string().required(\"url requerida\"),\n});\n\nconst CreateEdit: React.FC<Props> = ({\n  type,\n  collection,\n  updateTable,\n  open,\n  handleClose,\n}) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [image, setImage] = useState<File>();\n  const [imageUrl, setImageUrl] = useState<string>(\"\");\n  const [filter, setFilter] = useState<string>(\"\");\n  const [uploadedImage, setUploadedImage] = useState<File | null>(null);\n\n  const handleFileUploaded = (file: File) => {\n    setUploadedImage(file);\n    console.log(\"Archivo cargado:\", file);\n    // Puedes procesar el archivo aquí (ej. subirlo a un servidor, mostrar una vista previa, etc.)\n  };\n\n  const handleSubmit = async (values: FormValues, actions: any) => {\n    const formdata = {\n      ...values,\n      image: uploadedImage,\n    };\n\n    const fd = new FormData();\n    fd.append(\"name\", formdata.name);\n    fd.append(\"title\", formdata.title);\n    fd.append(\"meta\", formdata.meta);\n    fd.append(\"url\", formdata.url);\n    console.log(\"filter\", filter);\n    fd.append(\"filters\", JSON.stringify(filter));\n    fd.append(\"image\", image as File);\n\n    if (type === \"create\") {\n      const { data, state, error }: Responsepetition = await createCollection(\n        fd\n      );\n      if (state) {\n        notify(\"success\", \"Se ha creado exitosamente\");\n        updateTable();\n        handleClose();\n      } else {\n        notify(\"error\", error.message);\n      }\n    }\n\n    if (type === \"edit\") {\n      const { data, state, error }: Responsepetition = await updateCollection(\n        collection.id,\n        fd\n      );\n      if (state) {\n        notify(\"success\", \"Se ha actualizado\");\n        updateTable();\n        handleClose();\n      } else {\n        notify(\"error\", error.message);\n      }\n    }\n  };\n\n  const handleButtonClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setImage(file);\n      setImageUrl(URL.createObjectURL(file));\n    }\n  };\n\n  useEffect(() => {\n    if (type === \"edit\" || type === \"view\") {\n      setFilter(JSON.parse(collection.filters));\n      setImageUrl(_apiUrl + \"/\" + collection.image);\n    }\n  }, [open]);\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose} maxWidth=\"xl\" fullWidth>\n        <DialogTitle>Colección</DialogTitle>\n        <Formik\n          initialValues={{\n            name: collection ? collection.name : \"\",\n            title: collection ? collection.title : \"\",\n            meta: collection ? collection.meta : \"\",\n            url: collection ? collection.url : \"\",\n          }}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ isSubmitting, errors, touched, handleChange }) => (\n            <Form>\n              <DialogContent>\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  name=\"name\"\n                  type=\"text\"\n                  label=\"Nombre\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.name && errors.name ? (\n                      <ErrorMessage name=\"name\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.name && errors.name ? true : false}\n                  onChange={handleChange}\n                />\n                <Typography mt={4} fontWeight={\"bold\"}>\n                  SEO\n                </Typography>\n                <hr />\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"title\"\n                  label=\"Titulo\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.title && errors.title ? (\n                      <ErrorMessage name=\"title\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.title && errors.title ? true : false}\n                  onChange={handleChange}\n                />\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"meta\"\n                  label=\"Meta descripción\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.meta && errors.meta ? (\n                      <ErrorMessage name=\"meta\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.meta && errors.meta ? true : false}\n                  onChange={handleChange}\n                />\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"url\"\n                  label=\"URL\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.url && errors.url ? <ErrorMessage name=\"url\" /> : \"\"\n                  }\n                  error={touched.url && errors.url ? true : false}\n                  onChange={handleChange}\n                />\n\n                {type !== \"view\" ? (\n                  <>\n                    <Button variant=\"contained\" onClick={handleButtonClick}>\n                      <i className=\"pli-file-add\"></i>\n                      Subir imagen\n                    </Button>\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      ref={fileInputRef}\n                      style={{ display: \"none\" }}\n                      onChange={handleFileSelect}\n                    />{\" \"}\n                  </>\n                ) : null}\n                <Grid item xs={12}>\n                  <Grid container justifyContent=\"center\" alignItems=\"center\">\n                    {imageUrl && (\n                      <img src={imageUrl} width=\"200vw\" alt={imageUrl} />\n                    )}\n                  </Grid>\n                </Grid>\n                <SearchProducts\n                  open={open}\n                  filter={filter}\n                  setFilter={setFilter}\n                />\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleClose} variant=\"contained\" color=\"error\">\n                  Cancelar\n                </Button>\n                {type !== \"view\" && (\n                  <Button\n                    type=\"submit\"\n                    color=\"primary\"\n                    variant=\"contained\"\n                    disabled={isSubmitting}\n                  >\n                    {type === \"edit\" && \"Guardar\"}\n                    {type === \"create\" && \"Crear\"}\n                  </Button>\n                )}\n              </DialogActions>\n            </Form>\n          )}\n        </Formik>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default CreateEdit;\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/family/CreateEdit.tsx",["741"],[],"import React, { useEffect, useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage, FieldAttributes } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  InputLabel,\n  MenuItem,\n  Select,\n  Tab,\n  Tabs,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { notify } from \"@/utils/constants\";\nimport { createFamily, updateFamily } from \"@/services/FamilyService\";\nimport { Responsepetition } from \"@/types/Responsepetition\";\n\ninterface FormValues {\n  name: string;\n  fields: string;\n  description: string;\n}\n\ninterface Props {\n  children?: React.ReactNode;\n  icon?: React.ReactNode;\n  title?: string;\n  type: string;\n  family?: any;\n  updateTable?: any;\n  open: boolean;\n  handleClose?: any;\n}\n\ninterface Attribute {\n  tag: string;\n  type: string;\n}\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(\"Nombre requerido\"),\n  description: Yup.string().required(\"Descripción requerida\"),\n});\n\nconst CreateEdit: React.FC<Props> = ({\n  type,\n  family,\n  updateTable,\n  open,\n  handleClose,\n}) => {\n  const [attributes, setAttributes] = useState<Attribute[]>(\n    family ? family.fields : []\n  );\n  const [tag, setEtiqueta] = useState(\"\");\n  const [typeC, setTypeC] = useState(\"Elegir\");\n\n  const agregarCampo = () => {\n    if (typeC !== \"Elegir\" && tag.trim().length > 0) {\n      setAttributes([...attributes, { tag: tag, type: typeC }]);\n      setEtiqueta(\"\");\n      setTypeC(\"Elegir\");\n    }\n  };\n\n  useEffect(() => {\n    if (family) {\n      setAttributes(family.fields);\n    }\n    if (type == \"create\") {\n      setAttributes([]);\n    }\n  }, [open]);\n\n  const eliminarCampo = (index: number) => {\n    setAttributes(attributes.filter((_, i) => i !== index));\n  };\n\n  const handleSubmit = async (values: FormValues, actions: any) => {\n    const formdata = {\n      ...values,\n      fields: attributes,\n    };\n\n    if (type === \"create\") {\n      const { data, state, error }: Responsepetition = await createFamily(\n        formdata\n      );\n      if (state) {\n        notify(\"success\", \"Se ha creado exitosamente\");\n        updateTable();\n        handleClose();\n      } else {\n        notify(\"error\", error.message);\n      }\n    }\n\n    if (type === \"edit\") {\n      const { data, state, error }: Responsepetition = await updateFamily(\n        family.id,\n        formdata\n      );\n      if (state) {\n        notify(\"success\", \"Se ha actualizado\");\n        updateTable();\n        handleClose();\n      } else {\n        notify(\"error\", error.message);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Familia</DialogTitle>\n        <Formik\n          initialValues={{\n            name: family ? family.name : \"\",\n            fields: family ? family.fields : \"\",\n            description: family ? family.description : \"\",\n          }}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ isSubmitting, errors, touched, handleChange }) => (\n            <Form>\n              <DialogContent>\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  name=\"name\"\n                  type=\"text\"\n                  label=\"Nombre\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.name && errors.name ? (\n                      <ErrorMessage name=\"name\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.name && errors.name ? true : false}\n                  onChange={handleChange}\n                />\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"description\"\n                  label=\"Descripción\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.description && errors.description ? (\n                      <ErrorMessage name=\"description\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={\n                    touched.description && errors.description ? true : false\n                  }\n                  onChange={handleChange}\n                />\n\n                <Typography mt={4}>Atributos</Typography>\n\n                {type !== \"view\" && (\n                  <Box mt={3}>\n                    <div className=\"col-md-12 row align-items-center\">\n                      <div className=\"col-md-5\">\n                        <TextField\n                          id=\"etiqueta\"\n                          label=\"Etiqueta del campo\"\n                          type=\"text\"\n                          value={tag}\n                          onChange={(e) => setEtiqueta(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"col-md-5\">\n                        <FormControl variant=\"outlined\" fullWidth>\n                          <InputLabel id=\"tipo-label\">\n                            Tipo del campo\n                          </InputLabel>\n                          <Select\n                            labelId=\"tipo-label\"\n                            id=\"tipo\"\n                            value={typeC}\n                            onChange={(e) => setTypeC(e.target.value)}\n                            label=\"Tipo del campo\"\n                          >\n                            <MenuItem value=\"Elegir\" selected>\n                              Elegir...\n                            </MenuItem>\n                            <MenuItem value=\"number\">Número</MenuItem>\n                            <MenuItem value=\"text\">Texto</MenuItem>\n                            <MenuItem value=\"date\">Fecha</MenuItem>\n                          </Select>\n                        </FormControl>\n                      </div>\n                      <div className=\"col-2 d-flex justify-content-end\">\n                        <Button\n                          variant=\"contained\"\n                          color=\"secondary\"\n                          onClick={agregarCampo}\n                        >\n                          Agregar\n                        </Button>\n                      </div>\n                    </div>\n                  </Box>\n                )}\n                <hr />\n                <div className=\"row mt-2 ms-2\">\n                  <div id=\"campos\" className=\"row col-12\">\n                    {attributes.map(({ tag: etiqueta, type: tipo }, index) => (\n                      <div key={index} className=\"row col-md-5 m-1 mt-3\">\n                        <div className=\"col-md-10\">\n                          <label\n                            className=\"form-label\"\n                            htmlFor={`campo${index}`}\n                          >\n                            {etiqueta}\n                          </label>\n                          <input\n                            type={tipo}\n                            placeholder={tipo}\n                            className=\"form-control\"\n                            id={`campo${index}`}\n                            name={`campo${index}`}\n                          />\n                        </div>\n\n                        <button\n                          type=\"button\"\n                          style={{ height: \"35px\" }}\n                          className=\"col-md-3 mt-4 ms-3 btn btn-close\"\n                          onClick={() => eliminarCampo(index)}\n                        ></button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleClose} variant=\"contained\" color=\"error\">\n                  Cancelar\n                </Button>\n                {type !== \"view\" && (\n                  <Button\n                    type=\"submit\"\n                    color=\"primary\"\n                    variant=\"contained\"\n                    disabled={isSubmitting}\n                  >\n                    {type === \"edit\" && \"Guardar\"}\n\n                    {type === \"create\" && \"Crear\"}\n                  </Button>\n                )}\n              </DialogActions>\n            </Form>\n          )}\n        </Formik>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default CreateEdit;\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/layout/footer.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/layout/header.tsx",["742","743"],[],"import Image from \"next/image\";\nimport logo from \"../../assets/img/logob2.png\";\nimport { useEffect, useState } from \"react\";\nimport { _apiUrl } from \"@/utils/constants\";\nimport Link from \"next/link\";\n\nconst Header = () => {\n  const [authenticatedUser, setAuthenticatedUser] = useState({\n    name: \"Name default\",\n    organization: {\n      logo: \"https://cdn.shopify.com/s/files/1/0253/8618/8834/files/MDoris_Azul_256x.png\",\n      name: \"Image default\",\n    },\n  });\n\n  useEffect(() => {\n    if (window.localStorage.getItem(\"_user\")) {\n      const user = JSON.parse(\n        window.localStorage.getItem(\"_user\") ||\n          `{\n          name: \"Name default\",\n          organization: {\n            logo: \"https://cdn.shopify.com/s/files/1/0253/8618/8834/files/MDoris_Azul_256x.png\",\n            name: \"Image default\",\n          },\n        }`\n      );\n      setAuthenticatedUser(user);\n    }\n  }, []);\n\n  return (\n    <>\n      <header className=\"header\">\n        <div className=\"header__inner\">\n          {/* Brand */}\n          <div className=\"header__brand\">\n            <div className=\"brand-wrap\">\n              {/* Brand logo */}\n              <Link href=\"/home\" className=\" stretched-link\">\n                <img\n                  src={_apiUrl + \"/\" + authenticatedUser.organization?.logo}\n                  alt={\"Logo \" + authenticatedUser.organization?.name}\n                  width={120}\n                />\n              </Link>\n              {/* You can also use IMG or SVG instead of a text element. */}\n            </div>\n          </div>\n          {/* End - Brand */}\n          <div className=\"header__content\">\n            {/* Content Header - Left Side: */}\n            <div className=\"header__content-start\">\n              {/* Navigation Toggler */}\n              <button\n                type=\"button\"\n                className=\"nav-toggler header__btn btn btn-icon btn-sm\"\n                aria-label=\"Nav Toggler\"\n              >\n                <i className=\"psi-list-view\" />\n              </button>\n              {/* Searchbox */}\n            </div>\n            {/* End - Content Header - Left Side */}\n            {/* Content Header - Right Side: */}\n            <div className=\"header__content-end\">\n              {/* Notification Dropdown */}\n              <div className=\"dropdown\">\n                {/* Toggler */}\n                <button\n                  className=\"header__btn btn btn-icon btn-sm\"\n                  type=\"button\"\n                  data-bs-toggle=\"dropdown\"\n                  aria-label=\"Notification dropdown\"\n                  aria-expanded=\"false\"\n                >\n                  <span className=\"d-block position-relative\">\n                    <i className=\"psi-bell\" />\n                  </span>\n                </button>\n                {/* Notification dropdown menu */}\n                <div className=\"dropdown-menu dropdown-menu-end w-md-300px\">\n                  <div className=\"border-bottom px-3 py-2 mb-3\">\n                    <h5>Notificaciones</h5>\n                  </div>\n                  <div className=\"list-group list-group-borderless\">\n                    {/* List item */}\n                    <div className=\"list-group-item list-group-item-action d-flex align-items-start mb-3\">\n                      <div className=\"flex-shrink-0 me-3\">\n                        <i className=\"psi-data-settings text-muted fs-2\" />\n                      </div>\n                      <div className=\"flex-grow-1 \">\n                        <a\n                          href=\"#\"\n                          className=\"h6 d-block mb-0 stretched-link text-decoration-none\"\n                        >\n                          Movimiento en almacen\n                        </a>\n                        <small className=\"text-muted\">\n                          Se ha movido a almacen 2.\n                        </small>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {/* End - Notification dropdown */}\n              {/* User dropdown */}\n              <div className=\"dropdown\">\n                {/* Toggler */}\n                <button\n                  className=\"header__btn btn btn-icon btn-sm\"\n                  type=\"button\"\n                  data-bs-toggle=\"dropdown\"\n                  aria-label=\"User dropdown\"\n                  aria-expanded=\"false\"\n                >\n                  <i className=\"psi-male\" />\n                </button>\n                {/* User dropdown menu */}\n                <div className=\"dropdown-menu dropdown-menu-end w-md-450px\">\n                  {/* User dropdown header */}\n                  <div className=\"d-flex align-items-center border-bottom px-3 py-2\">\n                    <div className=\"flex-shrink-0\">\n                      <img\n                        className=\"img-sm rounded-circle\"\n                        src=\"./assets/img/profile-photos/1.png\"\n                        alt=\"Profile Picture\"\n                        loading=\"lazy\"\n                      />\n                    </div>\n                    <div className=\"flex-grow-1 ms-3\">\n                      <h5 className=\"mb-0\">Aaron Chavez</h5>\n                      <span className=\"text-muted fst-italic\">\n                        aaron_chavez@example.com\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col-md-12\">\n                      {/* User menu link */}\n                      <div className=\"list-group list-group-borderless h-100 py-3\">\n                        <a\n                          href=\"#\"\n                          className=\"list-group-item list-group-item-action\"\n                        >\n                          <i className=\"pli-unlock fs-5 me-2\" /> Logout\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {/* End - User dropdown */}\n            </div>\n          </div>\n        </div>\n      </header>\n    </>\n  );\n};\n\nexport default Header;\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/layout/main.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/layout/sidebar.tsx",["744"],[],"import Image from \"next/image\";\nimport profile from \"../../assets/img/1.png\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useEffect, useState } from \"react\";\nimport { signOut } from \"next-auth/react\";\nimport { useRouter } from \"next/router\";\nimport Link from \"next/link\";\nimport { User } from \"@/types/User\";\n\nconst rutasConfig = [\n  \"/families\",\n  \"/series\",\n  \"/collections\",\n  \"/categories\",\n  \"/paymentPlataforms\",\n  \"/shipping\",\n  \"/types-clients\",\n  \"/warehouses\",\n  \"/organizations\",\n];\n\nconst SideBar = () => {\n  const [configuration, setConfiguration] = useState(false);\n  const [profileTab, setProfileTab] = useState(false);\n  const { logout } = useAuth();\n\n  const router = useRouter();\n  const currentPath = router.pathname;\n\n  const [authenticatedUser, setAuthenticatedUser] = useState({\n    name: \"Name default\",\n    role_id: {\n      name: \"null\",\n      permits: [\"null\"],\n    },\n    organization: {\n      logo: \"https://cdn.shopify.com/s/files/1/0253/8618/8834/files/MDoris_Azul_256x.png\",\n      name: \"Image default\",\n    },\n  });\n\n  useEffect(() => {\n    if (rutasConfig.includes(currentPath)) {\n      setConfiguration(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (window.localStorage.getItem(\"_user\")) {\n      const user = JSON.parse(\n        window.localStorage.getItem(\"_user\") ||\n          `{\n          name: \"Name default\",\n          organization: {\n            logo: \"https://cdn.shopify.com/s/files/1/0253/8618/8834/files/MDoris_Azul_256x.png\",\n            name: \"Image default\",\n          },\n        }`\n      );\n      setAuthenticatedUser(user);\n    }\n  }, []);\n\n  return (\n    <nav id=\"mainnav-container\" className=\"mainnav\">\n      <div className=\"mainnav__inner\">\n        {/* Navigation menu */}\n        <div className=\"mainnav__top-content scrollable-content pb-5\">\n          {/* Profile Widget */}\n          <div className=\"mainnav__profile mt-3 d-flex3\">\n            <div className=\"mt-2 d-mn-max\" />\n            {/* Profile picture  */}\n            <div className=\"mininav-toggle text-center py-2\">\n              <Image\n                className=\"mainnav__avatar img-md rounded-circle border\"\n                src={profile}\n                alt=\"Profile Picture\"\n              />\n            </div>\n            <div className=\"mininav-content collapsed d-mn-max\">\n              <div className=\"d-grid\">\n                {/* User name and position */}\n                <button\n                  onClick={() => {\n                    setProfileTab(!profileTab);\n                  }}\n                  className=\"d-block btn shadow-none p-2\"\n                >\n                  <span className=\"dropdown-toggle d-flex justify-content-center align-items-center\">\n                    <h6 className=\"mb-0 me-3 font\">{authenticatedUser.name}</h6>\n                  </span>\n                  <small className=\"text-muted font\">\n                    {authenticatedUser.organization?.name}\n                  </small>\n                </button>\n                {/* Collapsed user menu */}\n                <div\n                  id=\"usernav\"\n                  className={\n                    profileTab\n                      ? \"nav flex-column collapsed\"\n                      : \"nav flex-column collapse\"\n                  }\n                >\n                  {authenticatedUser.role_id.permits[0] === \"*\" ||\n                  authenticatedUser.role_id.permits.includes(\n                    \"administrar organización\"\n                  ) ? (\n                    <Link href=\"/user-organizations\" className=\"nav-link\">\n                      <i className=\"pli-identification-badge fs-5 me-2\" />\n                      <span className=\"ms-1\">Configurar organizaciones</span>\n                    </Link>\n                  ) : null}\n                </div>\n              </div>\n            </div>\n          </div>\n          {/* End - Profile widget */}\n          <div className=\"mainnav__categoriy py-3\">\n            <h6 className=\"mainnav__caption mt-0 px-3 fw-bold font\">Menú</h6>\n            <ul className=\"mainnav__menu nav flex-column\">\n              <li className=\"nav-item\">\n                {authenticatedUser.role_id.permits[0] === \"*\" ||\n                authenticatedUser.role_id.permits.includes(\"inicio\") ? (\n                  <Link\n                    href=\"../home\"\n                    className={\n                      currentPath === \"/home\"\n                        ? \"nav-link mininav-toggle collapsed active\"\n                        : \"nav-link mininav-toggle collapsed\"\n                    }\n                  >\n                    <i className=\"pli-home fs-5 me-2\" />\n                    <span className=\"nav-label mininav-content ms-1\">\n                      Inicio\n                    </span>\n                  </Link>\n                ) : null}\n              </li>\n              <li className=\"nav-item\">\n                {authenticatedUser.role_id.permits[0] === \"*\" ||\n                authenticatedUser.role_id.permits.includes(\"productos\") ? (\n                  <Link\n                    href=\"../products\"\n                    className={\n                      currentPath.includes(\"/products\")\n                        ? \"nav-link mininav-toggle collapsed active\"\n                        : \"nav-link mininav-toggle collapsed\"\n                    }\n                  >\n                    <i className=\"pli-drum fs-5 me-2\" />\n                    <span className=\"nav-label mininav-content ms-1\">\n                      Productos\n                    </span>\n                  </Link>\n                ) : null}\n              </li>\n              <li className=\"nav-item\">\n                {authenticatedUser.role_id.permits[0] === \"*\" ||\n                authenticatedUser.role_id.permits.includes(\"existencias\") ? (\n                  <Link\n                    href=\"../stock\"\n                    className={\n                      currentPath === \"/stock\"\n                        ? \"nav-link mininav-toggle collapsed active\"\n                        : \"nav-link mininav-toggle collapsed\"\n                    }\n                  >\n                    <i className=\"pli-money fs-5 me-2\" />\n                    <span className=\"nav-label mininav-content ms-1\">\n                      Existencias\n                    </span>\n                  </Link>\n                ) : null}\n              </li>\n              <li className=\"nav-item\">\n                {authenticatedUser.role_id.permits[0] === \"*\" ||\n                authenticatedUser.role_id.permits.includes(\"usuarios\") ? (\n                  <Link\n                    href=\"../users\"\n                    className={\n                      currentPath === \"/users\"\n                        ? \"nav-link mininav-toggle collapsed active\"\n                        : \"nav-link mininav-toggle collapsed\"\n                    }\n                  >\n                    <i className=\"pli-user fs-5 me-2\" />\n                    <span className=\"nav-label mininav-content ms-1\">\n                      Usuarios\n                    </span>\n                  </Link>\n                ) : null}\n              </li>\n              <li className=\"nav-item\">\n                {authenticatedUser.role_id.permits[0] === \"*\" ||\n                authenticatedUser.role_id.permits.includes(\"proveedores\") ? (\n                  <Link\n                    href=\"../suppliers\"\n                    className={\n                      currentPath === \"/suppliers\"\n                        ? \"nav-link mininav-toggle collapsed active\"\n                        : \"nav-link mininav-toggle collapsed\"\n                    }\n                  >\n                    <i className=\"pli-user fs-5 me-2\" />\n                    <span className=\"nav-label mininav-content ms-1\">\n                      Proveedores\n                    </span>\n                  </Link>\n                ) : null}\n              </li>\n              <li className=\"nav-item\">\n                {authenticatedUser.role_id.permits[0] === \"*\" ||\n                authenticatedUser.role_id.permits.includes(\"roles\") ? (\n                  <Link\n                    href=\"../roles\"\n                    className={\n                      currentPath === \"/roles\"\n                        ? \"nav-link mininav-toggle collapsed active\"\n                        : \"nav-link mininav-toggle collapsed\"\n                    }\n                  >\n                    <i className=\"pli-preview fs-5 me-2\" />\n                    <span className=\"nav-label mininav-content ms-1\">\n                      Roles\n                    </span>\n                  </Link>\n                ) : null}\n              </li>\n              <li className=\"nav-item\">\n                {authenticatedUser.role_id.permits[0] === \"*\" ||\n                authenticatedUser.role_id.permits.includes(\"ofertas\") ? (\n                  <Link\n                    href=\"./offers\"\n                    className={\n                      currentPath === \"/offers\"\n                        ? \"nav-link mininav-toggle collapsed active\"\n                        : \"nav-link mininav-toggle collapsed\"\n                    }\n                  >\n                    <i className=\"pli-wallet fs-5 me-2\" />\n                    <span className=\"nav-label mininav-content ms-1\">\n                      Ofertas\n                    </span>\n                  </Link>\n                ) : null}\n              </li>\n              <li className=\"nav-item\">\n                {authenticatedUser.role_id.permits[0] === \"*\" ||\n                authenticatedUser.role_id.permits.includes(\"clientes\") ? (\n                  <Link\n                    href=\"../client\"\n                    className={\n                      currentPath === \"/client\"\n                        ? \"nav-link mininav-toggle collapsed active\"\n                        : \"nav-link mininav-toggle collapsed\"\n                    }\n                  >\n                    <i className=\"pli-affiliate fs-5 me-2\" />\n                    <span className=\"nav-label mininav-content ms-1\">\n                      Clientes\n                    </span>\n                  </Link>\n                ) : null}\n              </li>\n              <li className=\"nav-item\">\n                {authenticatedUser.role_id.permits[0] === \"*\" ||\n                authenticatedUser.role_id.permits.includes(\"marcas\") ? (\n                  <Link\n                    href=\"../brands\"\n                    className={\n                      currentPath === \"/brands\"\n                        ? \"nav-link mininav-toggle collapsed active\"\n                        : \"nav-link mininav-toggle collapsed\"\n                    }\n                  >\n                    <i className=\"pli-digital-drawing fs-5 me-2\" />\n                    <span className=\"nav-label mininav-content ms-1\">\n                      Marcas\n                    </span>\n                  </Link>\n                ) : null}\n              </li>\n              {/* <li className=\"nav-item\">\n                <a\n                  href=\"./stock-page.html\"\n                  className=\"nav-link mininav-toggle collapsed\"\n                >\n                  <i className=\"pli-box-open fs-5 me-2\" />\n                  <span className=\"nav-label mininav-content ms-1\">\n                    Existencias\n                  </span>\n                </a>\n              </li> */}\n\n              {/* <li className=\"nav-item has-sub\">\n                <a\n                  href=\"#\"\n                  className={\n                    suppliers\n                      ? \"mininav-toggle nav-link collapse\"\n                      : \"mininav-toggle nav-link collapsed\"\n                  }\n                  onClick={() => {\n                    setSuppliers(!suppliers);\n                  }}\n                >\n                  <i className=\"pli-robot  fs-5 me-2\" />\n                  <span className=\"nav-label ms-1\">Proveedores</span>\n                </a>\n                <ul\n                  className={\n                    suppliers\n                      ? \"mininav-content nav collapsed\"\n                      : \" mininav-content nav collapse\"\n                  }\n                >\n                  <li className=\"nav-item\">\n                    <a href=\"./providers-page.html\" className=\"nav-link \">\n                      Registrar proveedores\n                    </a>\n                  </li>\n                  <li className=\"nav-item\">\n                    <a href=\"./productIncome-page.html\" className=\"nav-link\">\n                      Ingreso compra\n                    </a>\n                  </li>\n                </ul>\n              </li> */}\n\n              {/* <li className=\"nav-item\">\n                <a\n                  href=\"./offers-page.html\"\n                  className=\"nav-link mininav-toggle collapsed\"\n                >\n                  <i className=\"pli-money fs-5 me-2\" />\n                  <span className=\"nav-label mininav-content ms-1\">\n                    Ofertas\n                  </span>\n                </a>\n              </li> */}\n\n              {/* <li className=\"nav-item\">\n                <a\n                  href=\"./productIncome-page.html\"\n                  className=\"nav-link mininav-toggle collapsed\"\n                >\n                  <i className=\"pli-box-close fs-5 me-2\" />\n                  <span className=\"mininav-content ms-1\">\n                    Ingreso de productos\n                  </span>\n                </a>\n              </li> */}\n\n              {/* <li className=\"nav-item\">\n                <a\n                  href=\"./client-page.html\"\n                  className=\"nav-link mininav-toggle collapsed\"\n                >\n                  <i className=\"pli-male fs-5 me-2\" />\n                  <span className=\"nav-label mininav-content ms-1\">\n                    Clientes\n                  </span>\n                </a>\n              </li> */}\n\n              {/* <li className=\"nav-item\">\n                <a\n                  href=\"./collection-page.html\"\n                  className=\"nav-link mininav-toggle collapsed\"\n                >\n                  <i className=\"pli-box-close fs-5 me-2\" />\n                  <span className=\"nav-label mininav-content ms-1\">\n                    Colecciones\n                  </span>\n                </a>\n              </li> */}\n\n              {/* <li className=\"nav-item\">\n                <a\n                  href=\"./sales-page.html\"\n                  className=\"nav-link mininav-toggle collapsed\"\n                >\n                  <i className=\"pli-money fs-5 me-2\" />\n                  <span className=\"nav-label mininav-content ms-1\">Ventas</span>\n                </a>\n              </li> */}\n\n              {/* <li className=\"nav-item\">\n                <a\n                  href=\"./preliminary-orders-page.html\"\n                  className=\"nav-link mininav-toggle collapsed\"\n                >\n                  <i className=\"pli-computer-secure fs-5 me-2\" />\n                  <span className=\"nav-label mininav-content ms-1\">\n                    Carritos de compra\n                  </span>\n                </a>\n              </li> */}\n\n              <li className=\"nav-item has-sub\">\n                <a\n                  href=\"#\"\n                  className={\n                    configuration\n                      ? \"mininav-toggle nav-link collapse\"\n                      : \"mininav-toggle nav-link collapsed\"\n                  }\n                  onClick={() => {\n                    setConfiguration(!configuration);\n                  }}\n                >\n                  <i className=\"pli-gear fs-5 me-2\" />\n                  <span className=\"nav-label ms-1\">Configuración</span>\n                </a>\n                <ul\n                  className={\n                    configuration\n                      ? \"mininav-content nav collapsed active\"\n                      : \" mininav-content nav collapse\"\n                  }\n                >\n                  <li className=\"nav-item\">\n                    {authenticatedUser.role_id.permits[0] === \"*\" ||\n                    authenticatedUser.role_id.permits.includes(\"familias\") ? (\n                      <Link\n                        href=\"../families\"\n                        className={\n                          currentPath === \"/families\"\n                            ? \"nav-link mininav-toggle collapsed active\"\n                            : \"nav-link mininav-toggle collapsed\"\n                        }\n                      >\n                        Familias\n                      </Link>\n                    ) : null}\n                  </li>\n                  <li className=\"nav-item\">\n                    {authenticatedUser.role_id.permits[0] === \"*\" ||\n                    authenticatedUser.role_id.permits.includes(\"series\") ? (\n                      <Link\n                        className={\n                          currentPath === \"/series\"\n                            ? \"nav-link mininav-toggle collapsed active\"\n                            : \"nav-link mininav-toggle collapsed\"\n                        }\n                        href=\"../series\"\n                      >\n                        Series\n                      </Link>\n                    ) : null}\n                  </li>\n                  <li className=\"nav-item\">\n                    {authenticatedUser.role_id.permits[0] === \"*\" ||\n                    authenticatedUser.role_id.permits.includes(\n                      \"colecciones\"\n                    ) ? (\n                      <Link\n                        className={\n                          currentPath === \"/collections\"\n                            ? \"nav-link mininav-toggle collapsed active\"\n                            : \"nav-link mininav-toggle collapsed\"\n                        }\n                        href=\"../collections\"\n                      >\n                        Colecciones\n                      </Link>\n                    ) : null}\n                  </li>\n                  <li className=\"nav-item\">\n                    {authenticatedUser.role_id.permits[0] === \"*\" ||\n                    authenticatedUser.role_id.permits.includes(\"categorias\") ? (\n                      <Link\n                        className={\n                          currentPath === \"/categories\"\n                            ? \"nav-link mininav-toggle collapsed active\"\n                            : \"nav-link mininav-toggle collapsed\"\n                        }\n                        href=\"../categories\"\n                      >\n                        Categorias\n                      </Link>\n                    ) : null}\n                  </li>\n\n                  <li className=\"nav-item\">\n                    {authenticatedUser.role_id.permits[0] === \"*\" ||\n                    authenticatedUser.role_id.permits.includes(\n                      \"plataformas de pago\"\n                    ) ? (\n                      <Link\n                        className={\n                          currentPath === \"/paymentPlataforms\"\n                            ? \"nav-link mininav-toggle collapsed active\"\n                            : \"nav-link mininav-toggle collapsed\"\n                        }\n                        href=\"../paymentPlataforms\"\n                      >\n                        Plataformas de pago\n                      </Link>\n                    ) : null}\n                  </li>\n\n                  <li className=\"nav-item\">\n                    {authenticatedUser.role_id.permits[0] === \"*\" ||\n                    authenticatedUser.role_id.permits.includes(\"envíos\") ? (\n                      <Link\n                        className={\n                          currentPath === \"/shipping\"\n                            ? \"nav-link mininav-toggle collapsed active\"\n                            : \"nav-link mininav-toggle collapsed\"\n                        }\n                        href=\"../shipping\"\n                      >\n                        Envios\n                      </Link>\n                    ) : null}\n                  </li>\n\n                  <li className=\"nav-item\">\n                    {authenticatedUser.role_id.permits[0] === \"*\" ||\n                    authenticatedUser.role_id.permits.includes(\n                      \"tipos de cliente\"\n                    ) ? (\n                      <Link\n                        className={\n                          currentPath === \"/types-clients\"\n                            ? \"nav-link mininav-toggle collapsed active\"\n                            : \"nav-link mininav-toggle collapsed\"\n                        }\n                        href=\"../types-clients\"\n                      >\n                        Tipos de clientes\n                      </Link>\n                    ) : null}\n                  </li>\n                  <li className=\"nav-item\">\n                    {authenticatedUser.role_id.permits[0] === \"*\" ||\n                    authenticatedUser.role_id.permits.includes(\n                      \"organizaciones\"\n                    ) ? (\n                      <Link\n                        className={\n                          currentPath === \"/organizations\"\n                            ? \"nav-link mininav-toggle collapsed active\"\n                            : \"nav-link mininav-toggle collapsed\"\n                        }\n                        href=\"../organizations\"\n                      >\n                        Organización\n                      </Link>\n                    ) : null}\n                  </li>\n\n                  <li className=\"nav-item\">\n                    {authenticatedUser.role_id.permits[0] === \"*\" ||\n                    authenticatedUser.role_id.permits.includes(\"almacenes\") ? (\n                      <Link\n                        className={\n                          currentPath === \"/warehouses\"\n                            ? \"nav-link mininav-toggle collapsed active\"\n                            : \"nav-link mininav-toggle collapsed\"\n                        }\n                        href=\"../warehouses\"\n                      >\n                        Almacenes\n                      </Link>\n                    ) : null}\n                  </li>\n                  {/* <li className=\"nav-item\">\n                    <a href=\"./payment-methods-page.html\" className=\"nav-link \">\n                      Métodos de pago\n                    </a>\n                  </li> */}\n\n                  {/* <li className=\"nav-item\">\n                    <a href=\"./organization-page.html\" className=\"nav-link \">\n                      Organización\n                    </a>\n                  </li> */}\n                  {/* <li className=\"nav-item\">\n                    <a href=\"./type-client-page.html\" className=\"nav-link \">\n                      Tipo de cliente\n                    </a>\n                  </li> */}\n                  {/* <li className=\"nav-item\">\n                    <a href=\"./collection-page.html\" className=\"nav-link \">\n                      Colecciones\n                    </a>\n                  </li> */}\n\n                  {/* <li className=\"nav-item\">\n                    <a href=\"./warehouses-page.html\" className=\"nav-link \">\n                      Almacenes\n                    </a>\n                  </li> */}\n\n                  {/* <li className=\"nav-item\">\n                    <a href=\"./category-page.html\" className=\"nav-link\">\n                      Categorías\n                    </a>\n                  </li> */}\n                </ul>\n              </li>\n              {/* <li class=\"nav-item\">\n                      <a href=\"#\" class=\"nav-link mininav-toggle collapsed\">\n                          <i class=\"pli-roller fs-5 me-2\"></i>\n                          <span class=\"nav-label mininav-content ms-1 flex-fill\">\n                              <span class=\"d-flex flex-row w-100\">\n                                  Badge <span class=\"badge bg-info ms-auto\">NEW</span>\n                              </span>\n                          </span>\n                      </a>\n                  </li> */}\n            </ul>\n          </div>\n        </div>\n        {/* End - Navigation menu */}\n        {/* Bottom navigation menu */}\n        <div className=\"mainnav__bottom-content border-top pb-2\">\n          <ul id=\"mainnav\" className=\"mainnav__menu nav flex-column\">\n            <li className=\"nav-item \">\n              <a\n                onClick={() => {\n                  logout();\n                  signOut();\n                }}\n                className=\"nav-link mininav-toggle collapsed\"\n                aria-expanded=\"false\"\n              >\n                <i className=\"pli-unlock fs-5 me-2\" />\n                <span className=\"nav-label ms-1\">Logout</span>\n              </a>\n            </li>\n          </ul>\n        </div>\n        {/* End - Bottom navigation menu */}\n      </div>\n    </nav>\n  );\n};\n\nexport default SideBar;\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/organization/CreateEdit.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/payment-plataform/CreateEdit.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/roles/BoxCheckBoxs.tsx",["745"],[],"import { Box, Checkbox, FormControlLabel } from \"@mui/material\";\nimport { FC, useState, useEffect } from \"react\";\n\ninterface Props {\n  selected: string[];\n  onChange: any;\n  isdisable: boolean;\n}\n\nfunction capitalizeFirstLetter(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport const BoxCheckBoxs: FC<Props> = ({ selected, onChange, isdisable }) => {\n  const [checked, setChecked] = useState<string[]>(selected);\n  useEffect(() => {\n    //console.log(\"Cambio selected\", selected)\n    setChecked(selected);\n  }, [selected]);\n\n  const opciones: string[] = [\n    \"administrar organización\",\n    \"inicio\",\n    \"productos\",\n    \"usuarios\",\n    \"roles\",\n    \"clientes\",\n    \"marcas\",\n    \"familias\",\n    \"series\",\n    \"colecciones\",\n    \"categorias\",\n    \"plataformas de pago\",\n    \"envíos\",\n    \"tipos de cliente\",\n    \"organizaciones\",\n    \"almacenes\",\n    \"existencias\",\n    \"proveedores\",\n    \"ofertas\",\n    \"traspasos\",\n    \"ventas\",\n    \"blog\",\n    \"paginas\",\n    \"kardex\",\n    \"apartados\",\n  ];\n\n  useEffect(() => {\n    if (selected.includes(\"*\")) {\n      setChecked(opciones);\n    }\n  }, []);\n\n  const handleChangeCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const isfind = checked.find((c) => {\n      if (c === event.target.name) return c;\n    });\n\n    let updatedItems = [];\n    if (isfind === undefined) {\n      updatedItems = [...checked];\n      updatedItems.push(event.target.name);\n    } else {\n      updatedItems = checked.filter((item) => item !== event.target.name);\n    }\n    setChecked(updatedItems);\n    onChange(updatedItems);\n  };\n  return (\n    <Box className={\"row\"} display={\"flex\"} gap={2}>\n      {opciones.map((opcion, i) => (\n        <div key={i} className=\"col-3\">\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={checked.includes(opcion)}\n                disabled={isdisable}\n                name={opcion}\n                onChange={handleChangeCheckbox}\n              />\n            }\n            label={capitalizeFirstLetter(opcion)}\n          />\n        </div>\n      ))}\n    </Box>\n  );\n};\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/roles/CreateEdit.tsx",["746"],[],"import React, { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage, FieldAttributes } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  Autocomplete,\n  Box,\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  InputLabel,\n  MenuItem,\n  Select,\n  Tab,\n  Tabs,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { User } from \"@/types/User\";\nimport { Role } from \"@/types/Role\";\nimport { BoxCheckBoxs } from \"./BoxCheckBoxs\";\nimport { createRole, updateRole } from \"@/services/RolesService\";\nimport { useEffect } from \"react\";\nimport { notify } from \"@/utils/constants\";\nimport { Responsepetition } from \"@/types/Responsepetition\";\n\ninterface FormValues {\n  name: string;\n  description: string;\n  // permits: string[];\n}\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(\"Nombre requerido\"),\n  description: Yup.string().required(\"descripción requerido\"),\n});\n\ninterface Props {\n  children?: React.ReactNode;\n  icon?: React.ReactNode;\n  title?: string;\n  type: string;\n  updateTable?: any;\n  role?: any;\n  open: boolean;\n  handleClose?: any;\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst CreateEdit: React.FC<Props> = ({\n  type,\n  role,\n  updateTable,\n  open,\n  handleClose,\n}) => {\n  const [value, setValue] = React.useState(0);\n  const [permits, setPermits] = React.useState<string[]>([]);\n\n  useEffect(() => {\n    console.log(\"Me renderice CreateEdit\");\n    if (role) {\n      setPermits(role.permits);\n    } else {\n      setPermits([]);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (role) {\n      setPermits(role.permits);\n    } else {\n      setPermits([]);\n    }\n  }, [role]);\n\n  const handleChangePermits = (newdata: string[]) => {\n    setPermits(newdata);\n  };\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const handleSubmit = async (values: FormValues, actions: any) => {\n    const data = {\n      ...values,\n      permits,\n    };\n\n    try {\n      if (type === \"create\") {\n        await createRole(data);\n        updateTable();\n        notify(\"success\", \"Se ha creado exitosamente\");\n      }\n\n      if (type === \"edit\") {\n        await updateRole(role.id, data);\n        updateTable();\n        notify(\"success\", \"Se ha actualizado\");\n      }\n      handleClose();\n    } catch (error) {\n      notify(\"error\", \"Ha sucedido un error\");\n    }\n  };\n\n  function TabPanel(props: TabPanelProps) {\n    const { children, value, index, ...other } = props;\n\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box sx={{ p: 3 }}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Roles</DialogTitle>\n        <Formik\n          initialValues={{\n            name: role ? role.name : \"\",\n            description: role ? role.description : \"\",\n          }}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ isSubmitting, errors, touched, handleChange }) => (\n            <Form>\n              <DialogContent>\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  name=\"name\"\n                  label=\"Nombre\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.name && errors.name ? (\n                      <ErrorMessage name=\"name\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.name && errors.name ? true : false}\n                  onChange={handleChange}\n                />\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"description\"\n                  label=\"Descripción\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.description && errors.description ? (\n                      <ErrorMessage name=\"description\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={\n                    touched.description && errors.description ? true : false\n                  }\n                  onChange={handleChange}\n                />\n                <Typography className=\"mt-5 mb-4\" variant=\"h6\">\n                  Permisos\n                </Typography>\n                <Box sx={{ width: \"100%\" }}>\n                  <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n                    <Tabs\n                      value={value}\n                      onChange={handleChange}\n                      aria-label=\"basic tabs example\"\n                    >\n                      <Tab label=\"Pestañas\" />\n                      {/* <Tab label=\"Venta\" />\n                      <Tab label=\"Configuración\" /> */}\n                    </Tabs>\n                  </Box>\n                  <TabPanel value={value} index={0}>\n                    <FormGroup>\n                      <BoxCheckBoxs\n                        selected={permits}\n                        onChange={handleChangePermits}\n                        isdisable={type == \"view\" ? true : false}\n                      />\n                    </FormGroup>\n                  </TabPanel>\n                </Box>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleClose} color=\"primary\">\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" color=\"primary\" disabled={isSubmitting}>\n                  Guardar\n                </Button>\n              </DialogActions>\n            </Form>\n          )}\n        </Formik>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default CreateEdit;\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/series/CreateEdit.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/shipping/CreateEdit.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/type-clients/CreateEdit.tsx",["747","748"],[],"import React, { useEffect, useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage, FieldAttributes } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  RadioGroup,\n  InputLabel,\n  MenuItem,\n  Select,\n  Radio,\n  Tab,\n  Tabs,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { notify } from \"@/utils/constants\";\nimport { createFamily, updateFamily } from \"@/services/FamilyService\";\nimport { Organization } from \"@/types/Organization\";\nimport {\n  createTypeOfClient,\n  updateTypeOfClient,\n} from \"@/services/TypeOfClientService\";\nimport { OrganizationClient } from \"@/types/OrganizationClient\";\nimport { Responsepetition } from \"@/types/Responsepetition\";\n\ninterface FormValues {\n  name: string;\n  fields: string;\n  kind: string;\n  organization: any;\n}\n\ninterface Props {\n  children?: React.ReactNode;\n  icon?: React.ReactNode;\n  title?: string;\n  type: string;\n  typeofclient?: any;\n  updateTable?: any;\n  open: boolean;\n  handleClose?: any;\n  organizations: OrganizationClient[];\n}\n\ninterface Attribute {\n  tag: string;\n  type: string;\n}\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(\"Nombre requerido\"),\n  kind: Yup.string().required(\"Tipo es requerido\"),\n  organization: Yup.string().required(\"La organización es requerida\"),\n});\n\nconst CreateEdit: React.FC<Props> = ({\n  type,\n  typeofclient,\n  updateTable,\n  open,\n  handleClose,\n  organizations,\n}) => {\n  const [attributes, setAttributes] = useState<Attribute[]>(\n    typeofclient ? typeofclient.fields : []\n  );\n  const [tag, setTag] = useState(\"\");\n  const [typeOrg, setTypeORg] = useState(\"Elegir\");\n  const [companies, setCompanies] = useState<OrganizationClient[]>([]);\n  const [institutions, setInstitutions] = useState<OrganizationClient[]>([]);\n\n  useEffect(() => {\n    const companiesfilter = organizations.filter(\n      (company) => company.kind === \"empresa\"\n    );\n    const institutionsfilter = organizations.filter(\n      (company) => company.kind === \"institucion\"\n    );\n    setCompanies(companiesfilter);\n    setInstitutions(institutionsfilter);\n  }, [organizations]);\n\n  const agregarCampo = () => {\n    if (type !== \"Elegir\" && tag.trim().length > 0) {\n      setAttributes([...attributes, { tag, type: typeOrg }]);\n      setTag(\"\");\n      setTypeORg(\"Elegir\");\n    }\n  };\n\n  useEffect(() => {\n    if (typeofclient) {\n      setAttributes(typeofclient.fields);\n    }\n    if (type == \"create\") {\n      setAttributes([]);\n    }\n  }, [open]);\n\n  useEffect(() => {\n    if (typeofclient) {\n      console.log(typeofclient);\n    }\n\n    console.log(companies);\n    console.log(institutions);\n  }, [open]);\n\n  const eliminarCampo = (index: number) => {\n    setAttributes(attributes.filter((_, i) => i !== index));\n  };\n\n  const handleSubmit = async (values: FormValues, actions: any) => {\n    const formdata = {\n      ...values,\n      fields: attributes,\n    };\n\n    console.log(formdata);\n\n    if (type === \"create\") {\n      const { data, state, error }: Responsepetition = await createTypeOfClient(\n        formdata\n      );\n      if (state) {\n        notify(\"success\", \"Se ha creado exitosamente\");\n        updateTable();\n        handleClose();\n      } else {\n        notify(\"error\", error.message);\n      }\n    }\n\n    if (type === \"edit\") {\n      const { data, state, error }: Responsepetition = await updateTypeOfClient(\n        typeofclient.id,\n        formdata\n      );\n      if (state) {\n        notify(\"success\", \"Se ha actualizado\");\n        updateTable();\n        handleClose();\n      } else {\n        notify(\"error\", error.message);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Tipo de cliente</DialogTitle>\n        <Formik\n          initialValues={{\n            name: typeofclient ? typeofclient.name : \"\",\n            fields: typeofclient ? typeofclient.fields : \"\",\n            kind: typeofclient ? typeofclient.kind : \"\",\n            organization: typeofclient\n              ? typeofclient.organization_client.id\n              : null,\n          }}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({\n            isSubmitting,\n            errors,\n            touched,\n            handleChange,\n            values,\n            setValues,\n          }) => (\n            <Form>\n              <DialogContent>\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  name=\"name\"\n                  type=\"text\"\n                  label=\"Nombre\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.name && errors.name ? (\n                      <ErrorMessage name=\"name\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.name && errors.name ? true : false}\n                  onChange={handleChange}\n                />\n                <Box className=\"row mt-4\">\n                  <FormControl className=\"col-6\">\n                    <FormLabel id=\"demo-controlled-radio-buttons-group\">\n                      Tipo\n                    </FormLabel>\n                    <RadioGroup\n                      value={values.kind}\n                      row\n                      aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                      name=\"kind\"\n                      onChange={(e) => {\n                        setValues({ ...values, organization: null });\n                        handleChange(e);\n                      }}\n                    >\n                      <FormControlLabel\n                        disabled={type == \"view\"}\n                        value=\"empresa\"\n                        control={<Radio />}\n                        label=\"Empresa\"\n                      />\n                      <FormControlLabel\n                        disabled={type == \"view\"}\n                        value=\"institucion\"\n                        control={<Radio />}\n                        label=\"Institución\"\n                      />\n                    </RadioGroup>\n                    <Typography sx={{ color: \"#BD0606\" }}>\n                      <ErrorMessage name=\"kind\" />\n                    </Typography>\n                  </FormControl>\n\n                  <Box className=\"col-6\">\n                    <Box display={values.kind === \"empresa\" ? \"flex\" : \"none\"}>\n                      <FormControl sx={{ width: \"99%\" }}>\n                        <InputLabel id=\"demo-simple-select-helper-label\">\n                          Empresa\n                        </InputLabel>\n                        <Select\n                          disabled={type == \"view\"}\n                          value={values.organization}\n                          labelId=\"demo-simple-select-helper-label\"\n                          id=\"organization\"\n                          name=\"organization\"\n                          placeholder=\"Tipo de entrega\"\n                          label=\"Tipo de entrega\"\n                          onChange={(e) => {\n                            console.log(e.target.value);\n                            handleChange(e);\n                          }}\n                          fullWidth\n                          error={\n                            touched.organization && errors.organization\n                              ? true\n                              : false\n                          }\n                        >\n                          {companies.map(\n                            (empresa: OrganizationClient, index: number) => (\n                              <MenuItem key={empresa.id} value={empresa.id}>\n                                {empresa.name}\n                              </MenuItem>\n                            )\n                          )}\n                        </Select>\n                      </FormControl>\n                    </Box>\n\n                    <Box\n                      display={values.kind === \"institucion\" ? \"flex\" : \"none\"}\n                    >\n                      <FormControl sx={{ width: \"99%\" }}>\n                        <InputLabel id=\"demo-simple-select-helper-label\">\n                          Institución\n                        </InputLabel>\n                        <Select\n                          value={values.organization}\n                          disabled={type == \"view\"}\n                          labelId=\"demo-simple-select-helper-label\"\n                          id=\"organization\"\n                          name=\"organization\"\n                          placeholder=\"Institución\"\n                          label=\"Institución\"\n                          onChange={(e) => {\n                            console.log(e.target.value);\n                            handleChange(e);\n                          }}\n                          fullWidth\n                          error={\n                            touched.organization && errors.organization\n                              ? true\n                              : false\n                          }\n                        >\n                          {institutions.map((empresa: any, index: number) => (\n                            <MenuItem key={empresa.id} value={empresa.id}>\n                              {empresa.name}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </Box>\n                  </Box>\n                </Box>\n\n                <Typography mt={4} sx={{ fontWeight: \"bolder\" }}>\n                  Atributos\n                </Typography>\n\n                {type !== \"view\" && (\n                  <Box mt={3} display={\"flex\"} flexWrap={\"wrap\"}>\n                    <div className=\"col-md-12 row align-items-center gap-3\">\n                      <div className=\"col-md-4\">\n                        <TextField\n                          id=\"etiqueta\"\n                          label=\"Etiqueta del campo\"\n                          type=\"text\"\n                          value={tag}\n                          onChange={(e) => setTag(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"col-md-4\">\n                        <FormControl variant=\"outlined\" fullWidth>\n                          <InputLabel id=\"tipo-label\">\n                            Tipo del campo\n                          </InputLabel>\n                          <Select\n                            labelId=\"tipo-label\"\n                            id=\"tipo\"\n                            value={typeOrg}\n                            onChange={(e) => setTypeORg(e.target.value)}\n                            label=\"Tipo del campo\"\n                          >\n                            <MenuItem value=\"Elegir\" selected>\n                              Elegir...\n                            </MenuItem>\n                            <MenuItem value=\"number\">Número</MenuItem>\n                            <MenuItem value=\"text\">Texto</MenuItem>\n                            <MenuItem value=\"date\">Fecha</MenuItem>\n                          </Select>\n                        </FormControl>\n                      </div>\n                      <div className=\"col-3 d-flex justify-content-end\">\n                        <Button\n                          variant=\"contained\"\n                          color=\"secondary\"\n                          onClick={agregarCampo}\n                        >\n                          Agregar\n                        </Button>\n                      </div>\n                    </div>\n                  </Box>\n                )}\n                <hr />\n                <div className=\"row mt-2 ms-2\">\n                  <div id=\"campos\" className=\"row col-12\">\n                    {attributes.map(({ tag, type }, index) => (\n                      <div key={index} className=\"row col-md-5 m-1 mt-3\">\n                        <div className=\"col-md-10\">\n                          <label\n                            className=\"form-label\"\n                            htmlFor={`campo${index}`}\n                          >\n                            {tag}\n                          </label>\n                          <input\n                            type={type}\n                            placeholder={type}\n                            className=\"form-control\"\n                            id={`campo${index}`}\n                            name={`campo${index}`}\n                          />\n                        </div>\n\n                        <button\n                          type=\"button\"\n                          style={{ height: \"35px\" }}\n                          className=\"col-md-3 mt-4 ms-3 btn btn-close\"\n                          onClick={() => eliminarCampo(index)}\n                        ></button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleClose} variant=\"contained\" color=\"error\">\n                  Cancelar\n                </Button>\n                {type !== \"view\" && (\n                  <Button\n                    type=\"submit\"\n                    color=\"primary\"\n                    variant=\"contained\"\n                    disabled={isSubmitting}\n                  >\n                    {type === \"edit\" && \"Guardar\"}\n\n                    {type === \"create\" && \"Crear\"}\n                  </Button>\n                )}\n              </DialogActions>\n            </Form>\n          )}\n        </Formik>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default CreateEdit;\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/DataTableCustom.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/ImageDropzone.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/Multiselect.tsx",["749"],[],"import * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Chip from '@mui/material/Chip';\nimport MenuItem from '@mui/material/MenuItem';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { Box } from '@mui/system';\n\n\ninterface option {\n    id: string;\n    label: string;\n}\ninterface MultiSelectChipProps {\n    options: option[];\n    selected?: option[];\n    onSelect?: any;\n    isDisabled?: boolean;\n    label?: string;\n    size?: string;\n}\n\nconst MultiSelectChip: React.FC<MultiSelectChipProps> = ({ options, onSelect, selected, isDisabled = false, label, size }) => {\n    const [selectedOptions, setSelectedOptions] = useState<option[]>([]);\n\n    useEffect(() => {\n        if (selected) {\n            setSelectedOptions(selected)\n        }\n    }, [])\n\n\n    const handleDelete = (optionToDelete: option) => {\n        console.log(selectedOptions)\n        const chip = selectedOptions.filter(option => option.id !== optionToDelete.id)\n        console.log(chip)\n        setSelectedOptions(chip);\n        onSelect(chip)\n    };\n\n    return (\n        <Box>\n            <Autocomplete\n                multiple\n                disabled={isDisabled}\n                id=\"tags-outlined\"\n                options={options}\n                value={selectedOptions}\n                defaultValue={selectedOptions}\n                getOptionLabel={(option) => option.label}\n                filterSelectedOptions\n                onChange={(event, newValue) => {\n                    setSelectedOptions(newValue);\n                    onSelect(newValue)\n                }}\n                renderTags={(value: option[], getTagProps) =>\n                    value.map((option, index) => (\n                        <div key={index}>\n                            <Chip\n                                variant=\"filled\"\n                                color='primary'\n                                label={option.label}\n                                {...getTagProps({ index })}\n                                onDelete={() => handleDelete(option)}\n                            />\n                        </div>\n\n                    ))\n                }\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        // size={\"small\"}\n                        label={label}\n                        placeholder={label}\n                        margin='normal'\n                    />\n                )}\n            />\n        </Box>\n    );\n};\n\nexport default MultiSelectChip;\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/user-organizations/CreateEdit.tsx",["750","751"],[],"import React, { useEffect, useRef, useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage, FieldAttributes } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  Autocomplete,\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  Grid,\n  Input,\n  InputLabel,\n  MenuItem,\n  Select,\n  Tab,\n  Tabs,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { Role } from \"@/types/Role\";\nimport {\n  createOrganization,\n  updateOrganization,\n} from \"@/services/UserOrganizationService\";\nimport { notify, _apiUrl } from \"@/utils/constants\";\nimport { Organization } from \"@/types/Organization\";\nimport { httpFormDataClient } from \"@/services/HttpClient\";\nimport { toast } from \"react-toastify\";\nimport { User } from \"@/types/User\";\nimport { Responsepetition } from \"@/types/Responsepetition\";\n\ninterface FormValues {\n  name: string;\n}\n\ninterface Props {\n  children?: React.ReactNode;\n  icon?: React.ReactNode;\n  title?: string;\n  type: string;\n  organization?: Organization | any;\n  updateTable?: any;\n  open: boolean;\n  organizations: Organization[];\n  handleClose?: any;\n}\n\nconst CreateEdit: React.FC<Props> = ({\n  type,\n  organization,\n  updateTable,\n  open,\n  organizations,\n  handleClose,\n}) => {\n  const [organizationsSelect, setOrganizationsSelect] = useState<any[]>(\n    type == \"create\"\n      ? organizations.filter((org: Organization) =>\n          organization?.can_see.includes(org.id)\n        )\n      : []\n  );\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [image, setImage] = useState<File>();\n  const [imageUrl, setImageUrl] = useState<string>(\"\");\n  const [newUser, setNewUSer] = useState<User>();\n\n  const createOrganizationFunction = async (data: any) => {\n    if (imageUrl) {\n      const fd = new FormData();\n      if (image) fd.append(\"file\", image);\n      const imageRes = await httpFormDataClient.post(\"/api/images/upload\", fd);\n      if (imageRes.data) {\n        data.logo = imageRes.data;\n        data.can_see = organizationsSelect.map((org) => org.id);\n\n        if (!data.can_see.includes(organization.id))\n          data.can_see.push(organization.id);\n\n        const res = await createOrganization(data);\n\n        notify(\"success\", \"Se ha creado exitosamente\");\n\n        setNewUSer(res.data.user);\n\n        updateTable();\n      } else {\n        toast.error(\"Debe seleccionar una imagen\");\n      }\n    }\n  };\n\n  const updateOrganizationFunction = async (data: any) => {\n    if (image) {\n      const fd = new FormData();\n      if (image) fd.append(\"file\", image);\n      const imageRes = await httpFormDataClient.post(\"/api/images/upload\", fd);\n      if (imageRes.data) {\n        data.logo = imageRes.data;\n      } else {\n        toast.error(\"Debe seleccionar una imagen\");\n      }\n    } else {\n      data.logo = organization.logo;\n    }\n\n    data.can_see = organizationsSelect.map((org) => org.id);\n\n    if (!data.can_see.includes(organization.id))\n      data.can_see.push(organization.id);\n\n    await updateOrganization(organization.id, data);\n    notify(\"success\", \"Se ha actualizado\");\n    handleClose();\n    updateTable();\n  };\n\n  useEffect(() => {\n    if (type === \"edit\" || type === \"view\") {\n      setOrganizationsSelect(\n        organizations.filter((org: Organization) =>\n          organization?.can_see.includes(org.id)\n        )\n      );\n      setImageUrl(_apiUrl + \"/\" + organization.logo);\n    }\n  }, [open]);\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required(\"Nombre requerido\"),\n  });\n\n  const handleSubmit = async (values: FormValues, actions: any) => {\n    const data = {\n      ...values,\n    };\n    try {\n      if (type === \"edit\") {\n        updateOrganizationFunction(data);\n      }\n      if (type === \"create\") {\n        createOrganizationFunction(data);\n      }\n    } catch (error) {\n      notify(\"error\", \"Ha sucedido un error\");\n    }\n  };\n\n  const handleButtonClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setImage(file);\n      setImageUrl(URL.createObjectURL(file));\n    }\n  };\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose} maxWidth=\"lg\" fullWidth>\n        <DialogTitle>Organización</DialogTitle>\n        <Formik\n          initialValues={{\n            name: organization ? organization.name : \"\",\n          }}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ isSubmitting, errors, touched, handleChange }) => (\n            <Form>\n              <DialogContent>\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <Field\n                      as={TextField}\n                      disabled={type == \"view\"}\n                      name=\"name\"\n                      label=\"Nombre\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.name && errors.name ? (\n                          <ErrorMessage name=\"name\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={touched.name && errors.name ? true : false}\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Autocomplete\n                      multiple\n                      fullWidth\n                      limitTags={2}\n                      disabled={type == \"view\"}\n                      id=\"multiple-limit-tags\"\n                      options={organizations}\n                      value={organizationsSelect}\n                      getOptionLabel={(option) => option.name}\n                      onChange={(event, value) => {\n                        setOrganizationsSelect(value);\n                      }}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          label=\"Organizaciones\"\n                          placeholder=\"Organizaciones\"\n                        />\n                      )}\n                      sx={{ width: \"500px\" }}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Grid container justifyContent=\"center\" alignItems=\"center\">\n                      {type !== \"view\" ? (\n                        <>\n                          <Button\n                            variant=\"contained\"\n                            onClick={handleButtonClick}\n                          >\n                            <i className=\"pli-file-add\"></i>\n                            Subir imagen\n                          </Button>\n                          <input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            ref={fileInputRef}\n                            style={{ display: \"none\" }}\n                            onChange={handleFileSelect}\n                          />{\" \"}\n                        </>\n                      ) : null}\n                    </Grid>\n                  </Grid>\n                  {newUser && (\n                    <Grid item xs={12}>\n                      <Grid\n                        container\n                        justifyContent=\"center\"\n                        alignItems=\"center\"\n                        direction={\"column\"}\n                      >\n                        <Typography>\n                          Se ha creado un nuevo usuario administrador para la\n                          organización\n                        </Typography>\n                        <Typography>Email: {newUser.email}</Typography>\n                        <Typography>Password: 1234 </Typography>\n                      </Grid>\n                    </Grid>\n                  )}\n                  <Grid item xs={12}>\n                    <Grid container justifyContent=\"center\" alignItems=\"center\">\n                      {imageUrl && (\n                        <img src={imageUrl} width=\"200vw\" alt=\"Preview\" />\n                      )}\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleClose} color=\"primary\">\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" color=\"primary\" disabled={isSubmitting}>\n                  Guardar\n                </Button>\n              </DialogActions>\n            </Form>\n          )}\n        </Formik>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default CreateEdit;\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/users/CreateEdit.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/warehouse/CreateEdit.tsx",["752"],[],"import React, { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage, FieldAttributes } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  InputLabel,\n  MenuItem,\n  Select,\n  Tab,\n  Tabs,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { Role } from \"@/types/Role\";\nimport { notify } from \"@/utils/constants\";\nimport { createSeries, updateSeries } from \"@/services/SeriesService\";\nimport { Location } from \"@/types/Location\";\nimport { useEffect } from \"react\";\nimport { createWarehouse, updateWarehouse } from \"@/services/WarehouseService\";\nimport { Responsepetition } from \"@/types/Responsepetition\";\n\ninterface FormValues {\n  name: string;\n  description: string;\n  street: string;\n  interior_num: string;\n  exterior_num: string;\n  colony: string;\n  municipality: string;\n  poblation: string;\n  postal_code: string;\n  city: string;\n  state: string;\n  country: string;\n}\n\ninterface Props {\n  children?: React.ReactNode;\n  title?: string;\n  type: string;\n  warehouse?: any;\n  updateTable?: any;\n  open: boolean;\n  handleClose?: any;\n}\n\nconst CreateEdit: React.FC<Props> = ({\n  type,\n  warehouse,\n  updateTable,\n  open,\n  handleClose,\n}) => {\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required(\"Nombre requerido\"),\n    description: Yup.string().required(\"Descripción requerida\"),\n    street: Yup.string().required(\"Calle requerida\"),\n    interior_num: Yup.string().required(\"Número Interior requerido\"),\n    exterior_num: Yup.string().notRequired(),\n    colony: Yup.string().required(\"Colonia requerida\"),\n    municipality: Yup.string().required(\"Municipio requerido\"),\n    poblation: Yup.string().required(\"Población requerida\"),\n    postal_code: Yup.string().required(\"Código Postal requerido\"),\n    city: Yup.string().required(\"Ciudad requerida\"),\n    state: Yup.string().required(\"Estado requerido\"),\n  });\n\n  const [locations, setlocations] = useState<Location[]>(\n    warehouse ? warehouse.locations : []\n  );\n\n  const [nombre, setNombre] = useState<string>(\"\");\n  const [descripcion, setDescripcion] = useState<string>(\"\");\n\n  const agregarLocation = () => {\n    if (descripcion.trim().length > 0 && nombre.trim().length > 0) {\n      const locationE: Location = { name: nombre, description: descripcion };\n      setlocations([...locations, locationE]);\n      setNombre(\"\");\n      setDescripcion(\"\");\n    }\n  };\n\n  useEffect(() => {\n    if (warehouse) {\n      setlocations(warehouse.locations);\n    }\n    if (type == \"create\") {\n      setlocations([]);\n    }\n  }, [open]);\n\n  const handleSubmit = async (values: FormValues, actions: any) => {\n    console.log(\"entre\");\n    const formdata = {\n      ...values,\n      locations,\n    };\n    console.log(formdata);\n\n    if (type === \"create\") {\n      const { data, state, error }: Responsepetition = await createWarehouse(\n        formdata\n      );\n      if (state) {\n        notify(\"success\", \"Se ha creado exitosamente\");\n        updateTable();\n        handleClose();\n      } else {\n        notify(\"error\", error.message);\n      }\n    }\n\n    if (type === \"edit\") {\n      const { data, state, error }: Responsepetition = await updateWarehouse(\n        warehouse.id,\n        formdata\n      );\n      if (state) {\n        notify(\"success\", \"Se ha actualizado\");\n        updateTable();\n        handleClose();\n      } else {\n        notify(\"error\", error.message);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Almacenes</DialogTitle>\n        <Formik\n          initialValues={{\n            name: warehouse ? warehouse.name : \"\",\n            description: warehouse ? warehouse.description : \"\",\n            street: warehouse ? warehouse.street : \"\",\n            interior_num: warehouse ? warehouse.interior_num : 0,\n            exterior_num: warehouse ? warehouse.exterior_num : 0,\n            colony: warehouse ? warehouse.colony : \"\",\n            municipality: warehouse ? warehouse.municipality : \"\",\n            poblation: warehouse ? warehouse.poblation : \"\",\n            postal_code: warehouse ? warehouse.postal_code : \"\",\n            city: warehouse ? warehouse.city : \"\",\n            state: warehouse ? warehouse.state : \"\",\n            country: warehouse ? warehouse.country : \"\",\n\n            organization: warehouse ? warehouse.organization : 0,\n          }}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ isSubmitting, errors, touched, handleChange }) => (\n            <Form>\n              <DialogContent>\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  name=\"name\"\n                  type=\"text\"\n                  label=\"Nombre\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.name && errors.name ? (\n                      <ErrorMessage name=\"name\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.name && errors.name ? true : false}\n                  onChange={handleChange}\n                />\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"description\"\n                  label=\"Descripción\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.description && errors.description ? (\n                      <ErrorMessage name=\"description\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={\n                    touched.description && errors.description ? true : false\n                  }\n                  onChange={handleChange}\n                />\n\n                <Typography variant=\"h6\" mt={4}>\n                  Dirección almacén\n                </Typography>\n                <hr />\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"street\"\n                  label=\"Calle\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.street && errors.street ? (\n                      <ErrorMessage name=\"street\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.street && errors.street ? true : false}\n                  onChange={handleChange}\n                />\n                <Box className=\"row mt-2\">\n                  <Field\n                    className=\"col-6\"\n                    as={TextField}\n                    disabled={type == \"view\"}\n                    type=\"text\"\n                    name=\"interior_num\"\n                    label=\"Número Interior\"\n                    fullWidth\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    helperText={\n                      touched.interior_num && errors.interior_num ? (\n                        <ErrorMessage name=\"interior_num\" />\n                      ) : (\n                        \"\"\n                      )\n                    }\n                    error={\n                      touched.interior_num && errors.interior_num ? true : false\n                    }\n                    onChange={handleChange}\n                  />\n                  <Field\n                    as={TextField}\n                    className=\"col-6\"\n                    disabled={type == \"view\"}\n                    type=\"text\"\n                    name=\"exterior_num\"\n                    label=\"Número Exterior\"\n                    fullWidth\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    helperText={\n                      touched.exterior_num && errors.exterior_num ? (\n                        <ErrorMessage name=\"exterior_num\" />\n                      ) : (\n                        \"\"\n                      )\n                    }\n                    error={\n                      touched.exterior_num && errors.exterior_num ? true : false\n                    }\n                    onChange={handleChange}\n                  />\n                </Box>\n\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"colony\"\n                  label=\"Colonia\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.colony && errors.colony ? (\n                      <ErrorMessage name=\"colony\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.colony && errors.colony ? true : false}\n                  onChange={handleChange}\n                />\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"municipality\"\n                  label=\"Municipio\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.municipality && errors.municipality ? (\n                      <ErrorMessage name=\"municipality\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={\n                    touched.municipality && errors.municipality ? true : false\n                  }\n                  onChange={handleChange}\n                />\n\n                <Box className=\"row mt-2\">\n                  <Field\n                    as={TextField}\n                    className=\"col-7\"\n                    disabled={type == \"view\"}\n                    type=\"text\"\n                    name=\"poblation\"\n                    label=\"Población\"\n                    fullWidth\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    helperText={\n                      touched.poblation && errors.poblation ? (\n                        <ErrorMessage name=\"poblation\" />\n                      ) : (\n                        \"\"\n                      )\n                    }\n                    error={touched.poblation && errors.poblation ? true : false}\n                    onChange={handleChange}\n                  />\n                  <Field\n                    as={TextField}\n                    className=\"col-5\"\n                    disabled={type == \"view\"}\n                    type=\"text\"\n                    name=\"postal_code\"\n                    label=\"Código Postal\"\n                    fullWidth\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    helperText={\n                      touched.postal_code && errors.postal_code ? (\n                        <ErrorMessage name=\"postal_code\" />\n                      ) : (\n                        \"\"\n                      )\n                    }\n                    error={\n                      touched.postal_code && errors.postal_code ? true : false\n                    }\n                    onChange={handleChange}\n                  />\n                </Box>\n\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"city\"\n                  label=\"Ciudad\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.city && errors.city ? (\n                      <ErrorMessage name=\"city\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.city && errors.city ? true : false}\n                  onChange={handleChange}\n                />\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"state\"\n                  label=\"Estado\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.state && errors.state ? (\n                      <ErrorMessage name=\"state\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.state && errors.state ? true : false}\n                  onChange={handleChange}\n                />\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"country\"\n                  label=\"País\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.country && errors.country ? (\n                      <ErrorMessage name=\"country\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.country && errors.country ? true : false}\n                  onChange={handleChange}\n                />\n\n                <Typography variant=\"h6\" mt={4}>\n                  Ubicaciones\n                </Typography>\n                <hr />\n                {type !== \"view\" && (\n                  <Box mt={3}>\n                    <div className=\"row col-md-12 row align-items-center\">\n                      <div className=\"col-md-12 mb-3\">\n                        <TextField\n                          id=\"Nombre\"\n                          label=\"Nombre\"\n                          type=\"text\"\n                          value={nombre}\n                          margin=\"normal\"\n                          onChange={(e) => setNombre(e.target.value)}\n                        />\n                      </div>\n                      <Field\n                        as={TextField}\n                        name=\"descripcion\"\n                        value={descripcion}\n                        onChange={(e: any) => setDescripcion(e.target.value)}\n                        label=\"Descripción\"\n                        multiline\n                        rows={5}\n                        fullWidth\n                        margin=\"normal\"\n                      />\n\n                      <div className=\"col-12 d-flex justify-content-end\">\n                        <Button\n                          variant=\"contained\"\n                          color=\"secondary\"\n                          onClick={agregarLocation}\n                        >\n                          Agregar\n                        </Button>\n                      </div>\n                    </div>\n                    <hr />\n                  </Box>\n                )}\n\n                <div className=\"row mt-2 ms-2\">\n                  <div id=\"campos\" className=\"row col-12\">\n                    <Box display={\"flex\"} flexWrap={\"wrap\"} gap={2}>\n                      {locations.map(({ name, description }, index) => (\n                        <div key={index} className=\"col-3\">\n                          <div className=\"card border-2 border-success\">\n                            <h5 className=\"card-header font\">{name}</h5>\n                            <div className=\"card-body\">\n                              <p>{description}</p>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </Box>\n                  </div>\n                </div>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleClose} variant=\"contained\" color=\"error\">\n                  Cancelar\n                </Button>\n                {type !== \"view\" && (\n                  <Button\n                    type=\"submit\"\n                    color=\"primary\"\n                    variant=\"contained\"\n                    disabled={isSubmitting}\n                  >\n                    {type === \"edit\" && \"Guardar\"}\n\n                    {type === \"create\" && \"Crear\"}\n                  </Button>\n                )}\n              </DialogActions>\n            </Form>\n          )}\n        </Formik>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default CreateEdit;\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/contexts/AuthContext.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/_app.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/api/auth/[...nextauth].ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/auth.tsx",["753"],[],"import { useAuth } from \"@/contexts/AuthContext\";\nimport { useEffect, useState } from \"react\";\nimport Login from \"./login\";\nimport { CircularProgress } from \"@mui/material\";\n\nconst withAuth = (WrappedComponent: React.FC<any>) => {\n  const Wrapper = (props: any) => {\n    const { login, isAuthenticated } = useAuth();\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n      login();\n      setLoading(false);\n    }, []);\n\n    if (loading) {\n      return (\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: \"100vh\",\n          }}\n        >\n          <CircularProgress color=\"secondary\" />\n        </div>\n      );\n    }\n\n    return isAuthenticated ? <WrappedComponent {...props} /> : <Login />;\n  };\n\n  return Wrapper;\n};\n\nexport default withAuth;\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/categories.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/collections.tsx",["754","755"],[],"import { FC, useState, useEffect } from \"react\";\nimport MainLayout from \"@/components/layout/main\";\nimport withAuth from \"./auth\";\nimport { Button, TextField, Typography } from \"@mui/material\";\n\nimport React from \"react\";\nimport DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport PreviewIcon from \"@mui/icons-material/Preview\";\nimport BorderColorIcon from \"@mui/icons-material/BorderColor\";\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport DataTableCustom from \"@/components/ui/DataTableCustom\";\nimport { notify, _apiUrl } from \"@/utils/constants\";\nimport {\n  deleteCollection,\n  getAllCollections,\n} from \"@/services/CollectionService\";\nimport Alert from \"@mui/material/Alert\";\nimport { Collection } from \"@/types/Collection\";\nimport CreateEdit from \"@/components/collection/CreateEdit\";\nimport { Responsepetition } from \"@/types/Responsepetition\";\n\ninterface Props {\n  data: any;\n}\n\nconst Collections: FC = () => {\n  const [collections, setCollections] = useState<Collection[]>([]);\n\n  const [open, setOpen] = useState(false);\n  const [selectedCollection, setSelectedCollection] =\n    useState<Collection | null>();\n  const [type, setType] = useState(\"\");\n  const [errorPage, setErrorPage] = useState(\"\");\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const createClick = async () => {\n    setType(\"create\");\n    setSelectedCollection(null);\n    handleClickOpen();\n  };\n\n  const viewClick = async (result: Collection) => {\n    setType(\"view\");\n    setSelectedCollection(result);\n    handleClickOpen();\n  };\n\n  const editClick = async (result: Collection) => {\n    setType(\"edit\");\n    setSelectedCollection(result);\n    handleClickOpen();\n  };\n  const deleteClick = async (result: Collection) => {\n    const id: any = result.id;\n    try {\n      await deleteCollection(id);\n      getCollections();\n      notify(\"success\", \"Se ha eliminado\");\n    } catch (error) {\n      notify(\"success\", \"Error al eliminar\");\n    }\n  };\n\n  useEffect(() => {\n    getCollections();\n  }, []);\n\n  /* useEffect(() => {\n        setCollections(data)\n    }, [data]) */\n\n  const getCollections = async () => {\n    const { data, state, error }: Responsepetition = await getAllCollections();\n    if (state) {\n      setCollections(data);\n    } else {\n      setCollections([]);\n      setErrorPage(\"Error al cargar los datos ...\");\n    }\n  };\n\n  const columns = [\n    { name: \"name\", label: \"Nombre\" },\n    {\n      name: \"image\",\n      label: \"Imagen\",\n      options: {\n        customBodyRenderLite: (index: number) => {\n          const result: Collection = collections[index];\n          return <img width={\"80vw\"} src={_apiUrl + \"/\" + result.image} />;\n        },\n      },\n    },\n    { name: \"title\", label: \"Título\" },\n    { name: \"meta\", label: \"Metadatos\" },\n    { name: \"url\", label: \"URL\" },\n    {\n      name: \"Acciones\",\n      Label: \"Acciones\",\n      options: {\n        customBodyRenderLite: (index: number) => {\n          const result: Collection = collections[index];\n          return (\n            <>\n              <div className=\"d-flex gap-3\">\n                <Button\n                  variant={\"text\"}\n                  color=\"primary\"\n                  onClick={() => editClick(result)}\n                >\n                  <BorderColorIcon />\n                </Button>\n                <Button\n                  variant={\"text\"}\n                  color=\"primary\"\n                  onClick={() => viewClick(result)}\n                >\n                  <PreviewIcon />\n                </Button>\n                <Button color=\"error\" onClick={() => deleteClick(result)}>\n                  <DeleteForeverIcon />\n                </Button>\n              </div>\n            </>\n          );\n        },\n      },\n    },\n  ];\n\n  return (\n    <>\n      <MainLayout>\n        <div className=\"content__header content__boxed overlapping\">\n          <div className=\"content__wrap\">\n            <div className=\"content__header content__boxed overlapping\">\n              <div className=\"content__wrap\">\n                {/* Breadcrumb */}\n                <nav aria-label=\"breadcrumb\">\n                  <ol className=\"mb-0\" style={{ margin: 0, padding: 0 }}>\n                    <li\n                      className=\"breadcrumb-item active font\"\n                      style={{ listStyle: \"none\" }}\n                      aria-current=\"page\"\n                    >\n                      <Typography sx={{ fontWeight: \"bolder\" }} mb={1}>\n                        COLECCIONES\n                      </Typography>\n                    </li>\n                  </ol>\n                </nav>\n\n                <div className=\"content__boxed\">\n                  <div className=\"card\">\n                    <div className=\"card-body flex-fill ms-md-4\">\n                      {errorPage.trim() != \"\" && (\n                        <Alert severity=\"error\">{errorPage}</Alert>\n                      )}\n\n                      <DataTableCustom\n                        data={collections}\n                        columns={columns}\n                        buttons={\n                          <Button\n                            variant={\"contained\"}\n                            color=\"primary\"\n                            className=\"me-2 ms-4\"\n                            onClick={createClick}\n                          >\n                            <AddCircleOutlineIcon className=\"\" />\n                          </Button>\n                        }\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </MainLayout>\n      <CreateEdit\n        type={type}\n        collection={selectedCollection}\n        updateTable={getCollections}\n        open={open}\n        handleClose={handleClose}\n      ></CreateEdit>\n    </>\n  );\n};\nexport async function getServerSideProps() {\n  const { data, state, error }: Responsepetition = await getAllCollections();\n  if (state) {\n    return { props: { data: data } };\n  } else {\n    return { props: { data: [] } };\n  }\n}\n\nexport default withAuth(Collections);\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/families.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/home.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/index.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/login.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/organizations.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/paymentPlataforms.tsx",["756","757"],[],"import { FC, useState, useEffect } from \"react\";\nimport MainLayout from \"@/components/layout/main\";\nimport withAuth from \"./auth\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Container,\n  FormControl,\n  FormGroup,\n  Input,\n  InputAdornment,\n  InputLabel,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport CreateEdit from \"@/components/series/CreateEdit\";\nimport React from \"react\";\nimport DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nimport PreviewIcon from \"@mui/icons-material/Preview\";\nimport BorderColorIcon from \"@mui/icons-material/BorderColor\";\n\nimport { notify } from \"@/utils/constants\";\nimport { deleteSeries, getAllSeries } from \"@/services/SeriesService\";\nimport Alert from \"@mui/material/Alert\";\n\nimport { makeStyles } from \"@mui/styles\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport { PaymentPlatform } from \"@/types/PaymentPlataform\";\nimport {\n  getAllPaymentPlatforms,\n  updatePaymentPlatform,\n} from \"@/services/PaymentPlataformService\";\nimport { Responsepetition } from \"@/types/Responsepetition\";\nimport { Serie } from \"@/types/Serie\";\n\ninterface Props {\n  data: any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  accordionHeader: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  logo: {\n    padding: \"10px\",\n  },\n  inputGroup: {\n    marginBottom: \"10px\",\n  },\n}));\n\n//Datos de ejemplo para poder ver la interfaz\nconst DataEjemplo: PaymentPlatform[] = [\n  {\n    id: 1,\n    description: \"descripcion\",\n    etiqueta: \"Mercado pago\",\n    reserved_time: 10,\n  },\n  {\n    id: 2,\n    description: \"descripcion\",\n    etiqueta: \"Depsito bancario\",\n    reserved_time: 10,\n  },\n  {\n    id: 3,\n    description: \"descripcion\",\n    etiqueta: \"Crédito\",\n    reserved_time: 10,\n  },\n  {\n    id: 4,\n    description: \"descripcion\",\n    etiqueta: \"Transferencia electronica\",\n    reserved_time: 10,\n  },\n];\n\nconst PaymentPlataforms: FC = () => {\n  //Tiene datos de ejemplo staticos\n  const [paymentPlataforms, setPaymentPlataforms] = useState<PaymentPlatform[]>(\n    []\n  );\n  const [open, setOpen] = useState(false);\n  const [type, setType] = useState(\"\");\n  const [errorPage, setErrorPage] = useState(\"\");\n  const [values, setvalues] = useState<any>({});\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    const val = paymentPlataforms.map((plataform) => {\n      return {\n        id: plataform.id,\n        etiqueta: plataform.etiqueta,\n        description: plataform.description,\n        reserved_time: plataform.reserved_time,\n      };\n    });\n    setvalues(val);\n  }, [paymentPlataforms]);\n\n  useEffect(() => {\n    const val = paymentPlataforms.map((plataform) => {\n      return {\n        id: plataform.id,\n        etiqueta: plataform.etiqueta,\n        description: plataform.description,\n        reserved_time: plataform.reserved_time,\n      };\n    });\n    setvalues(val);\n  }, []);\n\n  const createClick = async () => {};\n\n  const editClick = async (index: number) => {\n    const formData = values[index];\n    console.log(formData);\n    const { data, state, error }: Responsepetition =\n      await updatePaymentPlatform(formData.id, formData);\n\n    if (state) {\n      notify(\"success\", \"Se ha actualizado\");\n      getPaymentPlataforms();\n      handleClose();\n    } else {\n      notify(\"error\", error.message);\n    }\n  };\n\n  const deleteClick = async (result: Serie) => {\n    const id: any = result.id;\n    try {\n      await deleteSeries(id);\n      getPaymentPlataforms();\n      notify(\"success\", \"Se ha eliminado\");\n    } catch (error) {\n      notify(\"success\", \"Error al eliminar\");\n    }\n  };\n\n  useEffect(() => {\n    getPaymentPlataforms();\n  }, []);\n\n  /* useEffect(() => {\n        setSeries(data)\n    }, [data]) */\n\n  const getPaymentPlataforms = async () => {\n    const { data, state, error }: Responsepetition =\n      await getAllPaymentPlatforms();\n    if (state) {\n      setPaymentPlataforms(data);\n    } else {\n      setPaymentPlataforms([]);\n      setErrorPage(error.message);\n    }\n  };\n\n  const onChangeEtiqueta = (e: any, index: number) => {\n    let nvalues = [...values];\n    nvalues[index].etiqueta = e.target.value;\n    setvalues(nvalues);\n  };\n  const onChangeDescription = (e: any, index: number) => {\n    let nvalues = [...values];\n    nvalues[index].description = e.target.value;\n    setvalues(nvalues);\n  };\n  const onChangeReserved = (e: any, index: number) => {\n    let nvalues = [...values];\n    nvalues[index].reserved_time = e.target.value;\n    setvalues(nvalues);\n  };\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <MainLayout>\n        <div className=\"content__header content__boxed overlapping\">\n          <div className=\"content__wrap\">\n            <div className=\"content__header content__boxed overlapping\">\n              <div className=\"content__wrap\">\n                {/* Breadcrumb */}\n                <nav aria-label=\"breadcrumb\">\n                  <ol className=\"mb-0\" style={{ margin: 0, padding: 0 }}>\n                    <li\n                      className=\"breadcrumb-item active font\"\n                      style={{ listStyle: \"none\" }}\n                      aria-current=\"page\"\n                    ></li>\n                  </ol>\n                </nav>\n\n                <div className=\"content__boxed\">\n                  <div className=\"card\">\n                    <div className=\"card-body flex-fill ms-md-4 mt-4\">\n                      {errorPage.trim() != \"\" && (\n                        <Alert severity=\"error\">{errorPage}</Alert>\n                      )}\n                      <Typography ml={2} mb={3} variant={\"h4\"}>\n                        Plataformas de pago\n                      </Typography>\n                      <Box\n                        sx={{\n                          background: \"#EFEEEE\",\n                          padding: \"15px\",\n                          paddingTop: \"35px\",\n                          borderRadius: \"5px\",\n                        }}\n                      >\n                        <Container>\n                          {paymentPlataforms.map((method, index) => {\n                            return (\n                              <Box mb={4} key={method.id}>\n                                <Accordion\n                                  sx={{\n                                    background: \"#fff\",\n                                    paddingTop: \"10px\",\n                                    paddingBottom: \"10px\",\n                                    borderRadius: \"15px\",\n                                  }}\n                                >\n                                  <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls={`dm-gapAccCollapse${method.id}`}\n                                    id={`dm-gapAccHeading${method.id}`}\n                                    sx={{ borderRadius: \"15px\" }}\n                                  >\n                                    <Box className={classes.accordionHeader}>\n                                      <Box className={classes.logo}>\n                                        <img\n                                          height=\"40px\"\n                                          src=\"https://cdn-icons-png.flaticon.com/512/4564/4564877.png\"\n                                          alt=\"\"\n                                        />\n                                      </Box>\n                                      <Typography ml={5} sx={{ color: \"#000\" }}>\n                                        {method.etiqueta}\n                                      </Typography>\n                                    </Box>\n                                  </AccordionSummary>\n                                  <AccordionDetails\n                                    className=\"ps-5 pe-5\"\n                                    sx={{ borderRadius: \"15px\" }}\n                                  >\n                                    <Box className=\"row\">\n                                      <FormControl\n                                        className={\n                                          classes.inputGroup + \" col-6\"\n                                        }\n                                      >\n                                        <Typography>Etiqueta</Typography>\n                                        <TextField\n                                          placeholder=\"Etiqueta\"\n                                          value={values[index]?.etiqueta}\n                                          onChange={(e) =>\n                                            onChangeEtiqueta(e, index)\n                                          }\n                                        />\n                                      </FormControl>\n                                      <FormControl\n                                        className={\n                                          classes.inputGroup + \" col-6\"\n                                        }\n                                      >\n                                        <Typography>\n                                          Duración del apartado de productos\n                                        </Typography>\n                                        <TextField\n                                          placeholder=\"Horas\"\n                                          type=\"number\"\n                                          value={values[index]?.reserved_time}\n                                          onChange={(e) =>\n                                            onChangeReserved(e, index)\n                                          }\n                                        />\n                                      </FormControl>\n                                    </Box>\n                                    <FormGroup>\n                                      <FormControl\n                                        className={classes.inputGroup + \" mt-2\"}\n                                      >\n                                        <Typography>Descripción</Typography>\n                                        <TextField\n                                          placeholder=\"Descripción\"\n                                          value={values[index]?.description}\n                                          onChange={(e) =>\n                                            onChangeDescription(e, index)\n                                          }\n                                        />\n                                      </FormControl>\n                                    </FormGroup>\n                                    <Box\n                                      display={\"flex\"}\n                                      justifyContent={\"end\"}\n                                      mt={3}\n                                    >\n                                      <Button\n                                        variant=\"contained\"\n                                        onClick={() => editClick(index)}\n                                      >\n                                        Guardar cambios\n                                      </Button>\n                                    </Box>\n                                  </AccordionDetails>\n                                </Accordion>\n                              </Box>\n                            );\n                          })}\n                        </Container>\n                      </Box>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </MainLayout>\n      {/* <CreateEdit type={type} serie={selectedSerie} updateTable={getPaymentPlataforms} open={open} handleClose={handleClose}></CreateEdit> */}\n    </>\n  );\n};\n\nexport async function getServerSideProps() {\n  const { data, state, error }: Responsepetition = await getAllSeries();\n  if (state) {\n    return { props: { data: data } };\n  } else {\n    return { props: { data: [] } };\n  }\n}\n\nexport default withAuth(PaymentPlataforms);\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/register.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/roles.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/series.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/shipping.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/user-organizations.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/users.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/warehouses.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/AuthService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/CategoryService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/CollectionService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/FamilyService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/HttpClient.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/OrganizationService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/PaymentPlataformService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/RolesService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/SeriesService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/ShippingService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/TypeOfClientService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/UserOrganizationService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/UsersOrganizationService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/UsersService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/WarehouseService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/theme.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Blog.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Brand.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Carts.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Category.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Client.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Collection.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/ComercialInfo.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Dimensions.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Family.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Location.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/LoginRequest.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/MeasuringUnit.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Movements.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Offer.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Organization.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Page.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/PaymentPlataform.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Product.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/PurchaseIncome.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/RegisterRequest.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Responsepetition.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Role.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/SaleHeader.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Serie.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Shipping.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Stock.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Supplier.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Transfer.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Type.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/User.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/Warehouse.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/utils/constants.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/utils/initialStates.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/utils/validationSchemas.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/brand/CreateEdit.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/client/CreateEdit.tsx",["758","759","760"],[],"import React, { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage, FieldAttributes } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  InputLabel,\n  MenuItem,\n  Select,\n  Tab,\n  Tabs,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { notify } from \"@/utils/constants\";\nimport { createCategory, updateCategory } from \"@/services/CategoryService\";\nimport { useEffect } from \"react\";\nimport { TypeOfClient } from \"@/types/TypeOfClient\";\nimport { createClient, updateClient } from \"@/services/ClientService\";\nimport { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\nimport dayjs, { Dayjs } from \"dayjs\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport { Responsepetition } from \"@/types/Responsepetition\";\n\ninterface FormValues {\n  name: string;\n  phone: string;\n  bonifies_credit: boolean;\n  email: string;\n  discount: number;\n  rfc: string;\n  regime: string;\n  cfdi_use: string;\n  residence_country: string;\n  country: string;\n  state: string;\n  postal_code: string;\n  city: string;\n  municipality: string;\n  poblation: string;\n  colony: string;\n  street: string;\n  exterior_num: string;\n  internal_num: string;\n  payment_method: string;\n  max_credit: number;\n  max_term: number;\n  fields?: object;\n  type?: string;\n}\n\ninterface Props {\n  children?: React.ReactNode;\n  icon?: React.ReactNode;\n  title?: string;\n  type: string;\n  client?: any;\n  updateTable?: any;\n  open: boolean;\n  handleClose?: any;\n  typeOfClient: any[];\n}\n\nconst phoneRegExp = /^[1-9]\\d{9}$/;\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(\"Este campo es obligatorio\"),\n  email: Yup.string()\n    .email(\"Introduce un correo electrónico válido\")\n    .required(\"Este campo es obligatorio\"),\n  rfc: Yup.string()\n    .matches(/^([A-ZÑ&]{3,4})\\d{6}([A-Z\\d]{3})$/i, \"Introduce un RFC válido\")\n    .required(\"Este campo es obligatorio\"),\n  phone: Yup.string()\n    .required(\"El número de teléfono es obligatorio\")\n    .matches(\n      phoneRegExp,\n      \"El número de teléfono debe ser un número de 10 dígitos sin espacios ni guiones\"\n    ),\n  street: Yup.string().required(\"Calle requerida\"),\n  internal_num: Yup.string().required(\"Número Interior requerido\"),\n  exterior_num: Yup.string().notRequired(),\n  colony: Yup.string().required(\"Colonia requerida\"),\n  municipality: Yup.string().required(\"Municipio requerido\"),\n  poblation: Yup.string().required(\"Población requerida\"),\n  postal_code: Yup.string().required(\"Código Postal requerido\"),\n  city: Yup.string().required(\"Ciudad requerida\"),\n  state: Yup.string().required(\"Estado requerido\"),\n});\n\nconst CreateEdit: React.FC<Props> = ({\n  type,\n  client,\n  updateTable,\n  open,\n  handleClose,\n  typeOfClient,\n}) => {\n  const [fields, setFields] = useState([]);\n  const [fieldsValues, setFieldsValues] = useState<any>({});\n\n  useEffect(() => {\n    if (client) {\n      generingFieldsValues();\n\n      generingFields();\n    }\n  }, [client]);\n\n  const onChangeFields = (e: any, tag: any, isDate: boolean) => {\n    if (isDate) {\n      setFieldsValues({\n        ...fieldsValues,\n        [tag]: e,\n      });\n    } else {\n      setFieldsValues({\n        ...fieldsValues,\n        [tag]: e.target.value,\n      });\n    }\n  };\n\n  const generingFields = () => {\n    if (client) {\n      const tipo = typeOfClient.find((type: any) => type.id === client.type.id);\n      setFields(tipo?.fields);\n    }\n  };\n\n  const generingFieldsValues = () => {\n    if (client) {\n      let newFieldsValues = {};\n\n      client.fields.map(({ tag, value, type }: any) => {\n        newFieldsValues = {\n          ...newFieldsValues,\n          [tag]: type === \"date\" ? dayjs(value) : value,\n        };\n      });\n      setFieldsValues(newFieldsValues);\n    }\n  };\n\n  const generingEmptyFieldsValues = () => {\n    let values: any = {};\n    fields.map(({ tag, type }) => {\n      values = {\n        ...values,\n        [tag]: type === \"date\" ? dayjs() : \"\",\n      };\n    });\n    setFieldsValues(values);\n  };\n\n  useEffect(() => {\n    console.log(client);\n\n    if (type === \"create\") {\n      setFields([]);\n    }\n  }, [open]);\n\n  useEffect(() => {\n    console.log(\"cambio\", fields);\n    if (client) {\n      generingFieldsValues();\n    } else {\n      generingEmptyFieldsValues();\n    }\n  }, [fields]);\n\n  const handleSubmit = async (values: FormValues, actions: any) => {\n    const newFieldValues = fields.map((field: any) => ({\n      ...field,\n      value:\n        field.type === \"date\"\n          ? fieldsValues[field.tag].toISOString()\n          : fieldsValues[field.tag],\n    }));\n    const dataform = {\n      ...values,\n      fields: newFieldValues,\n    };\n\n    console.log(dataform);\n\n    try {\n      if (type === \"create\") {\n        const { data, state, error }: Responsepetition = await createClient(\n          dataform\n        );\n        if (state) {\n          notify(\"success\", \"Se ha creado exitosamente\");\n          updateTable();\n          handleClose();\n        } else {\n          notify(\"error\", error.message);\n        }\n      }\n\n      if (type === \"edit\") {\n        const { data, state, error }: Responsepetition = await updateClient(\n          client.id,\n          dataform\n        );\n        if (state) {\n          notify(\"success\", \"Se ha creado exitosamente\");\n          updateTable();\n          handleClose();\n        } else {\n          notify(\"error\", error.message);\n        }\n      }\n    } catch (error) {\n      notify(\"error\", \"Ha sucedido un error\");\n    }\n  };\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose} maxWidth=\"lg\" fullWidth>\n        <DialogTitle>Cliente</DialogTitle>\n        <Formik\n          initialValues={{\n            name: client ? client.name : \"\",\n            bonifies_credit: client ? client.bonifies_credit : false,\n            phone: client ? client.phone : \"\",\n            email: client ? client.email : \"\",\n            discount: client ? client.discount : \"\",\n            rfc: client ? client.rfc : \"\",\n            regime: client ? client.regime : \"\",\n            cfdi_use: client ? client.cfdi_use : \"\",\n            residence_country: \"México\",\n            country: client ? client.country : \"\",\n            state: client ? client.state : \"\",\n            postal_code: client ? client.postal_code : \"\",\n            city: client ? client.city : \"\",\n            municipality: client ? client.municipality : \"\",\n            poblation: client ? client.poblation : \"\",\n            colony: client ? client.colony : \"\",\n            street: client ? client.street : \"\",\n            exterior_num: client ? client.exterior_num : \"\",\n            internal_num: client ? client.internal_num : \"\",\n            payment_method: client ? client.payment_method : \"\",\n            max_credit: client ? client.max_credit : \"\",\n            max_term: client ? client.max_term : \"\",\n            fields: client ? client.fields : {},\n            type: client ? client.type.id : \"\",\n          }}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ isSubmitting, errors, touched, handleChange, values }) => (\n            <Form>\n              <DialogContent>\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  name=\"name\"\n                  type=\"text\"\n                  label=\"Nombre\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.name && errors.name ? (\n                      <ErrorMessage name=\"name\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.name && errors.name ? true : false}\n                  onChange={handleChange}\n                />\n                <Field\n                  as={TextField}\n                  disabled={false}\n                  name=\"email\"\n                  type=\"email\"\n                  label=\"Correo electrónico\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.email && errors.email ? (\n                      <ErrorMessage name=\"email\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.email && errors.email ? true : false}\n                  onChange={handleChange}\n                />\n\n                <Box className=\"row\">\n                  <Box className=\"col-5\">\n                    <Field\n                      as={TextField}\n                      disabled={type == \"view\"}\n                      name=\"phone\"\n                      type=\"text\"\n                      label=\"Telefono\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.phone && errors.phone ? (\n                          <ErrorMessage name=\"phone\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={touched.phone && errors.phone ? true : false}\n                      onChange={handleChange}\n                    />\n                  </Box>\n                  <Box className=\"col-7\">\n                    <FormControl sx={{ width: \"99%\", marginTop: \"15px\" }}>\n                      <InputLabel id=\"demo-simple-select-helper-label\">\n                        Tipo de cliente\n                      </InputLabel>\n                      <Select\n                        disabled={type == \"view\"}\n                        value={values.type}\n                        labelId=\"demo-simple-select-helper-label\"\n                        id=\"type\"\n                        name=\"type\"\n                        placeholder=\"tipo de cliente\"\n                        label=\"Tipo de cliente\"\n                        onChange={(e) => {\n                          const tipo = typeOfClient.find(\n                            (type: any) => type.id === e.target.value\n                          );\n                          setFields(tipo.fields);\n\n                          handleChange(e);\n                        }}\n                        fullWidth\n                        error={\n                          touched.cfdi_use && errors.cfdi_use ? true : false\n                        }\n                      >\n                        {typeOfClient.map((typec, index) => {\n                          return (\n                            <MenuItem key={index} value={typec.id}>\n                              {typec.name}\n                            </MenuItem>\n                          );\n                        })}\n                      </Select>\n                    </FormControl>\n                  </Box>\n                </Box>\n\n                <Box\n                  display={\"flex\"}\n                  flexWrap={\"wrap\"}\n                  gap={3}\n                  mt={3}\n                  mb={3}\n                  ml={4}\n                >\n                  {/* Campos dinamicos     */}\n\n                  {fields &&\n                    fields.map(({ tag, type }, index) => (\n                      <div key={index}>\n                        {type === \"date\" ? (\n                          <LocalizationProvider dateAdapter={AdapterDayjs}>\n                            <DatePicker\n                              label={tag}\n                              disabled={type == \"view\"}\n                              sx={{ with: \"100px\" }}\n                              value={fieldsValues[tag]}\n                              onChange={(newValue: any) =>\n                                onChangeFields(newValue, tag, true)\n                              }\n                            />\n                          </LocalizationProvider>\n                        ) : (\n                          <Field\n                            label={tag}\n                            as={TextField}\n                            type={type}\n                            name={tag}\n                            id={tag}\n                            placeholder={tag}\n                            value={fieldsValues[tag]}\n                            onChange={(newValue: any) =>\n                              onChangeFields(newValue, tag, false)\n                            }\n                          />\n                        )}\n\n                        {touched[tag] && errors[tag] && (\n                          <div>{errors[tag]}</div>\n                        )}\n                      </div>\n                    ))}\n                </Box>\n\n                <FormControlLabel\n                  label=\"Bonificar monedero\"\n                  control={\n                    <Checkbox\n                      name=\"bonifies_credit\"\n                      checked={values.bonifies_credit}\n                      onChange={handleChange}\n                      inputProps={{ \"aria-label\": \"controlled\" }}\n                    />\n                  }\n                />\n\n                <Typography variant=\"h6\" mt={4}>\n                  Información fiscal\n                </Typography>\n                <hr />\n                <Field\n                  as={TextField}\n                  disabled={false}\n                  name=\"rfc\"\n                  type=\"text\"\n                  label=\"RFC\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.rfc && errors.rfc ? <ErrorMessage name=\"rfc\" /> : \"\"\n                  }\n                  error={touched.rfc && errors.rfc ? true : false}\n                  onChange={handleChange}\n                />\n                <FormControl sx={{ width: \"99%\", marginTop: \"10px\" }}>\n                  <InputLabel id=\"demo-simple-select-helper-label\">\n                    Régimen\n                  </InputLabel>\n                  <Select\n                    disabled={type == \"view\"}\n                    value={values.regime}\n                    labelId=\"demo-simple-select-helper-label\"\n                    id=\"regime\"\n                    name=\"regime\"\n                    placeholder=\"Régimen fiscal\"\n                    label=\"regime\"\n                    onChange={handleChange}\n                    fullWidth\n                    error={touched.regime && errors.regime ? true : false}\n                  >\n                    <MenuItem value=\"General de Ley Personas Morales\">\n                      General de Ley Personas Morales\n                    </MenuItem>\n                    <MenuItem value=\"Personas Morales con Fines no Lucrativos\">\n                      Personas Morales con Fines no Lucrativos\n                    </MenuItem>\n                    <MenuItem value=\"Sueldos y Salarios e Ingresos Asimilados a Salarios\">\n                      Sueldos y Salarios e Ingresos Asimilados a Salarios\n                    </MenuItem>\n                    <MenuItem value=\"Arrendamiento\">Arrendamiento</MenuItem>\n                    <MenuItem value=\"Demás ingresos\">Demás ingresos</MenuItem>\n                    <MenuItem value=\"Consolidación\">Consolidación</MenuItem>\n                    <MenuItem value=\"Residentes en el Extranjero sin Establecimiento Permanente en México\">\n                      Residentes en el Extranjero sin Establecimiento Permanente\n                      en México\n                    </MenuItem>\n                    <MenuItem value=\"Ingresos por Dividendos (socios y accionistas)\">\n                      Ingresos por Dividendos (socios y accionistas)\n                    </MenuItem>\n                    <MenuItem value=\"Personas Físicas con Actividades Empresariales y Profesionales\">\n                      Personas Físicas con Actividades Empresariales y\n                      Profesionales\n                    </MenuItem>\n                    <MenuItem value=\"Ingresos por intereses\">\n                      Ingresos por intereses\n                    </MenuItem>\n                    <MenuItem value=\"Régimen de los ingresos por obtención de premios\">\n                      Régimen de los ingresos por obtención de premios\n                    </MenuItem>\n                    <MenuItem value=\"Sin obligaciones fiscales\">\n                      Sin obligaciones fiscales\n                    </MenuItem>\n                    <MenuItem value=\"Sociedades Cooperativas de Producción que optan por diferir sus ingresos\">\n                      Sociedades Cooperativas de Producción que optan por\n                      diferir sus ingresos\n                    </MenuItem>\n                    <MenuItem value=\"Incorporación Fiscal\">\n                      Incorporación Fiscal\n                    </MenuItem>\n                  </Select>\n                </FormControl>\n                <FormControl sx={{ width: \"99%\", marginTop: \"20px\" }}>\n                  <InputLabel id=\"demo-simple-select-helper-label\">\n                    CFDI\n                  </InputLabel>\n                  <Select\n                    disabled={type == \"view\"}\n                    value={values.cfdi_use}\n                    labelId=\"demo-simple-select-helper-label\"\n                    id=\"cfdi_use\"\n                    name=\"cfdi_use\"\n                    placeholder=\"Uso del CDFI\"\n                    label=\"cfdi_use\"\n                    onChange={handleChange}\n                    fullWidth\n                    error={touched.cfdi_use && errors.cfdi_use ? true : false}\n                  >\n                    <MenuItem value=\"ingresos\">CFDI de ingresos</MenuItem>\n                    <MenuItem value=\"egresos\">CFDI de egresos</MenuItem>\n                    <MenuItem value=\"nomina\">CFDI de nómina</MenuItem>\n                    <MenuItem value=\"pagos\">CFDI de pagos</MenuItem>\n                    <MenuItem value=\"traslado\">CFDI de traslado</MenuItem>\n                    <MenuItem value=\"recepcion-pagos\">\n                      CFDI de recepción de pagos\n                    </MenuItem>\n                    <MenuItem value=\"complemento-pagos\">\n                      CFDI de complemento de pagos\n                    </MenuItem>\n                  </Select>\n                </FormControl>\n\n                <Typography variant=\"h6\" mt={4}>\n                  Método de pago\n                </Typography>\n                <hr />\n\n                <FormControl sx={{ width: \"99%\", marginTop: \"20px\" }}>\n                  <InputLabel id=\"demo-simple-select-helper-label\">\n                    Método\n                  </InputLabel>\n                  <Select\n                    disabled={type == \"view\"}\n                    value={values.payment_method}\n                    labelId=\"demo-simple-select-helper-label\"\n                    id=\"payment_method\"\n                    name=\"payment_method\"\n                    placeholder=\"Método de pago\"\n                    label=\"payment_method\"\n                    onChange={handleChange}\n                    fullWidth\n                    error={touched.cfdi_use && errors.cfdi_use ? true : false}\n                  >\n                    <MenuItem value=\"credito\">Credito</MenuItem>\n                    <MenuItem value=\"debito\">Débito</MenuItem>\n                  </Select>\n                </FormControl>\n\n                <Typography variant=\"h6\" mt={4}>\n                  Dirección almacén\n                </Typography>\n                <hr />\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"street\"\n                  label=\"Calle\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.street && errors.street ? (\n                      <ErrorMessage name=\"street\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.street && errors.street ? true : false}\n                  onChange={handleChange}\n                />\n                <Box className=\"row mt-2\">\n                  <Field\n                    className=\"col-6\"\n                    as={TextField}\n                    disabled={type == \"view\"}\n                    type=\"text\"\n                    name=\"internal_num\"\n                    label=\"Número Interior\"\n                    fullWidth\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    helperText={\n                      touched.internal_num && errors.internal_num ? (\n                        <ErrorMessage name=\"internal_num\" />\n                      ) : (\n                        \"\"\n                      )\n                    }\n                    error={\n                      touched.internal_num && errors.internal_num ? true : false\n                    }\n                    onChange={handleChange}\n                  />\n                  <Field\n                    as={TextField}\n                    className=\"col-6\"\n                    disabled={type == \"view\"}\n                    type=\"text\"\n                    name=\"exterior_num\"\n                    label=\"Número Exterior\"\n                    fullWidth\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    helperText={\n                      touched.exterior_num && errors.exterior_num ? (\n                        <ErrorMessage name=\"exterior_num\" />\n                      ) : (\n                        \"\"\n                      )\n                    }\n                    error={\n                      touched.exterior_num && errors.exterior_num ? true : false\n                    }\n                    onChange={handleChange}\n                  />\n                </Box>\n\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"colony\"\n                  label=\"Colonia\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.colony && errors.colony ? (\n                      <ErrorMessage name=\"colony\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.colony && errors.colony ? true : false}\n                  onChange={handleChange}\n                />\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"municipality\"\n                  label=\"Municipio\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.municipality && errors.municipality ? (\n                      <ErrorMessage name=\"municipality\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={\n                    touched.municipality && errors.municipality ? true : false\n                  }\n                  onChange={handleChange}\n                />\n\n                <Box className=\"row mt-2\">\n                  <Field\n                    as={TextField}\n                    className=\"col-7\"\n                    disabled={type == \"view\"}\n                    type=\"text\"\n                    name=\"poblation\"\n                    label=\"Población\"\n                    fullWidth\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    helperText={\n                      touched.poblation && errors.poblation ? (\n                        <ErrorMessage name=\"poblation\" />\n                      ) : (\n                        \"\"\n                      )\n                    }\n                    error={touched.poblation && errors.poblation ? true : false}\n                    onChange={handleChange}\n                  />\n                  <Field\n                    as={TextField}\n                    className=\"col-5\"\n                    disabled={type == \"view\"}\n                    type=\"text\"\n                    name=\"postal_code\"\n                    label=\"Código Postal\"\n                    fullWidth\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    helperText={\n                      touched.postal_code && errors.postal_code ? (\n                        <ErrorMessage name=\"postal_code\" />\n                      ) : (\n                        \"\"\n                      )\n                    }\n                    error={\n                      touched.postal_code && errors.postal_code ? true : false\n                    }\n                    onChange={handleChange}\n                  />\n                </Box>\n\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"city\"\n                  label=\"Ciudad\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.city && errors.city ? (\n                      <ErrorMessage name=\"city\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.city && errors.city ? true : false}\n                  onChange={handleChange}\n                />\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"state\"\n                  label=\"Estado\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.state && errors.state ? (\n                      <ErrorMessage name=\"state\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.state && errors.state ? true : false}\n                  onChange={handleChange}\n                />\n                <Field\n                  as={TextField}\n                  disabled={type == \"view\"}\n                  type=\"text\"\n                  name=\"country\"\n                  label=\"País\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  helperText={\n                    touched.country && errors.country ? (\n                      <ErrorMessage name=\"country\" />\n                    ) : (\n                      \"\"\n                    )\n                  }\n                  error={touched.country && errors.country ? true : false}\n                  onChange={handleChange}\n                />\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleClose} color=\"primary\">\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" color=\"primary\" disabled={isSubmitting}>\n                  Guardar\n                </Button>\n              </DialogActions>\n            </Form>\n          )}\n        </Formik>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default CreateEdit;\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/BoxCustom.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/CreateEditBoxes.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/DragAndDropBoxes.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/EditCreateBoxes.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/PropertyOption.tsx",["761"],[],"import { Box, Checkbox, Typography } from '@mui/material';\nimport React, { useState } from 'react'\nimport { useEffect } from 'react';\n\ninterface Props {\n    children?: React.ReactNode;\n    label: string;\n\n    color?: string;\n    onSelected?: any;\n    property?: string\n    data?: any;\n}\n\n\nexport const PropertyOption: React.FC<Props> = ({ label, data, onSelected = () => { }, color = \"#000\", property = \"\" }) => {\n\n    const [checked, setchecked] = useState<boolean>(false)\n    const handleChange = () => {\n        setchecked(!checked)\n        onSelected(property, label)\n    }\n\n\n    useEffect(() => {\n        try {\n            if (data[property] !== undefined) {\n                const newdata = data[property].selected;\n                const isthere = newdata.find((dat: string) => dat === label)\n                if (isthere) {\n                    setchecked(true)\n                } else {\n                    setchecked(false)\n                }\n            }\n        } catch (error) {\n\n        }\n    }, [data])\n\n\n\n    return (\n        <>\n            <Box display={\"flex\"} alignItems={\"center\"} justifyContent={'space-between'}>\n                <Box display={\"flex\"} alignItems={\"center\"} gap={5}>\n                    <Box width={\"20px\"} height={\"20px\"} sx={{ background: color, borderRadius: \"15px\" }}></Box>\n                    <Typography>{label}</Typography>\n                </Box>\n\n                <Checkbox\n                    checked={checked}\n                    onChange={handleChange}\n                    inputProps={{ 'aria-label': 'controlled' }}\n                />\n\n            </Box>\n            <hr />\n        </>\n\n    )\n}\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/suppliers/CreateEdit.tsx",["762","763"],[],"import React, { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage, FieldAttributes } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  Tab,\n  Tabs,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { notify } from \"@/utils/constants\";\nimport { useEffect } from \"react\";\nimport dayjs, { Dayjs } from \"dayjs\";\nimport { createSupplier, updateSupplier } from \"@/services/SupplierService\";\nimport {\n  getColonyByMunicipality,\n  getCPInfo,\n  getMunicipalitiesByState,\n  getStates,\n} from \"@/services/CopomexService\";\nimport Input from \"../react-dropzone-uploader/Input\";\nimport CreditAdd from \"./CreditAdd\";\nimport DiscountAdd from \"./DiscountAdd\";\nimport { getAllBrands } from \"@/services/BrandService\";\nimport { config } from \"process\";\nimport { toast } from \"react-toastify\";\nimport { Responsepetition } from \"@/types/Responsepetition\";\n\ninterface FormValues {\n  name: string;\n  phone: string;\n  email: string;\n  rfc: string;\n  social_reason: string;\n  commercial_conditions: string;\n  country: string;\n  state: string;\n  postal_code: string;\n  city: string;\n  municipality: string;\n  poblation: string;\n  colony: string;\n  street: string;\n  brand: string;\n  exterior_num: string;\n  internal_num: string;\n  payment_method: string;\n  discounts: object;\n  credit_info: object;\n}\n\ninterface Props {\n  children?: React.ReactNode;\n  icon?: React.ReactNode;\n  title?: string;\n  type: string;\n  supplier?: any;\n  updateTable?: any;\n  open: boolean;\n  handleClose?: any;\n}\n\nconst phoneRegExp = /^[1-9]\\d{9}$/;\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(\"Este campo es obligatorio\"),\n  email: Yup.string().email(\"Email inválido\").required(\"Email requerido\"),\n  rfc: Yup.string()\n    .matches(/^([A-ZÑ&]{3,4})\\d{6}([A-Z\\d]{3})$/i, \"Introduce un RFC válido\")\n    .notRequired(),\n  phone: Yup.string()\n    .required(\"El número de teléfono es obligatorio\")\n    .matches(\n      phoneRegExp,\n      \"El número de teléfono debe ser un número de 10 dígitos sin espacios ni guiones\"\n    ),\n});\n\nconst CreateEdit: React.FC<Props> = ({\n  type,\n  supplier,\n  updateTable,\n  open,\n  handleClose,\n}) => {\n  const [fields, setFields] = useState([]);\n  const [states, setStates] = useState([]);\n  const [colonies, setColonies] = useState([]);\n  const [municipalities, setMunicipalities] = useState([]);\n  const [fieldsValues, setFieldsValues] = useState<any>({});\n  const [discounts, setDiscounts] = useState<any>([]);\n  const [credits, setCredits] = useState<any>([]);\n  const [brands, setBrands] = useState<any>([]);\n\n  useEffect(() => {\n    if (supplier) {\n      setDiscounts(supplier.discounts);\n      setCredits(supplier.credit_info);\n    }\n  }, [supplier]);\n\n  useEffect(() => {\n    getBrandsArr();\n  }, []);\n\n  const searchCP = async (cp: string) => {\n    const { error, state, data } = await getCPInfo(cp);\n\n    if (error === \"\") {\n      toast.success(\"Código postal encontrado\");\n      const municipalities = data.map((item: any) => {\n        if (item.error === false) {\n          return item.response.municipio;\n        }\n      });\n\n      //get distinct municipalities\n      const uniqueMunicipalities = municipalities.filter(\n        (item: any, index: any) => {\n          return municipalities.indexOf(item) === index;\n        }\n      );\n\n      const states = data.map((item: any) => {\n        if (item.error === false) {\n          return item.response.estado;\n        }\n      });\n\n      //get distinct states\n      const uniqueStates = states.filter((item: any, index: any) => {\n        return states.indexOf(item) === index;\n      });\n\n      //get distinct colonies\n      const colonies = data.map((item: any) => {\n        if (item.error === false) {\n          return item.response.asentamiento;\n        }\n      });\n\n      const uniqueColonies = colonies.filter((item: any, index: any) => {\n        return colonies.indexOf(item) === index;\n      });\n\n      setColonies(uniqueColonies);\n      setStates(uniqueStates);\n      setMunicipalities(uniqueMunicipalities);\n    } else {\n      toast.error(\"Código postal no encontrado\");\n    }\n  };\n\n  const getBrandsArr = async () => {\n    const { data, state, error }: Responsepetition = await getAllBrands();\n    if (state) {\n      setBrands(data);\n    }\n  };\n\n  const getStatesArray = async () => {\n    try {\n      const res = await getStates();\n      let statesArr = res.data.response.estado;\n      statesArr.sort();\n      setStates(statesArr);\n      if (supplier?.state) await getAddresInfo(supplier.state);\n      if (supplier?.municipality) await getColonies(supplier.municipality);\n    } catch (error) {}\n  };\n\n  const generingEmptyFieldsValues = () => {\n    let values: any = {};\n    fields.map(({ tag, type }) => {\n      values = {\n        ...values,\n        [tag]: type === \"date\" ? dayjs() : \"\",\n      };\n    });\n    setFieldsValues(values);\n  };\n\n  useEffect(() => {\n    if (type === \"create\") {\n      setFields([]);\n    }\n    // getStatesArray();\n  }, [open]);\n\n  const getAddresInfo = async (state: string) => {\n    const res = await getMunicipalitiesByState(state);\n    let municipalitiesArr = res.data.response.municipios;\n    setMunicipalities(municipalitiesArr);\n  };\n\n  const getColonies = async (municipality: string) => {\n    const res = await getColonyByMunicipality(municipality);\n    let coloniesArr = res.data.response.colonia;\n    coloniesArr.sort();\n    setColonies(coloniesArr);\n  };\n\n  useEffect(() => {\n    if (supplier) {\n    } else {\n      generingEmptyFieldsValues();\n    }\n  }, [fields]);\n\n  const handleSubmit = async (values: FormValues, actions: any) => {\n    const newFieldValues = fields.map((field: any) => ({\n      ...field,\n      value:\n        field.type === \"date\"\n          ? fieldsValues[field.tag].toISOString()\n          : fieldsValues[field.tag],\n    }));\n    const dataform = {\n      ...values,\n      discounts,\n      credit_info: credits,\n      fields: newFieldValues,\n    };\n\n    try {\n      if (type === \"create\") {\n        const { data, state, error }: Responsepetition = await createSupplier(\n          dataform\n        );\n        if (state) {\n          notify(\"success\", \"Se ha creado exitosamente\");\n          updateTable();\n          handleClose();\n        } else {\n          notify(\"error\", error.message);\n        }\n      }\n\n      if (type === \"edit\") {\n        const { data, state, error }: Responsepetition = await updateSupplier(\n          supplier.id,\n          dataform\n        );\n        if (state) {\n          notify(\"success\", \"Se ha creado exitosamente\");\n          updateTable();\n          handleClose();\n        } else {\n          notify(\"error\", error.message);\n        }\n      }\n    } catch (error) {\n      notify(\"error\", \"Ha sucedido un error\");\n    }\n  };\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose} maxWidth=\"lg\" fullWidth>\n        <DialogTitle>Proveedores</DialogTitle>\n        <Formik\n          initialValues={{\n            name: supplier ? supplier.name : \"\",\n            phone: supplier ? supplier.phone : \"\",\n            email: supplier ? supplier.email : \"\",\n            rfc: supplier ? supplier.rfc : \"\",\n            social_reason: supplier ? supplier.social_reason : \"\",\n            commercial_conditions: supplier\n              ? supplier.commercial_conditions\n              : \"\",\n            country: supplier ? supplier.country : \"\",\n            state: supplier ? supplier.state : \"\",\n            postal_code: supplier ? supplier.postal_code : \"\",\n            city: supplier ? supplier.city : \"\",\n            municipality: supplier ? supplier.municipality : \"\",\n            poblation: supplier ? supplier.poblation : \"\",\n            colony: supplier ? supplier.colony : \"\",\n            street: supplier ? supplier.street : \"\",\n            exterior_num: supplier ? supplier.exterior_num : \"\",\n            brand: supplier ? supplier.brand : \"\",\n            internal_num: supplier ? supplier.internal_num : \"\",\n            payment_method: supplier ? supplier.payment_method : \"\",\n            discounts: supplier ? supplier.discounts : \"\",\n            credit_info: supplier ? supplier.credit_info : \"\",\n          }}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ isSubmitting, errors, touched, handleChange, values }) => (\n            <Form>\n              <DialogContent>\n                <Grid container spacing={2}>\n                  <Grid item xs={6} sm={6}>\n                    <Field\n                      as={TextField}\n                      disabled={false}\n                      name=\"name\"\n                      type=\"text\"\n                      label=\"Nombre\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.name && errors.name ? (\n                          <ErrorMessage name=\"name\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={touched.name && errors.name ? true : false}\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid item xs={6} sm={6}>\n                    <Field\n                      as={TextField}\n                      disabled={false}\n                      name=\"phone\"\n                      type=\"text\"\n                      label=\"Teléfono\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.phone && errors.phone ? (\n                          <ErrorMessage name=\"phone\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={touched.phone && errors.phone ? true : false}\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid item xs={6} sm={6} alignSelf=\"center\">\n                    <FormControl variant=\"outlined\" fullWidth>\n                      <InputLabel id=\"brand-label\">Marca</InputLabel>\n                      <Select\n                        labelId=\"brand-label\"\n                        name=\"brand\"\n                        label=\"Marca\"\n                        fullWidth\n                        variant=\"outlined\"\n                        error={touched.brand && errors.brand ? true : false}\n                        onChange={handleChange}\n                      >\n                        {brands.map((brand: any) => (\n                          <MenuItem key={brand.id} value={brand.id}>\n                            {brand.name}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  <Grid item xs={6} sm={6}>\n                    <Field\n                      as={TextField}\n                      disabled={false}\n                      name=\"email\"\n                      type=\"email\"\n                      label=\"Email\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.email && errors.email ? (\n                          <ErrorMessage name=\"email\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={touched.email && errors.email ? true : false}\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid item xs={6} sm={6}>\n                    <Field\n                      as={TextField}\n                      disabled={false}\n                      name=\"rfc\"\n                      type=\"text\"\n                      label=\"RFC\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.rfc && errors.rfc ? (\n                          <ErrorMessage name=\"rfc\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={touched.rfc && errors.rfc ? true : false}\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid item xs={6} sm={6}>\n                    <Field\n                      as={TextField}\n                      disabled={false}\n                      name=\"social_reason\"\n                      type=\"text\"\n                      label=\"Razón Social\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.social_reason && errors.social_reason ? (\n                          <ErrorMessage name=\"social_reason\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={\n                        touched.social_reason && errors.social_reason\n                          ? true\n                          : false\n                      }\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid item xs={6} sm={6}>\n                    <Field\n                      as={TextField}\n                      disabled={false}\n                      name=\"commercial_conditions\"\n                      type=\"text\"\n                      label=\"Condiciones comerciales\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.commercial_conditions &&\n                        errors.commercial_conditions ? (\n                          <ErrorMessage name=\"commercial_conditions\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={\n                        touched.commercial_conditions &&\n                        errors.commercial_conditions\n                          ? true\n                          : false\n                      }\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid item xs={6} sm={6}>\n                    <Field\n                      as={TextField}\n                      disabled={false}\n                      name=\"country\"\n                      type=\"text\"\n                      label=\"País\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.country && errors.country ? (\n                          <ErrorMessage name=\"country\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={touched.country && errors.country ? true : false}\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid item xs={6} sm={6}>\n                    <Field\n                      as={TextField}\n                      disabled={false}\n                      name=\"postal_code\"\n                      type=\"text\"\n                      label=\"Código postal\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.postal_code && errors.postal_code ? (\n                          <ErrorMessage name=\"postal_code\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={\n                        touched.postal_code && errors.postal_code ? true : false\n                      }\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid item xs={2} sm={2} alignSelf=\"center\">\n                    <Button onClick={(e) => searchCP(values.postal_code)}>\n                      Buscar\n                    </Button>\n                  </Grid>\n                  <Grid item xs={4} sm={4} alignSelf=\"center\"></Grid>\n                  <Grid item xs={4} sm={4} alignSelf=\"center\">\n                    <FormControl variant=\"outlined\" fullWidth>\n                      <InputLabel id=\"estado-label\">Estado</InputLabel>\n                      <Select\n                        labelId=\"estado-label\"\n                        disabled={\n                          type === \"edit\" ||\n                          type === \"view\" ||\n                          states.length == 0\n                            ? true\n                            : false\n                        }\n                        name=\"state\"\n                        type=\"text\"\n                        label=\"Estado\"\n                        fullWidth\n                        value={values.state}\n                        variant=\"outlined\"\n                        error={touched.state && errors.state ? true : false}\n                        onChange={async (e) => {\n                          // const data = await getMunicipalitiesByState(\n                          //   e.target.value as string\n                          // );\n                          // setMunicipalities(\n                          //   data.data.response.municipios.sort()\n                          // );\n                          handleChange(e);\n                        }}\n                      >\n                        {states.map((state) => (\n                          <MenuItem key={state} value={state}>\n                            {state}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  <Grid item xs={4} sm={4} alignSelf=\"center\">\n                    <FormControl variant=\"outlined\" fullWidth>\n                      <InputLabel id=\"municipio-label\">Municipio</InputLabel>\n                      <Select\n                        labelId=\"municipio-label\"\n                        disabled={\n                          type === \"edit\" ||\n                          type === \"view\" ||\n                          municipalities.length == 0\n                            ? true\n                            : false\n                        }\n                        name=\"municipality\"\n                        type=\"text\"\n                        label=\"Municipio\"\n                        fullWidth\n                        value={values.municipality}\n                        variant=\"outlined\"\n                        error={\n                          touched.municipality && errors.municipality\n                            ? true\n                            : false\n                        }\n                        onChange={async (e) => {\n                          // const data = await getColonyByMunicipality(\n                          //   e.target.value as string\n                          // );\n                          // setColonies(data.data.response.colonia.sort());\n                          handleChange(e);\n                        }}\n                      >\n                        {municipalities.map((mun) => (\n                          <MenuItem key={mun} value={mun}>\n                            {mun}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  <Grid item xs={4} sm={4} alignSelf=\"center\">\n                    <FormControl variant=\"outlined\" fullWidth>\n                      <InputLabel id=\"colony-label\">Colonia</InputLabel>\n                      <Select\n                        labelId=\"colony-label\"\n                        disabled={\n                          type === \"edit\" ||\n                          type === \"view\" ||\n                          colonies.length == 0\n                            ? true\n                            : false\n                        }\n                        name=\"colony\"\n                        type=\"text\"\n                        label=\"Colonia\"\n                        fullWidth\n                        value={values.colony}\n                        variant=\"outlined\"\n                        error={touched.colony && errors.colony ? true : false}\n                        onChange={async (e) => {\n                          handleChange(e);\n                        }}\n                      >\n                        {colonies.map((col) => (\n                          <MenuItem key={col} value={col}>\n                            {col}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  <Grid item xs={6} sm={6}>\n                    <Field\n                      as={TextField}\n                      disabled={false}\n                      name=\"city\"\n                      type=\"text\"\n                      label=\"Ciudad\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.city && errors.city ? (\n                          <ErrorMessage name=\"city\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={touched.city && errors.city ? true : false}\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid item xs={6} sm={6}>\n                    <Field\n                      as={TextField}\n                      disabled={false}\n                      name=\"poblation\"\n                      type=\"text\"\n                      label=\"Población\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.poblation && errors.poblation ? (\n                          <ErrorMessage name=\"poblation\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={\n                        touched.poblation && errors.poblation ? true : false\n                      }\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid item xs={6} sm={6}>\n                    <Field\n                      as={TextField}\n                      disabled={false}\n                      name=\"street\"\n                      type=\"text\"\n                      label=\"Calle\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.street && errors.street ? (\n                          <ErrorMessage name=\"street\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={touched.street && errors.street ? true : false}\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid item xs={3} sm={3}>\n                    <Field\n                      as={TextField}\n                      disabled={false}\n                      name=\"exterior_num\"\n                      type=\"text\"\n                      label=\"Número exterior\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.exterior_num && errors.exterior_num ? (\n                          <ErrorMessage name=\"exterior_num\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={\n                        touched.exterior_num && errors.exterior_num\n                          ? true\n                          : false\n                      }\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid item xs={3} sm={3}>\n                    <Field\n                      as={TextField}\n                      disabled={false}\n                      name=\"internal_num\"\n                      type=\"text\"\n                      label=\"Número interior\"\n                      fullWidth\n                      variant=\"outlined\"\n                      margin=\"normal\"\n                      helperText={\n                        touched.internal_num && errors.internal_num ? (\n                          <ErrorMessage name=\"internal_num\" />\n                        ) : (\n                          \"\"\n                        )\n                      }\n                      error={\n                        touched.internal_num && errors.internal_num\n                          ? true\n                          : false\n                      }\n                      onChange={handleChange}\n                    />\n                  </Grid>\n                  <Grid item xs={4} sm={4} alignSelf=\"center\">\n                    <FormControl variant=\"outlined\" fullWidth>\n                      <InputLabel id=\"payment-method-label\">\n                        Método de pago\n                      </InputLabel>\n                      <Select\n                        labelId=\"payment-method-label\"\n                        disabled={false}\n                        name=\"payment_method\"\n                        type=\"text\"\n                        label=\"Método de pago\"\n                        fullWidth\n                        value={values.payment_method}\n                        variant=\"outlined\"\n                        error={\n                          touched.payment_method && errors.payment_method\n                            ? true\n                            : false\n                        }\n                        onChange={async (e) => {\n                          handleChange(e);\n                        }}\n                      >\n                        <MenuItem value={\"Crédito\"}>Crédito</MenuItem>\n                        <MenuItem value={\"Contado\"}>Contado</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                </Grid>\n                <hr />\n                <Grid container spacing={2}>\n                  {values.payment_method == \"Crédito\" ? (\n                    <>\n                      <CreditAdd credits={credits} setCredits={setCredits} />\n                    </>\n                  ) : null}\n                </Grid>\n                <hr />\n                <Grid container spacing={2}>\n                  <DiscountAdd\n                    discounts={discounts}\n                    setDiscounts={setDiscounts}\n                  />\n                </Grid>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleClose} color=\"primary\">\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" color=\"primary\" disabled={isSubmitting}>\n                  Guardar\n                </Button>\n              </DialogActions>\n            </Form>\n          )}\n        </Formik>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default CreateEdit;\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/suppliers/CreditAdd.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/suppliers/DiscountAdd.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/AddChips.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/DragAndDrop.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/DrawerCustom.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/Editor.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/UploadImages.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/brands.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/client.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/productscopy.tsx",["764","765"],[],"import MainLayout from \"@/components/layout/main\";\nimport withAuth from \"./auth\";\n\nconst Products = () => {\n  return (\n    <>\n      <MainLayout>\n        <div className=\"content__header content__boxed overlapping\">\n          <div className=\"content__wrap\">\n            <div className=\"content__header content__boxed overlapping\">\n              <div className=\"content__wrap\">\n                {/* Breadcrumb */}\n                <nav aria-label=\"breadcrumb\">\n                  <ol className=\"mb-0\" style={{ margin: 0, padding: 0 }}>\n                    <li\n                      className=\"breadcrumb-item active font\"\n                      style={{ listStyle: \"none\" }}\n                      aria-current=\"page\"\n                    >\n                      Producto\n                    </li>\n                  </ol>\n                </nav>\n                {/* END : Breadcrumb */}\n                <h1 className=\"page-title mb-0 mt-2 font\">\n                  Dar de alta producto\n                </h1>\n                <div className=\"content__boxed\">\n                  <div className=\"card\">\n                    {/* Custom style form wizard */}\n                    <div className=\"d-md-flex align-content-stretch\">\n                      <div className=\"card-body flex-fill ms-md-4\">\n                        {/* Step progress */}\n                        <nav\n                          id=\"_dm-customWizardSteps\"\n                          className=\"nav nav-callout justify-content-center flex-nowrap mt-3 mb-3\"\n                        >\n                          <a\n                            href=\"#\"\n                            className=\"nav-link active\"\n                            data-step=\"account\"\n                          >\n                            <i className=\"d-block pli-information fs-2 mb-2\" />\n                            <span>Producto</span>\n                          </a>\n                          <a href=\"#\" className=\"nav-link\" data-step=\"profile\">\n                            <i className=\"d-block pli-male fs-2 mb-2\" />\n                            <span>Datos comerciales</span>\n                          </a>\n                          <a href=\"#\" className=\"nav-link\" data-step=\"finish\">\n                            <i className=\"d-block pli-medal-2 fs-2 mb-2\" />\n                            <span>Registrado</span>\n                          </a>\n                        </nav>\n                        {/* END : Step progress */}\n                        {/* Form sections */}\n                        <form id=\"_dm-customWizardForm\" className=\"p-xl-3\">\n                          {/* Account section */}\n                          <section data-step=\"account\">\n                            <div className=\"row mb-3\">\n                              <div className=\"col-md-6\">\n                                <label\n                                  htmlFor=\"_dm-inputCity\"\n                                  className=\"form-label\"\n                                >\n                                  SKU\n                                </label>\n                                <input\n                                  id=\"_dm-inputCity\"\n                                  type=\"text\"\n                                  disabled={false}\n                                  defaultValue=\"1AS123ADS\"\n                                  className=\"form-control\"\n                                />\n                              </div>\n                              <div className=\"col-md-6\">\n                                <label\n                                  htmlFor=\"_dm-inputCity\"\n                                  className=\"form-label\"\n                                >\n                                  Código de barras\n                                </label>\n                                <input\n                                  id=\"_dm-inputCity\"\n                                  type=\"text\"\n                                  className=\"form-control\"\n                                />\n                              </div>\n                            </div>\n                            <div className=\"col-md-6\"></div>\n                            <div className=\"row mb-3\">\n                              <div className=\"col-md-12 mb-3\">\n                                <label\n                                  htmlFor=\"_dm-disabledTextareaInput\"\n                                  className=\"col-form-label\"\n                                >\n                                  Descripción\n                                </label>\n                                <textarea\n                                  id=\"_dm-blankEditor\"\n                                  style={{ display: \"none\" }}\n                                  defaultValue={\"\"}\n                                />\n                              </div>\n                            </div>\n                            <div className=\"row mb-3\">\n                              <div className=\"col-md-4\">\n                                <label\n                                  htmlFor=\"_dm-inputPassword2\"\n                                  className=\"form-label\"\n                                >\n                                  Modelo\n                                </label>\n                                <input\n                                  id=\"_dm-inputPassword2\"\n                                  type=\"text\"\n                                  className=\"form-control\"\n                                />\n                              </div>\n                              <div className=\"col-4\">\n                                <label\n                                  htmlFor=\"_dm-inputAddress\"\n                                  className=\"form-label\"\n                                >\n                                  Descuento máximo\n                                </label>\n                                <input\n                                  id=\"_dm-inputAddress\"\n                                  type=\"number\"\n                                  min={0}\n                                  step=\"0.1\"\n                                  className=\"form-control\"\n                                />\n                              </div>\n                              <div className=\"col-4\">\n                                <label\n                                  htmlFor=\"_dm-inputAddress2\"\n                                  className=\"form-label\"\n                                >\n                                  % IVA\n                                </label>\n                                <input\n                                  id=\"_dm-inputAddress2\"\n                                  type=\"number\"\n                                  min={0}\n                                  step=\"0.1\"\n                                  className=\"form-control\"\n                                />\n                              </div>\n                            </div>\n                            <div className=\"row mb-3\">\n                              <div className=\"col-md-4\">\n                                <div className=\"form-group\">\n                                  <label htmlFor=\"codigo_sat\">\n                                    Código SAT:\n                                  </label>\n                                  <select\n                                    className=\"form-select\"\n                                    id=\"codigo_sat\"\n                                    name=\"codigo_sat\"\n                                  >\n                                    <option value={30201800} selected={false}>\n                                      Selecciona\n                                    </option>\n                                    <option value={30201800}>\n                                      30201800 - Instrumentos de percusión\n                                    </option>\n                                    <option value={30201900}>\n                                      30201900 - Instrumentos de cuerda frotada\n                                    </option>\n                                    <option value={30202000}>\n                                      30202000 - Instrumentos de viento madera\n                                    </option>\n                                    <option value={30202100}>\n                                      30202100 - Instrumentos de viento metal\n                                    </option>\n                                    <option value={30202200}>\n                                      30202200 - Instrumentos de teclado\n                                    </option>\n                                    <option value={30202300}>\n                                      30202300 - Instrumentos electrónicos de\n                                      música\n                                    </option>\n                                  </select>\n                                </div>\n                              </div>\n                              <div className=\"col-md-4\">\n                                <label\n                                  htmlFor=\"inputState\"\n                                  className=\"form-label\"\n                                >\n                                  Categorías\n                                </label>\n                                <select id=\"inputState\" className=\"form-select\">\n                                  <option selected={false}>Elegir...</option>\n                                  <option>Baterías</option>\n                                  <option>Guitarras</option>\n                                </select>\n                              </div>\n                              <div className=\"col-md-4\">\n                                <label\n                                  htmlFor=\"inputState\"\n                                  className=\"form-label\"\n                                >\n                                  Familias\n                                </label>\n                                <select id=\"familias\" className=\"form-select\">\n                                  <option selected={false}>Elegir...</option>\n                                  <option value=\"familia1\">Familia 1</option>\n                                  <option value=\"familia2\">Familia 2</option>\n                                </select>\n                              </div>\n                              <div\n                                className=\"col-md-12 row p-4\"\n                                id=\"familia1\"\n                                style={{ display: \"none\" }}\n                              >\n                                <h5\n                                  className=\"mb-3\"\n                                  style={{ color: \"rgb(95, 95, 95)\" }}\n                                >\n                                  Atributos\n                                </h5>\n                                <div className=\"col-md-3\">\n                                  <label\n                                    htmlFor=\"_dm-inputPassword2\"\n                                    className=\"form-label\"\n                                  >\n                                    Cantidad de cuerdas\n                                  </label>\n                                  <input\n                                    id=\"_dm-inputPassword2\"\n                                    type=\"number\"\n                                    className=\"form-control\"\n                                  />\n                                </div>\n                                <div className=\"col-md-3\">\n                                  <label\n                                    htmlFor=\"_dm-inputPassword2\"\n                                    className=\"form-label\"\n                                  >\n                                    Marca\n                                  </label>\n                                  <input\n                                    id=\"_dm-inputPassword2\"\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                  />\n                                </div>\n                                <div className=\"col-md-3\">\n                                  <label\n                                    htmlFor=\"_dm-inputPassword2\"\n                                    className=\"form-label\"\n                                  >\n                                    Color\n                                  </label>\n                                  <input\n                                    id=\"_dm-inputPassword2\"\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                  />\n                                </div>\n                              </div>\n                              <div\n                                className=\"col-md-12 row p-4\"\n                                id=\"familia2\"\n                                style={{ display: \"none\" }}\n                              >\n                                <h5\n                                  className=\"mb-3\"\n                                  style={{ color: \"rgb(95, 95, 95)\" }}\n                                >\n                                  Atributos\n                                </h5>\n                                <div className=\"col-md-4\">\n                                  <label\n                                    htmlFor=\"_dm-inputPassword2\"\n                                    className=\"form-label\"\n                                  >\n                                    Marca\n                                  </label>\n                                  <input\n                                    id=\"_dm-inputPassword2\"\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                  />\n                                </div>\n                                <div className=\"col-md-4\">\n                                  <label\n                                    htmlFor=\"_dm-inputPassword2\"\n                                    className=\"form-label\"\n                                  >\n                                    Color\n                                  </label>\n                                  <input\n                                    id=\"_dm-inputPassword2\"\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                  />\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"row mb-3\">\n                              <div className=\"col-md-6\">\n                                <label\n                                  htmlFor=\"_dm-inputCity\"\n                                  className=\"form-label\"\n                                >\n                                  Código proveedor\n                                </label>\n                                <input\n                                  id=\"_dm-inputCity\"\n                                  type=\"text\"\n                                  className=\"form-control\"\n                                />\n                              </div>\n                              <div className=\"col-md-6\">\n                                <label\n                                  htmlFor=\"inputState\"\n                                  className=\"form-label\"\n                                >\n                                  Proveedor\n                                </label>\n                                <select id=\"inputState\" className=\"form-select\">\n                                  <option selected={false}>Elegir...</option>\n                                  <option>Proveedor 1</option>\n                                  <option>Proveedor 2</option>\n                                </select>\n                              </div>\n                            </div>\n                            <div className=\"row mb-3\">\n                              <div className=\"col-md-6\">\n                                <label\n                                  htmlFor=\"inputState\"\n                                  className=\"form-label\"\n                                >\n                                  Marca\n                                </label>\n                                <select id=\"inputState\" className=\"form-select\">\n                                  <option selected={false}>Elegir...</option>\n                                  <option>Fender</option>\n                                  <option>Yamaha</option>\n                                </select>\n                              </div>\n                              <div className=\"col-md-6\">\n                                <label\n                                  htmlFor=\"inputState\"\n                                  className=\"form-label\"\n                                >\n                                  Unidad de medida\n                                </label>\n                                <select id=\"inputState\" className=\"form-select\">\n                                  <option selected={false}>Elegir...</option>\n                                  <option value=\"UNIDAD\">\n                                    Unidad de Medida (UNIDAD)\n                                  </option>\n                                  <option value=\"US\">\n                                    Unidad de Servicio (US)\n                                  </option>\n                                  <option value=\"KG\">Kilogramo (KG)</option>\n                                  <option value=\"MT\">Metro (MT)</option>\n                                  <option value=\"MT2\">\n                                    Metro Cuadrado (MT2)\n                                  </option>\n                                  <option value=\"MT3\">\n                                    Metro Cúbico (MT3)\n                                  </option>\n                                  <option value=\"PZA\">Pieza (PZA)</option>\n                                  <option value=\"LTR\">Litro (LTR)</option>\n                                  <option value=\"PAR\">Par (PAR)</option>\n                                  <option value=\"TNE\">Tonelada (TNE)</option>\n                                  <option value=\"JGO\">Juego (JGO)</option>\n                                  <option value=\"DZ\">Docena (DZ)</option>\n                                  <option value=\"SRV\">Servicio (SRV)</option>\n                                  <option value=\"KIT\">Kit (KIT)</option>\n                                  <option value=\"MLL\">Millar (MLL)</option>\n                                  <option value=\"KTM\">Kilómetro (KTM)</option>\n                                  <option value=\"GRM\">Gramo (GRM)</option>\n                                  <option value=\"MLT\">Mililitro (MLT)</option>\n                                  <option value=\"MTR\">\n                                    Metro Lineal (MTR)\n                                  </option>\n                                  <option value=\"M2C\">\n                                    Metro Cuadrado de Construcción (M2C)\n                                  </option>\n                                  <option value=\"CMT\">Centímetro (CMT)</option>\n                                  <option value=\"BOL\">Bolsa (BOL)</option>\n                                  <option value=\"CJA\">Caja (CJA)</option>\n                                  <option value=\"DZP\">\n                                    Docena de Pares (DZP)\n                                  </option>\n                                  <option value=\"CEN\">Ciento (CEN)</option>\n                                  <option value=\"KGM\">\n                                    Kilo Newton Metro (KGM)\n                                  </option>\n                                  <option value=\"FT2\">\n                                    Pies Cuadrados (FT2)\n                                  </option>\n                                  <option value=\"FT3\">\n                                    Pies Cúbicos (FT3)\n                                  </option>\n                                  <option value=\"DEC\">Decena (DEC)</option>\n                                  <option value=\"HAR\">Hectárea (HAR)</option>\n                                  <option value=\"MI\">Milla (MI)</option>\n                                  <option value=\"OTR\">Otra (OTR)</option>\n                                </select>\n                              </div>\n                            </div>\n                            <div className=\"row mb-3\">\n                              <div className=\"col-3\">\n                                <label\n                                  htmlFor=\"_dm-inputAddress2\"\n                                  className=\"form-label\"\n                                >\n                                  Alto\n                                </label>\n                                <div className=\"input-group mb-3\">\n                                  <input\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    className=\"form-control\"\n                                  />\n                                  <span\n                                    className=\"input-group-text\"\n                                    style={{ height: 32 }}\n                                  >\n                                    Metros\n                                  </span>\n                                </div>\n                              </div>\n                              <div className=\"col-3\">\n                                <label\n                                  htmlFor=\"_dm-inputAddress2\"\n                                  className=\"form-label\"\n                                >\n                                  Ancho\n                                </label>\n                                <div className=\"input-group mb-3\">\n                                  <input\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    className=\"form-control\"\n                                  />\n                                  <span\n                                    className=\"input-group-text\"\n                                    style={{ height: 32 }}\n                                  >\n                                    Metros\n                                  </span>\n                                </div>\n                              </div>\n                              <div className=\"col-3\">\n                                <label\n                                  htmlFor=\"_dm-inputAddress2\"\n                                  className=\"form-label\"\n                                >\n                                  Largo\n                                </label>\n                                <div className=\"input-group mb-3\">\n                                  <input\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    className=\"form-control\"\n                                  />\n                                  <span\n                                    className=\"input-group-text\"\n                                    style={{ height: 32 }}\n                                  >\n                                    Metros\n                                  </span>\n                                </div>\n                              </div>\n                              <div className=\"col-md-3\">\n                                <label\n                                  htmlFor=\"_dm-inputAddress2\"\n                                  className=\"form-label\"\n                                >\n                                  Peso\n                                </label>\n                                <div className=\"input-group mb-3\">\n                                  <input\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    className=\"form-control\"\n                                  />\n                                  <span\n                                    className=\"input-group-text\"\n                                    style={{ height: 32 }}\n                                  >\n                                    Kilos\n                                  </span>\n                                </div>\n                              </div>\n                              <h5\n                                className=\"mt-4\"\n                                style={{ color: \"rgb(95, 95, 95)\" }}\n                              >\n                                Cajas\n                              </h5>\n                              <hr />\n                              <div className=\"row col-md-12 d-flex align-items-center\">\n                                <div className=\"col-4\">\n                                  <label\n                                    htmlFor=\"_dm-inputAddress2\"\n                                    className=\"form-label\"\n                                  >\n                                    Alto\n                                  </label>\n                                  <div className=\"input-group mb-3\">\n                                    <input\n                                      type=\"number\"\n                                      min={0}\n                                      step=\"0.1\"\n                                      className=\"form-control\"\n                                    />\n                                    <span\n                                      className=\"input-group-text\"\n                                      style={{ height: 32 }}\n                                    >\n                                      Metros\n                                    </span>\n                                  </div>\n                                </div>\n                                <div className=\"col-3\">\n                                  <label\n                                    htmlFor=\"_dm-inputAddress2\"\n                                    className=\"form-label\"\n                                  >\n                                    Ancho\n                                  </label>\n                                  <div className=\"input-group mb-3\">\n                                    <input\n                                      type=\"number\"\n                                      min={0}\n                                      step=\"0.1\"\n                                      className=\"form-control\"\n                                    />\n                                    <span\n                                      className=\"input-group-text\"\n                                      style={{ height: 32 }}\n                                    >\n                                      Metros\n                                    </span>\n                                  </div>\n                                </div>\n                                <div className=\"col-3\">\n                                  <label\n                                    htmlFor=\"_dm-inputAddress2\"\n                                    className=\"form-label\"\n                                  >\n                                    Largo\n                                  </label>\n                                  <div className=\"input-group mb-3\">\n                                    <input\n                                      type=\"number\"\n                                      min={0}\n                                      step=\"0.1\"\n                                      className=\"form-control\"\n                                    />\n                                    <span\n                                      className=\"input-group-text\"\n                                      style={{ height: 32 }}\n                                    >\n                                      Metros\n                                    </span>\n                                  </div>\n                                </div>\n                                <div className=\"col-2\">\n                                  <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary ms-auto\"\n                                  >\n                                    Agregar caja\n                                  </button>\n                                </div>\n                                <p>Cajas agregadas:</p>\n                                <div className=\"ms-4\">\n                                  <div className=\"container text-center\">\n                                    <div className=\"row d-flex\">\n                                      <div className=\"card bg-primary text-white col-3 me-4\">\n                                        <h5 className=\"card-header\">Caja 1</h5>\n                                        <div className=\"card-body\">\n                                          <p>1 mtrs X 3mtrs X 4 mtrs</p>\n                                        </div>\n                                      </div>\n                                      <div className=\"card bg-primary text-white col-3\">\n                                        <h5 className=\"card-header\">Caja 2</h5>\n                                        <div className=\"card-body\">\n                                          <p>1 mtrs X 3mtrs X 4 mtrs</p>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                              <hr className=\"mb-5 mt-3\" />\n                              <div className=\"col-md-12\">\n                                <label\n                                  htmlFor=\"inputState\"\n                                  className=\"form-label\"\n                                >\n                                  Tipo de producto\n                                </label>\n                                <select id=\"inputState\" className=\"form-select\">\n                                  <option selected={false}>Elegir...</option>\n                                  <option>Producto físico</option>\n                                  <option>Servicio</option>\n                                  <option>Producto digital</option>\n                                </select>\n                              </div>\n                              <div className=\"col-md-12 row mb-1 mt-5 d-flex align-items-center\">\n                                <h4\n                                  className=\"col-5\"\n                                  style={{ color: \"rgb(95, 95, 95)\" }}\n                                >\n                                  Variantes\n                                </h4>\n                                <div className=\"col-3\">\n                                  <button\n                                    type=\"button\"\n                                    data-bs-toggle=\"modal\"\n                                    data-bs-target=\"#exampleModal\"\n                                    className=\"btn btn-outline-primary  ms-auto\"\n                                  >\n                                    Agregar opción +\n                                  </button>\n                                </div>\n                              </div>\n                              <div className=\"col-md-11 row mb-2\">\n                                <div className=\"table-responsove mt-1\">\n                                  <table className=\"table \">\n                                    <thead>\n                                      <tr>\n                                        <th\n                                          style={{\n                                            borderBottom:\n                                              \"1px solid rgb(215, 215, 215)\",\n                                          }}\n                                        >\n                                          Opcion\n                                        </th>\n                                        <th\n                                          style={{\n                                            borderBottom:\n                                              \"1px solid rgb(215, 215, 215)\",\n                                          }}\n                                        />\n                                      </tr>\n                                    </thead>\n                                    <tbody>\n                                      <tr>\n                                        <td style={{ width: \"60%\" }}>\n                                          <div className=\"row\">\n                                            <div className=\"col-md-2\">\n                                              <p className=\"mt-1\">Color</p>\n                                            </div>\n                                            <div className=\"col-md-10\">\n                                              <p className=\"mt-1\">\n                                                Negro, Rojo\n                                              </p>\n                                            </div>\n                                          </div>\n                                        </td>\n                                        <td style={{ width: \"10%\" }}>\n                                          <button\n                                            type=\"button\"\n                                            className=\"btn btn-danger ms-auto\"\n                                          >\n                                            Quitar\n                                          </button>\n                                        </td>\n                                      </tr>\n                                      <tr>\n                                        <td style={{ width: \"60%\" }}>\n                                          <div className=\"row\">\n                                            <div className=\"col-md-2\">\n                                              <p>Diapasón</p>\n                                            </div>\n                                            <div className=\"col-md-10\">\n                                              <p className=\"mt-1\">Maple</p>\n                                            </div>\n                                          </div>\n                                        </td>\n                                        <td style={{ width: \"10%\" }}>\n                                          <button\n                                            type=\"button\"\n                                            className=\"btn btn-danger ms-auto\"\n                                          >\n                                            Quitar\n                                          </button>\n                                        </td>\n                                      </tr>\n                                    </tbody>\n                                  </table>\n                                </div>\n                              </div>\n                              <div className=\"col-md-11 row mb-4\">\n                                <div className=\"table-responsove mt-1\">\n                                  <table className=\"table \">\n                                    <thead>\n                                      <tr>\n                                        <th\n                                          style={{\n                                            borderBottom:\n                                              \"1px solid rgb(215, 215, 215)\",\n                                          }}\n                                        >\n                                          <div className=\"form-check d-flex justify-content-center \">\n                                            <input\n                                              id=\"status\"\n                                              className=\"form-check-input\"\n                                              type=\"checkbox\"\n                                            />\n                                          </div>\n                                        </th>\n                                        <th\n                                          style={{\n                                            borderBottom:\n                                              \"1px solid rgb(215, 215, 215)\",\n                                          }}\n                                        >\n                                          Se muestran 3 variantes\n                                        </th>\n                                        <th\n                                          style={{\n                                            borderBottom:\n                                              \"1px solid rgb(215, 215, 215)\",\n                                          }}\n                                        />\n                                      </tr>\n                                    </thead>\n                                    <tbody>\n                                      <tr>\n                                        <td style={{ width: \"10%\" }}>\n                                          <div className=\"form-check d-flex justify-content-center \">\n                                            <input\n                                              id=\"status\"\n                                              className=\"form-check-input\"\n                                              type=\"checkbox\"\n                                            />\n                                          </div>\n                                        </td>\n                                        <td style={{ width: \"70%\" }}>\n                                          <div className=\"row\">\n                                            <div className=\"col-md-2\">\n                                              <img\n                                                height=\"50px\"\n                                                src=\"https://cdn.shopify.com/s/files/1/1468/2844/products/0145212506_gtr_cntbdyright_001_nr_1024x1024.png?v=1595978400\"\n                                                alt=\"\"\n                                              />\n                                            </div>\n                                            <div className=\"col-md-10\">\n                                              <p\n                                                className=\"mt-1\"\n                                                style={{ fontWeight: \"bold\" }}\n                                              >\n                                                Negro/Maple\n                                              </p>\n                                              <p>1042651</p>\n                                            </div>\n                                          </div>\n                                        </td>\n                                        <td style={{ width: \"20%\" }}>\n                                          <p>$3,100.00</p>\n                                          <p>0 disponible en 1 sucursal</p>\n                                        </td>\n                                      </tr>\n                                      <tr>\n                                        <td style={{ width: \"10%\" }}>\n                                          <div className=\"form-check d-flex justify-content-center \">\n                                            <input\n                                              id=\"status\"\n                                              className=\"form-check-input\"\n                                              type=\"checkbox\"\n                                            />\n                                          </div>\n                                        </td>\n                                        <td style={{ width: \"70%\" }}>\n                                          <div className=\"row\">\n                                            <div className=\"col-md-2\">\n                                              <img\n                                                height=\"50px\"\n                                                src=\"https://cdn.shopify.com/s/files/1/0061/8984/2496/products/8203316_3_1500x.jpg?v=1631985012\"\n                                                alt=\"\"\n                                              />\n                                            </div>\n                                            <div className=\"col-md-10\">\n                                              <p\n                                                className=\"mt-1\"\n                                                style={{ fontWeight: \"bold\" }}\n                                              >\n                                                Rojo/Maple\n                                              </p>\n                                              <p>1042651</p>\n                                            </div>\n                                          </div>\n                                        </td>\n                                        <td style={{ width: \"20%\" }}>\n                                          <p>$3,100.00</p>\n                                          <p>0 disponible en 1 sucursal</p>\n                                        </td>\n                                      </tr>\n                                    </tbody>\n                                  </table>\n                                </div>\n                              </div>\n                              <div className=\"col-md-6 mt-6 mt-3\">\n                                <label\n                                  htmlFor=\"_dm-inputCity\"\n                                  className=\"form-label\"\n                                >\n                                  URL video Youtube\n                                </label>\n                                <input\n                                  id=\"_dm-inputCity\"\n                                  type=\"text\"\n                                  className=\"form-control\"\n                                />\n                              </div>\n                              <div className=\"col-md-12 mt-3 me-5\">\n                                <label\n                                  htmlFor=\"inputState\"\n                                  className=\"form-label\"\n                                >\n                                  Etiquetas\n                                </label>\n                                <select\n                                  className=\"form-select\"\n                                  name=\"tagsClear[]\"\n                                  data-allow-new=\"true\"\n                                  data-allow-clear=\"true\"\n                                >\n                                  <option value={1}>Admin</option>\n                                  <option value={2}>Template</option>\n                                  <option value={3} selected={false}>\n                                    Etiqueta 1\n                                  </option>\n                                  <option value={4}>Ejemplo</option>\n                                  <option value={5}>Responsive</option>\n                                  <option value={6}>Cuerdas</option>\n                                  <option value={7}>Bateria</option>\n                                  <option value={8}>Guitarra</option>\n                                </select>\n                              </div>\n                              <div className=\"col-md-5 mt-4 me-5\">\n                                <label\n                                  htmlFor=\"inputState\"\n                                  className=\"form-label\"\n                                >\n                                  Estado\n                                </label>\n                                <div className=\"form-check mt-2 \">\n                                  <input\n                                    id=\"status\"\n                                    className=\"form-check-input\"\n                                    type=\"checkbox\"\n                                  />\n                                  <label\n                                    id=\"activo\"\n                                    htmlFor=\"activo\"\n                                    className=\"form-check-label\"\n                                  >\n                                    Activo\n                                  </label>\n                                  <label\n                                    id=\"inactivo\"\n                                    htmlFor=\"inactivo\"\n                                    className=\"form-check-label\"\n                                    style={{ display: \"none\" }}\n                                  >\n                                    Inactivo\n                                  </label>\n                                </div>\n                              </div>\n                              <div className=\"row mb-4 \">\n                                <label\n                                  htmlFor=\"_dm-inputCity\"\n                                  className=\"mt-5 form-label\"\n                                >\n                                  Canales de venta{\" \"}\n                                </label>\n                                <div className=\"col-sm-2\">\n                                  <div className=\"form-check \">\n                                    <input\n                                      id=\"status\"\n                                      className=\"form-check-input\"\n                                      type=\"checkbox\"\n                                    />\n                                    <label\n                                      id=\"linea\"\n                                      htmlFor=\"linea\"\n                                      className=\"form-check-label\"\n                                    >\n                                      En linea\n                                    </label>\n                                  </div>\n                                </div>\n                                <div className=\"col-sm-2\">\n                                  <div className=\"form-check \">\n                                    <input\n                                      id=\"status\"\n                                      className=\"form-check-input\"\n                                      type=\"checkbox\"\n                                    />\n                                    <label\n                                      id=\"fisico\"\n                                      htmlFor=\"fisico\"\n                                      className=\"form-check-label\"\n                                    >\n                                      Fisico\n                                    </label>\n                                  </div>\n                                </div>\n                              </div>\n                              <div className=\"col-md-12\">\n                                <label\n                                  htmlFor=\"_dm-inputCity\"\n                                  className=\"form-label\"\n                                >\n                                  Productos relacionados{\" \"}\n                                </label>\n                                <select\n                                  className=\"form-select\"\n                                  id=\"validationTags\"\n                                  name=\"tags_show[]\"\n                                  data-show-all-suggestions=\"true\"\n                                  data-allow-clear=\"true\"\n                                >\n                                  <option\n                                    selected={false}\n                                    disabled={false}\n                                    hidden={false}\n                                    value=\"\"\n                                  >\n                                    Escribe el producto...\n                                  </option>\n                                  <option value={1} selected={false}>\n                                    Guitarra electrica{\" \"}\n                                  </option>\n                                  <option value={2}>Bateria </option>\n                                  <option value={3}>Pandero </option>\n                                  <option value={4}>Cuerdas</option>\n                                  <option value={5}> Trompeta</option>\n                                </select>\n                                <div className=\"invalid-feedback\">\n                                  Please select a valid tag.\n                                </div>\n                              </div>\n                              <h5\n                                className=\"card-title mb-4 mt-4\"\n                                style={{ color: \"rgb(95, 95, 95)\" }}\n                              >\n                                SEO\n                              </h5>\n                              <div className=\"col-md-12\">\n                                <label\n                                  htmlFor=\"_dm-inputCity\"\n                                  className=\"form-label\"\n                                >\n                                  Titulo\n                                </label>\n                                <input\n                                  id=\"_dm-inputCity\"\n                                  type=\"text\"\n                                  className=\"form-control\"\n                                  defaultValue=\"Titulo Ejemplo\"\n                                />\n                              </div>\n                              <div className=\"col-md-12 mt-3\">\n                                <label\n                                  htmlFor=\"_dm-inputCity\"\n                                  className=\"form-label\"\n                                >\n                                  Meta descripción\n                                </label>\n                                <textarea\n                                  className=\"form-control\"\n                                  placeholder=\"descripción\"\n                                  rows={5}\n                                  defaultValue={\"\"}\n                                />\n                              </div>\n                              <div className=\"col-md-12 mt-3\">\n                                <label\n                                  htmlFor=\"_dm-inputCity\"\n                                  className=\"form-label\"\n                                >\n                                  URL{\" \"}\n                                </label>\n                                <input\n                                  id=\"_dm-inputCity\"\n                                  type=\"text\"\n                                  className=\"form-control\"\n                                  defaultValue=\"https://www.google.com/titulo-ejemplo\"\n                                />\n                              </div>\n                            </div>\n                            <div className=\"col-12\">\n                              <div className=\"dropzone bg-light text-center rounded p-5\">\n                                <div className=\"dz-message m-0\">\n                                  <div className=\"p-3 text-muted text-opacity-25\">\n                                    <i className=\"demo-psi-upload-to-cloud display-2\" />\n                                  </div>\n                                  <h4>Agregue las imágenes del producto</h4>\n                                  <p className=\"text-muted mb-0\">\n                                    or dé click para agregar manualmente\n                                  </p>\n                                </div>\n                              </div>\n                              <div\n                                className=\"fallback\"\n                                style={{ display: \"none\" }}\n                              >\n                                <input name=\"file\" type=\"file\" />\n                              </div>\n                            </div>\n                            <div className=\"pt-3 d-flex\">\n                              <button\n                                data-next=\"\"\n                                className=\"btn btn-primary ms-auto\"\n                              >\n                                Siguiente\n                              </button>\n                            </div>\n                          </section>\n                          {/* END : Account section */}\n                          {/* Profile section */}\n                          <section data-step=\"profile\">\n                            <div className=\"row g-3\">\n                              <h5 style={{ color: \"rgb(95, 95, 95)\" }}>\n                                Costos\n                              </h5>\n                              <div className=\"col-6\">\n                                <label\n                                  htmlFor=\"_dm-inputAddress2\"\n                                  className=\"form-label\"\n                                >\n                                  Último costo\n                                </label>\n                                <div className=\"input-group mb-3\">\n                                  <span\n                                    className=\"input-group-text\"\n                                    style={{ height: 32 }}\n                                  >\n                                    $\n                                  </span>\n                                  <input\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    className=\"form-control\"\n                                  />\n                                </div>\n                              </div>\n                              <div className=\"col-6\">\n                                <label\n                                  htmlFor=\"_dm-inputAddress2\"\n                                  className=\"form-label\"\n                                >\n                                  Costo promedio\n                                </label>\n                                <div className=\"input-group mb-3\">\n                                  <span\n                                    className=\"input-group-text\"\n                                    style={{ height: 32 }}\n                                  >\n                                    $\n                                  </span>\n                                  <input\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    className=\"form-control\"\n                                  />\n                                </div>\n                              </div>\n                              <h5 style={{ color: \"rgb(95, 95, 95)\" }}>\n                                Precios\n                              </h5>\n                              <hr />\n                              <div className=\"col-6\">\n                                <label\n                                  htmlFor=\"_dm-inputAddress2\"\n                                  className=\"form-label\"\n                                >\n                                  Precio Base(retail)\n                                </label>\n                                <div className=\"input-group mb-3\">\n                                  <span\n                                    className=\"input-group-text\"\n                                    style={{ height: 32 }}\n                                  >\n                                    $\n                                  </span>\n                                  <input\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    className=\"form-control\"\n                                  />\n                                </div>\n                              </div>\n                              <div className=\"row col-md-12\">\n                                <div className=\"col-6\">\n                                  <label\n                                    htmlFor=\"_dm-inputAddress2\"\n                                    className=\"form-label\"\n                                  >\n                                    Cliente\n                                  </label>\n                                </div>\n                                <div className=\"col-6\">\n                                  <label\n                                    htmlFor=\"_dm-inputAddress2\"\n                                    className=\"form-label\"\n                                  >\n                                    Procentaje descuento\n                                  </label>\n                                </div>\n                              </div>\n                              <div className=\"row col-md-12\">\n                                <div className=\"col-6\">\n                                  <input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    defaultValue=\"Con acuerdo escolar\"\n                                    disabled={false}\n                                  />\n                                </div>\n                                <div className=\"col-6\">\n                                  <div className=\"input-group mb-3\">\n                                    <input\n                                      type=\"number\"\n                                      min={0}\n                                      step=\"0.1\"\n                                      className=\"form-control\"\n                                    />\n                                    <span\n                                      className=\"input-group-text\"\n                                      style={{ height: 32 }}\n                                    >\n                                      %\n                                    </span>\n                                  </div>\n                                </div>\n                                <div className=\"col-6\">\n                                  <input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    defaultValue=\"Revendedor\"\n                                    disabled={false}\n                                  />\n                                </div>\n                                <div className=\"col-6\">\n                                  <div className=\"input-group mb-3\">\n                                    <input\n                                      type=\"number\"\n                                      min={0}\n                                      step=\"0.1\"\n                                      className=\"form-control\"\n                                    />\n                                    <span\n                                      className=\"input-group-text\"\n                                      style={{ height: 32 }}\n                                    >\n                                      %\n                                    </span>\n                                  </div>\n                                </div>\n                                <div className=\"col-6\">\n                                  <input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    defaultValue=\"Subdistribudor\"\n                                    disabled={false}\n                                  />\n                                </div>\n                                <div className=\"col-6\">\n                                  <div className=\"input-group mb-3\">\n                                    <input\n                                      type=\"number\"\n                                      min={0}\n                                      step=\"0.1\"\n                                      className=\"form-control\"\n                                    />\n                                    <span\n                                      className=\"input-group-text\"\n                                      style={{ height: 32 }}\n                                    >\n                                      %\n                                    </span>\n                                  </div>\n                                </div>\n                              </div>\n                              <hr className=\"mb-4\" />\n                              <div className=\"col-md-6\">\n                                <label\n                                  htmlFor=\"_dm-inputAddress2\"\n                                  className=\"form-label\"\n                                >\n                                  Cantidad mínima en inventario\n                                </label>\n                                <div className=\"input-group mb-3\">\n                                  <input\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    className=\"form-control\"\n                                  />\n                                  <span\n                                    className=\"input-group-text\"\n                                    style={{ height: 32 }}\n                                  >\n                                    Unidades\n                                  </span>\n                                </div>\n                              </div>\n                              <div className=\"col-md-6\">\n                                <label\n                                  htmlFor=\"_dm-inputAddress2\"\n                                  className=\"form-label\"\n                                >\n                                  Cantidad Máxima en inventario\n                                </label>\n                                <div className=\"input-group mb-3\">\n                                  <input\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    className=\"form-control\"\n                                  />\n                                  <span\n                                    style={{ height: 32 }}\n                                    className=\"input-group-text\"\n                                  >\n                                    Unidades\n                                  </span>\n                                </div>\n                              </div>\n                              <div className=\"col-md-6\">\n                                <label\n                                  htmlFor=\"inputState\"\n                                  className=\"form-label\"\n                                >\n                                  Divisa\n                                </label>\n                                <select id=\"inputState\" className=\"form-select\">\n                                  <option selected={false}>Elegir...</option>\n                                  <option>Peso (MXN)</option>\n                                  <option>Dólar (USD)</option>\n                                </select>\n                              </div>\n                              <div className=\"col-md-6\">\n                                <label\n                                  htmlFor=\"_dm-inputAddress2\"\n                                  className=\"form-label\"\n                                >\n                                  Bonificación en monedero\n                                </label>\n                                <div className=\"input-group mb-3\">\n                                  <input\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    className=\"form-control\"\n                                  />\n                                  <span\n                                    style={{ height: 32 }}\n                                    className=\"input-group-text\"\n                                  >\n                                    %\n                                  </span>\n                                </div>\n                              </div>\n                              <div className=\"col-md-6\"></div>\n                              <p className=\"fs-6 text\">Usar costo</p>\n                              <div className=\"col-md-2\">\n                                <label\n                                  htmlFor=\"inputState\"\n                                  className=\"form-label\"\n                                >\n                                  Último\n                                </label>\n                                <input type=\"radio\" name=\"cost\" />\n                              </div>\n                              <div className=\"col-md-2\">\n                                <label\n                                  htmlFor=\"inputState\"\n                                  className=\"form-label\"\n                                >\n                                  Promedio\n                                </label>\n                                <input type=\"radio\" name=\"cost\" />\n                              </div>\n                              <div className=\"row mt-4\">\n                                <div className=\"col-md-6\">\n                                  <div className=\"form-check mb-2 ps-4 ms-1\">\n                                    <input\n                                      id=\"_dm-active\"\n                                      className=\"form-check-input\"\n                                      type=\"checkbox\"\n                                    />\n                                    <label\n                                      htmlFor=\"_dm-active\"\n                                      className=\"form-check-label\"\n                                    >\n                                      Maneja números de serie\n                                    </label>\n                                  </div>\n                                </div>\n                                <div className=\"col-md-6 mt-4\">\n                                  <div className=\"form-check mb-2 ps-4 ms-1\">\n                                    <input\n                                      id=\"_dm-active\"\n                                      className=\"form-check-input\"\n                                      type=\"checkbox\"\n                                    />\n                                    <label\n                                      htmlFor=\"_dm-active\"\n                                      className=\"form-check-label\"\n                                    >\n                                      Permite números negativos en inventario\n                                    </label>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"pt-3 d-flex gap-2\">\n                              <button\n                                data-prev=\"\"\n                                className=\"btn btn-light ms-auto\"\n                              >\n                                Anterior\n                              </button>\n                              <button data-next=\"\" className=\"btn btn-primary\">\n                                Siguiente\n                              </button>\n                            </div>\n                          </section>\n                          {/* END : Profile section */}\n                          {/* Submit state */}\n                          <section data-step=\"finish\" className=\"text-center\">\n                            <svg\n                              className=\"checkmark\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              viewBox=\"0 0 52 52\"\n                            >\n                              <circle\n                                className=\"checkmark__circle\"\n                                cx={26}\n                                cy={26}\n                                r={25}\n                                fill=\"none\"\n                              />\n                              <path\n                                className=\"checkmark__check\"\n                                fill=\"none\"\n                                d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"\n                              />\n                            </svg>\n                            <p className=\"h5\">Se ha registrado el producto</p>\n                          </section>\n                          {/* END : Submit state */}\n                        </form>\n                        {/* END : Form sections */}\n                      </div>\n                      {/* END : Custom style form wizard */}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </MainLayout>\n    </>\n  );\n};\n\nexport default withAuth(Products);\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/suppliers.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/types-clients.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/BrandService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/ClientService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/CopomexService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/ImagesService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/ProductsService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/SupplierService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/OrganizationClient.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/types/TypeOfClient.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/react-dropzone-uploader/Dropzone.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/react-dropzone-uploader/Input.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/react-dropzone-uploader/Layout.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/react-dropzone-uploader/Preview.tsx",["766"],[],"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { formatBytes, formatDuration } from \"./utils\";\nimport { IPreviewProps } from \"./Dropzone\";\n//@ts-ignore\nimport cancelImg from \"../../assets/cancel.svg\";\n//@ts-ignore\nimport removeImg from \"../../assets/remove.png\";\n\nimport restartImg from \"../../assets/restart.svg\";\n\nconst iconByFn = {\n  cancel: { backgroundImage: `url(${cancelImg})` },\n  remove: { backgroundImage: `url(${removeImg})` },\n  restart: { backgroundImage: `url(${restartImg})` },\n};\n\nclass Preview extends React.PureComponent<IPreviewProps> {\n  render() {\n    const {\n      className,\n      imageClassName,\n      style,\n      imageStyle,\n      fileWithMeta: { cancel, remove, restart },\n      meta: {\n        name = \"\",\n        percent = 0,\n        size = 0,\n        previewUrl,\n        status,\n        duration,\n        validationError,\n      },\n      isUpload,\n      canCancel,\n      canRemove,\n      canRestart,\n      extra: { minSizeBytes },\n    } = this.props;\n\n    let title = `${name || \"?\"}, ${formatBytes(size)}`;\n    if (duration) title = `${title}, ${formatDuration(duration)}`;\n\n    if (status === \"error_file_size\" || status === \"error_validation\") {\n      return (\n        <div className={className} style={style}>\n          <span className=\"dzu-previewFileNameError\">{title}</span>\n          {status === \"error_file_size\" && (\n            <span>\n              {size < minSizeBytes ? \"File too small\" : \"File too big\"}\n            </span>\n          )}\n          {status === \"error_validation\" && (\n            <span>{String(validationError)}</span>\n          )}\n          {canRemove && (\n            <span\n              className=\"dzu-previewButton\"\n              style={iconByFn.remove}\n              onClick={remove}\n            />\n          )}\n        </div>\n      );\n    }\n\n    if (\n      status === \"error_upload_params\" ||\n      status === \"exception_upload\" ||\n      status === \"error_upload\"\n    ) {\n      title = `${title} (upload failed)`;\n    }\n    if (status === \"aborted\") title = `${title} (cancelled)`;\n\n    return (\n      <div className={className} style={style}>\n        {previewUrl && (\n          <img\n            className={imageClassName}\n            style={imageStyle}\n            src={previewUrl}\n            alt={title}\n            title={title}\n          />\n        )}\n        {!previewUrl && <span className=\"dzu-previewFileName\">{title}</span>}\n\n        <div className=\"dzu-previewStatusContainer\">\n          {isUpload && (\n            <progress\n              max={100}\n              value={\n                status === \"done\" || status === \"headers_received\"\n                  ? 100\n                  : percent\n              }\n            />\n          )}\n\n          {status === \"uploading\" && canCancel && (\n            <span\n              className=\"dzu-previewButton\"\n              style={iconByFn.cancel}\n              onClick={cancel}\n            />\n          )}\n          {status !== \"preparing\" &&\n            status !== \"getting_upload_params\" &&\n            status !== \"uploading\" &&\n            canRemove && (\n              <span\n                className=\"dzu-previewButton\"\n                style={iconByFn.remove}\n                onClick={remove}\n              />\n            )}\n          {[\n            \"error_upload_params\",\n            \"exception_upload\",\n            \"error_upload\",\n            \"aborted\",\n            \"ready\",\n          ].includes(status) &&\n            canRestart && (\n              <span\n                className=\"dzu-previewButton\"\n                style={iconByFn.restart}\n                onClick={restart}\n              />\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\n// @ts-ignore\nPreview.propTypes = {\n  className: PropTypes.string,\n  imageClassName: PropTypes.string,\n  style: PropTypes.object,\n  imageStyle: PropTypes.object,\n  fileWithMeta: PropTypes.shape({\n    file: PropTypes.any.isRequired,\n    meta: PropTypes.object.isRequired,\n    cancel: PropTypes.func.isRequired,\n    restart: PropTypes.func.isRequired,\n    remove: PropTypes.func.isRequired,\n    xhr: PropTypes.any,\n  }).isRequired,\n  // copy of fileWithMeta.meta, won't be mutated\n  meta: PropTypes.shape({\n    status: PropTypes.oneOf([\n      \"preparing\",\n      \"error_file_size\",\n      \"error_validation\",\n      \"ready\",\n      \"getting_upload_params\",\n      \"error_upload_params\",\n      \"uploading\",\n      \"exception_upload\",\n      \"aborted\",\n      \"error_upload\",\n      \"headers_received\",\n      \"done\",\n    ]).isRequired,\n    type: PropTypes.string.isRequired,\n    name: PropTypes.string,\n    uploadedDate: PropTypes.string.isRequired,\n    percent: PropTypes.number,\n    size: PropTypes.number,\n    lastModifiedDate: PropTypes.string,\n    previewUrl: PropTypes.string,\n    duration: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    videoWidth: PropTypes.number,\n    videoHeight: PropTypes.number,\n    validationError: PropTypes.any,\n  }).isRequired,\n  isUpload: PropTypes.bool.isRequired,\n  canCancel: PropTypes.bool.isRequired,\n  canRemove: PropTypes.bool.isRequired,\n  canRestart: PropTypes.bool.isRequired,\n  files: PropTypes.arrayOf(PropTypes.any).isRequired, // eslint-disable-line react/no-unused-prop-types\n  extra: PropTypes.shape({\n    active: PropTypes.bool.isRequired,\n    reject: PropTypes.bool.isRequired,\n    dragged: PropTypes.arrayOf(PropTypes.any).isRequired,\n    accept: PropTypes.string.isRequired,\n    multiple: PropTypes.bool.isRequired,\n    minSizeBytes: PropTypes.number.isRequired,\n    maxSizeBytes: PropTypes.number.isRequired,\n    maxFiles: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default Preview;\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/react-dropzone-uploader/SubmitButton.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/react-dropzone-uploader/utils.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/LoadingPage.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/collection/SearchProducts.tsx",["767","768"],[],"import { searchProducts } from \"@/services/ProductsService\";\nimport { Product } from \"@/types/Product\";\nimport { _apiUrl } from \"@/utils/constants\";\nimport { Button } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport LoadingPage from \"../LoadingPage\";\n\ninterface Props {\n  filter: any;\n  setFilter: any;\n  open: boolean;\n}\n\nconst SearchProducts: React.FC<Props> = ({ filter, setFilter, open }) => {\n  const [name, setName] = useState(filter?.name || \"\");\n  const [price, setPrice] = useState(filter?.price || \"\");\n  const [products, setProducts] = useState([]);\n  const [nameSearch, setNameSearch] = useState(filter?.nameSearch || \"\");\n  const [priceSearch, setPriceSearch] = useState(filter?.priceSearch || \"\");\n  const [loading, setLoading] = useState(false);\n\n  const onClickSearchProducts = async () => {\n    setLoading(true);\n    const { data, state, error } = await searchProducts(filter);\n    setProducts(data);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    setName(filter?.name || \"\");\n    setPrice(filter?.price || \"\");\n    setNameSearch(filter?.nameSearch || \"\");\n    setPriceSearch(filter?.priceSearch || \"\");\n\n    onClickSearchProducts();\n  }, [filter]);\n\n  return (\n    <>\n      <h5 className=\"mt-5\">Productos</h5>\n      <hr />\n      <div\n        className=\" mt-3 row\"\n        style={{\n          backgroundColor: \"rgb(245, 245, 245)\",\n          borderRadius: 7,\n          boxShadow: \"2px 2px 5px 2px rgb(202, 202, 202)\",\n        }}\n      >\n        <h4 className=\"mt-4 mb-4 text-center\">Buscar productos</h4>\n        <div className=\"row m-2 d-flex align-items-center\">\n          <h6 className=\"col-md-2\">Nombre Producto</h6>\n          <div className=\"col-md-3\">\n            <select\n              id=\"metodo\"\n              value={nameSearch}\n              onChange={(e) => {\n                const filt = {\n                  ...filter,\n                  nameSearch: e.target.value,\n                };\n                setFilter(filt);\n                setNameSearch(e.target.value);\n              }}\n              className=\"form-select\"\n            >\n              <option value=\"\" defaultChecked={true}>\n                Seleccione una opción\n              </option>\n              <option value=\"equal\">Es igual a</option>\n              <option value=\"notEqual\">No es igual a</option>\n              <option value=\"startsWith\">Comienza con</option>\n              <option value=\"endsWith\">Termina con</option>\n              <option value=\"contains\">Contiene</option>\n            </select>\n          </div>\n          <div className=\"col-md-7\">\n            <input\n              value={name}\n              onChange={(e) => {\n                const filt = {\n                  ...filter,\n                  name: e.target.value,\n                };\n                setFilter(filt);\n                setName(e.target.value);\n              }}\n              id=\"_dm-description\"\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"\"\n            />\n          </div>\n        </div>\n        <div className=\"row m-2 d-flex align-items-center mt-4\">\n          <div className=\"col-md-6 row d-flex align-items-center\">\n            <h6 className=\"col-md-2\">Precio</h6>\n            <div className=\"col-md-4\">\n              <select\n                id=\"metodo\"\n                value={priceSearch}\n                onChange={(e) => {\n                  const filt = {\n                    ...filter,\n                    priceSearch: e.target.value,\n                  };\n                  setFilter(filt);\n                  setPriceSearch(e.target.value);\n                }}\n                className=\"form-select\"\n              >\n                <option value=\"\" defaultChecked={true}>\n                  Seleccione una opción\n                </option>\n                <option value=\"equal\">Es igual a</option>\n                <option value=\"lessThan\">Menor que</option>\n                <option value=\"moreThan\">Mayor que</option>\n              </select>\n            </div>\n            <div className=\"col-md-6\">\n              <input\n                value={price}\n                onChange={(e) => {\n                  const filt = {\n                    ...filter,\n                    price: e.target.value,\n                  };\n                  setFilter(filt);\n                  setPrice(e.target.value);\n                }}\n                id=\"_dm-description\"\n                type=\"number\"\n                className=\"form-control\"\n                placeholder=\"\"\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"col-md-1 row mt-3 ms-3 d-flex align-items-center\">\n          <Button\n            variant=\"contained\"\n            onClick={onClickSearchProducts}\n            color=\"primary\"\n          >\n            Buscar\n          </Button>\n        </div>\n        <div className=\"mt-2 row d-flex align-items-center\">\n          <h4 className=\" text-center col-md-10\">Resultados búsqueda</h4>\n        </div>\n        {loading ? (\n          <LoadingPage />\n        ) : (\n          <div className=\"table-responsove mt-1\">\n            <table className=\"table \">\n              <thead>\n                <tr>\n                  <th\n                    style={{\n                      borderBottom: \"1px solid rgb(215, 215, 215)\",\n                    }}\n                  >\n                    Producto\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {products.map((product: Product, index) => (\n                  <tr key={index + \"product\"}>\n                    <td style={{ width: \"80%\" }}>\n                      <div className=\"row\">\n                        <div className=\"col-md-2\">\n                          <img\n                            height=\"50px\"\n                            width=\"50px\"\n                            src={_apiUrl + \"/\" + product?.images?.[0] || \"\"}\n                            alt={\"imagen\" + product.name}\n                          />\n                        </div>\n                        <div className=\"col-md-10\">\n                          <a href=\"#\" className=\"\">\n                            {product.name}\n                          </a>\n                          <p className=\"mt-1\">SKU: {product.sku}</p>\n                          <span style={{ color: \"rgb(0, 119, 255)\" }}>\n                            {product.retail_price}\n                          </span>\n                        </div>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default SearchProducts;\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/offers/CreateEdit.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/EditVariants.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/ImageBox.tsx",["769"],[],"import { Box, Chip, IconButton, Typography } from '@mui/material';\nimport React, { useEffect, useState } from \"react\";\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\n\ninterface Props {\n    index: number;\n    info: any;\n    onDelete: any;\n}\n\nexport const ImageBox: React.FC<Props> = ({ index, info, onDelete }) => {\n    const [data, setdata] = useState<any>()\n\n    useEffect(() => {\n        console.log(\"actualizando info:\", info)\n        setdata(info)\n    }, [info])\n\n    return (\n        <Box\n\n        /* sx={{\n            border: index === 0 ? \"1px solid #B4B1B1\" : \"2px dashed #B4B1B1\",\n            borderRadius: \"7px\",\n\n        }} */\n        >\n            <Box\n                display=\"flex\"\n                alignItems=\"start\">\n                <Box width={index === 0 ? \"190px\" : \"100px\"}\n                    height={index === 0 ? \"140px\" : \"90px\"} sx={{\n                        border: index === 0 ? \"1px solid #B4B1B1\" : \"2px dashed #B4B1B1\",\n                        borderRadius: \"7px\",\n                        boxShadow: index === 0 ? 4 : 2\n                    }}>\n                    <img\n                        width={\"100%\"}\n                        height={\"100%\"}\n                        src={info?.meta?.previewUrl}\n                        alt={info?.meta?.name}\n                    />\n                </Box>\n\n                <IconButton\n                    aria-label=\"delete\"\n                    onClick={() => onDelete(info)}\n                    sx={{ marginBottom: \"10px\" }}\n                >\n                    <HighlightOffIcon color=\"error\" />\n                </IconButton>\n            </Box>\n            {\n                index === 0 &&\n                <Chip\n                    className='mt-2 ms-4 mb-2'\n                    size='small'\n                    variant=\"outlined\"\n                    color='info'\n                    label={\"Esta será la miniatura\"}\n\n\n                />\n\n            }\n\n\n        </Box>\n    )\n}\n\n\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/products/ViewProduct.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/components/ui/DataTableCustomSimple.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/helpers/ChannelsData.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/helpers/ColorsData.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/helpers/IvasData.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/helpers/SatCode.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/helpers/SizeData.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/helpers/TypesProducts.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/offers.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/products/[id].tsx",["770","771","772","773"],[],"import React, { useEffect, useState } from \"react\";\nimport MainLayout from \"@/components/layout/main\";\n\nimport {\n  Typography,\n  TextField,\n  Button,\n  Box,\n  FormControl,\n  InputLabel,\n  Select,\n  Checkbox,\n  Grid,\n  Input,\n} from \"@mui/material\";\nimport Drawer from \"@mui/material/Drawer\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport { _apiUrl, notify } from \"@/utils/constants\";\nimport * as Yup from \"yup\";\nimport dynamic from \"next/dynamic\";\nimport MultiSelectChip from \"@/components/ui/Multiselect\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport { getAllCategories } from \"@/services/CategoryService\";\nimport { Category } from \"@/types/Category\";\nimport Alert from \"@mui/material/Alert\";\nimport { getAllFamilies } from \"@/services/FamilyService\";\nimport { Supplier } from \"@/types/Supplier\";\nimport { Brand } from \"@/types/Brand\";\nimport { getAllBrands } from \"@/services/BrandService\";\nimport { InputAdornment } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport ArrowBackIosIcon from \"@mui/icons-material/ArrowBackIos\";\nimport { makeStyles, styled } from \"@mui/styles\";\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport Switch, { SwitchProps } from \"@mui/material/Switch\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport Stack from \"@mui/material/Stack\";\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Family } from \"@/types/Family\";\nimport { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\nimport dayjs, { Dayjs } from \"dayjs\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport CreateEditBoxes from \"@/components/products/CreateEditBoxes\";\nimport { BoxCustom } from \"@/components/products/BoxCustom\";\nimport { DragAndDrop } from \"@/components/ui/DragAndDrop\";\nimport { DragAndDropBoxes } from \"@/components/products/DragAndDropBoxes\";\nimport { DrawerCustom } from \"@/components/ui/DrawerCustom\";\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { PropertyOption } from \"@/components/products/PropertyOption\";\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\nimport Chip from \"@mui/material/Chip\";\nimport { UploadImages } from \"@/components/ui/UploadImages\";\nimport { getAllSuppliers } from \"@/services/SupplierService\";\nimport { createProduct, getAllProducts, getOneProduct } from \"@/services/ProductsService\";\nimport { Product } from \"@/types/Product\";\nimport AddChips from \"@/components/ui/AddChips\";\nimport { uploadImage } from \"@/services/ImagesService\";\nimport { Responsepetition } from \"@/types/Responsepetition\";\nimport BorderColorIcon from \"@mui/icons-material/BorderColor\";\nimport DataTableCustomSimple from \"@/components/ui/DataTableCustomSimple\";\nimport EditVariants from \"@/components/products/EditVariants\";\nimport { getAllTypesOfClients } from \"@/services/TypeOfClientService\";\nimport { TypeOfClient } from \"@/types/TypeOfClient\";\nimport { IVAs } from \"@/helpers/IvasData\";\nimport { salesChannels } from \"@/helpers/ChannelsData\";\nimport { sizes } from \"@/helpers/SizeData\";\nimport { typesProduct } from \"@/helpers/TypesProducts\";\nimport { colors } from \"@/helpers/ColorsData\";\nimport { satCodes } from \"@/helpers/SatCode\";\nimport withAuth from \"../auth\";\nimport { useRouter } from \"next/router\";\nimport { FC } from 'react';\nimport { GetServerSideProps } from \"next\";\n\nconst Editor = dynamic(() => import(\"../../components/ui/Editor\"), { ssr: false });\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(\"Nombre requerido\"),\n  SAT_code: Yup.string().required(\"Modelo es requerido\"),\n  supplier: Yup.string().required(\"Proveedor es requerido\"),\n  category: Yup.string().required(\"Categoria es requerido\"),\n  brand: Yup.string().required(\"Marca es requerida\"),\n  family: Yup.string().required(\"Familia es requerida\"),\n\n});\n\ninterface FormValues {\n  name?: string;\n  description?: string;\n  model?: string;\n  max_discount?: number;\n  iva?: number;\n  barcode?: string;\n  SAT_code?: string;\n  brand?: string;\n  supplier?: string;\n  measuring_unit?: number;\n  comercial_info?: number;\n  category?: string;\n  organization?: string;\n  family?: string;\n  seo_title?: string;\n  seo_url?: string;\n  seo_description?: string;\n  retail_price?: number;\n  type?: string;\n  youtube_url?: string;\n  bonification_percentage?: number;\n  last_cost?: number;\n  average_cost?: number;\n  min_inventory?: number;\n  max_inventory?: number;\n  has_serial_number?: boolean;\n  allow_negative?: boolean;\n  use_cost?: string;\n  tags_history?: string;\n  height?: number;\n  width?: number;\n  thick?: number;\n  weight?: number;\n  currency?: string;\n  base_price?: number;\n}\n\ninterface option {\n  id: string;\n  label: string;\n}\n\ninterface VariantField {\n  id: string;\n  price: number;\n}\n\ninterface Variant {\n  id: string;\n  color?: string;\n  size?: string;\n  price?: string;\n}\n\ninterface property {\n  name: string;\n  values: any[];\n}\n\ninterface Props {\n\n}\n\nfunction convertirArregloAObjeto(arreglo: any) {\n  const objeto: any = {};\n\n  arreglo.forEach((item: any) => {\n    objeto[item.id] = {\n      id: item.id,\n      name: item.label,\n      descuento: 0,\n      total: 0\n    };\n  });\n\n  return objeto;\n}\n\nfunction convertPrices(objeto: any) {\n  const arreglo = [];\n  for (const key in objeto) {\n    if (objeto.hasOwnProperty(key)) {\n      const { id, name, descuento } = objeto[key];\n      arreglo.push({ id, name, discount: descuento });\n    }\n  }\n  return arreglo;\n}\n\n\nconst AntSwitch = styled(Switch)(({ theme }: any) => ({\n  width: 28,\n  height: 16,\n  padding: 0,\n  display: \"flex\",\n  \"&:active\": {\n    \"& .MuiSwitch-thumb\": {\n      width: 15,\n    },\n    \"& .MuiSwitch-switchBase.Mui-checked\": {\n      transform: \"translateX(9px)\",\n    },\n  },\n  \"& .MuiSwitch-switchBase\": {\n    padding: 2,\n    \"&.Mui-checked\": {\n      transform: \"translateX(12px)\",\n      color: \"#fff\",\n      \"& + .MuiSwitch-track\": {\n        opacity: 1,\n        backgroundColor: theme.palette.mode === \"dark\" ? \"#177ddc\" : \"#25476a\",\n      },\n    },\n  },\n  \"& .MuiSwitch-thumb\": {\n    boxShadow: \"0 2px 4px 0 rgb(0 35 11 / 20%)\",\n    width: 12,\n    height: 12,\n    borderRadius: 6,\n    transition: theme.transitions.create([\"width\"], {\n      duration: 200,\n    }),\n  },\n  \"& .MuiSwitch-track\": {\n    borderRadius: 16 / 2,\n    opacity: 1,\n    backgroundColor:\n      theme.palette.mode === \"dark\"\n        ? \"rgba(255,255,255,.35)\"\n        : \"rgba(0,0,0,.25)\",\n    boxSizing: \"border-box\",\n  },\n}));\n\nconst baseURL = \"https://www.musicalesdoris.com/products/\";\n\nconst generateURL = (title: string) => {\n  /* AGREGAR LOGICA PARA GENERAR LA URL */\n  return title;\n};\n\nfunction imprimirFormData(formData: any) {\n  for (let pair of formData.entries()) {\n    console.log(pair[0] + \": \" + pair[1]);\n  }\n}\n\nconst createFile = (name: string) => {\n  // Array de fragmentos del archivo (puede ser un Blob, ArrayBuffer, etc.)\n  const fileParts: BlobPart[] = ['Lorem ipsum dolor sit amet.'];\n\n  // Nombre del archivo\n  const fileName = name;\n\n  // Crear el objeto File\n  const file = new File(fileParts, fileName, { type: 'text/plain' });\n\n  return file;\n};\n\nconst Products: FC = (props) => {\n  const router = useRouter();\n\n  const [categories, setCategories] = useState<any[]>([]);\n  const [initialValues, setInitialValues] = useState<any>({});\n  const [typeofClients, setTypeofClients] = useState<any[]>([]);\n  const [typeofClientsFields, setTypeofClientsFields] = useState<any[]>([]);\n  const [retailPrice, setRetailPrice] = useState<number | any>(0);\n  const [products, setProducts] = useState<any[]>([]);\n  const [product, setProduct] = useState<Product | null>(null);\n  const [properties, setProperties] = useState<property[]>([]);\n  const [optionsSelected, setOptionsSelected] = useState<any>({\n    color: {\n      selected: [],\n    },\n    size: {\n      selected: [],\n    },\n  });\n  const [propertySelected, setPropertySelected] = useState<string>();\n  const [families, setFamilies] = useState<Family[]>([]);\n  const [suppliers, setSuppliers] = useState<Supplier[]>([]);\n  const [brands, setBrands] = useState<Brand[]>([]);\n  const [boxes, setBoxes] = useState<any[]>([]);\n\n  const [ivas, setIvas] = useState<any>([]);\n  const [channelsSelected, setChannelsSelected] = useState<any>([]);\n  const [showBoxes, setShowBoxes] = useState<any>(false);\n\n  const [height, setheight] = useState<number>(0);\n  const [width, setwidth] = useState<number>(0);\n  const [thick, setThick] = useState<number>(0);\n  const [weight, setWeight] = useState<number>(0);\n\n  const [productosRelated, setProductosRelated] = useState<any>([]);\n  const [tagsSelected, settagsSelected] = useState<any>([]);\n\n  const [errorPage, setErrorPage] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenColor, setIsOpenColor] = useState(false);\n  const [isOpenSize, setIsOpenSize] = useState(false);\n  const [isOpenBoxes, setIsOpenBoxes] = useState(false);\n  const [isOpenVariant, setIsOpenVariant] = useState(false);\n  const [isphysical, setIsphysical] = useState<boolean>(false);\n\n  const [fields, setFields] = useState([]);\n  const [actionBox, setActionBox] = useState(\"\");\n  const [selectedBox, setSelectedBox] = useState<number | null>();\n  const [selectedVariant, setSelectedVariant] = useState<any | null>();\n  const [fieldsValues, setFieldsValues] = useState<any>({});\n  const [images, setImages] = useState<any[]>([]);\n  const [variants, setVariants] = useState<any>([]);\n  const [variantsFields, setVariantsFields] = useState<any>({});\n  const [dataVariants, setDataVariants] = useState<any>([]);\n\n  const columnsWithDimensions = [\n    { name: \"id\", label: \"Variante\" },\n    { name: \"price\", label: \"Precio\" },\n    { name: \"dimensions\", label: \"Dimensiones\" },\n    { name: \"stock\", label: \"Stock\" },\n    {\n      name: \"acciones\",\n      Label: \"Acciones\",\n      options: {\n        customBodyRenderLite: (index: number) => {\n          const result = dataVariants[index];\n          return (\n            <>\n              <div className=\"d-flex gap-3\">\n                <Button\n                  variant={\"text\"}\n                  color=\"primary\"\n                  onClick={() => editVariantClick(result)}\n                >\n                  <BorderColorIcon />\n                </Button>\n              </div>\n            </>\n          );\n        },\n      },\n    },\n  ];\n\n  const columnsWithOutDimensions = [\n    { name: \"id\", label: \"Variante\" },\n    { name: \"price\", label: \"Precio\" },\n    { name: \"stock\", label: \"Stock\" },\n    {\n      name: \"acciones\",\n      Label: \"Acciones\",\n      options: {\n        customBodyRenderLite: (index: number) => {\n          const result = dataVariants[index];\n          return (\n            <>\n              <div className=\"d-flex gap-3\">\n                <Button\n                  variant={\"text\"}\n                  color=\"primary\"\n                  onClick={() => editVariantClick(result)}\n                >\n                  <BorderColorIcon />\n                </Button>\n              </div>\n            </>\n          );\n        },\n      },\n    },\n  ];\n\n  const TransformDataVariant = (variants: any) => {\n    //SE PASA LOS VALORES DE LAS VARIANTES A ARREGLO PARA LA TABLA\n    const arreglo = [];\n    for (const key in variants) {\n      if (variants.hasOwnProperty(key)) {\n        const { id, price, height, width, thick, weight, stock } =\n          variants[key];\n        arreglo.push({\n          id,\n          price: \"$ \" + price,\n          dimensions:\n            height +\n            \" cm X \" +\n            width +\n            \" cm X \" +\n            thick +\n            \" con \" +\n            weight +\n            \" kg\",\n          stock,\n        });\n      }\n    }\n    return arreglo;\n  };\n\n  useEffect(() => {\n    //SE MODIFICAN LOS VALORES DE LA VARIANTES\n    const newdata = TransformDataVariant(variantsFields)\n    setDataVariants(newdata)\n  }, [variantsFields])\n\n\n\n\n  useEffect(() => {\n\n    const newValues = { ...typeofClientsFields }\n    for (const key in newValues) {\n      const discount = newValues[key].descuento\n      const total = retailPrice - (retailPrice * (discount / 100))\n      newValues[key].total = total\n\n    }\n\n  }, [retailPrice])\n\n\n  useEffect(() => {\n    let fieldsPrices = convertirArregloAObjeto(typeofClients)\n\n    const priceFields = { ...fieldsPrices, }\n    const prices = initialValues.prices;\n    const retailPrice = initialValues.retail_price;\n    if (prices) {\n      prices.forEach((price: any) => {\n        const discount = price.discount\n        const total = retailPrice - (retailPrice * (discount / 100))\n        if (priceFields[price.id]) {\n          priceFields[price.id].descuento = discount\n          priceFields[price.id].total = total\n        }\n\n      });\n      setTypeofClientsFields(priceFields)\n    } else {\n      setTypeofClientsFields(fieldsPrices)\n    }\n\n  }, [typeofClients])\n\n\n  useEffect(() => {\n\n\n  }, [typeofClientsFields])\n\n\n\n  const geratingVariantField = (variants: any) => {\n    let variantsfield = {};\n    variants.map(({ id }: Variant) => {\n      let prePrice = retailPrice;\n      let preheight = height;\n      let prewidth = width;\n      let prethick = thick;\n      let preweight = weight;\n      let prestock = 0;\n\n      //Si ya existe esta variante conservar los valores anteriores\n      if (variantsFields.hasOwnProperty(id)) {\n        prePrice = variantsFields[id].price;\n        preheight = variantsFields[id].height;\n        prewidth = variantsFields[id].width;\n        prethick = variantsFields[id].thick;\n        preweight = variantsFields[id].weight;\n        prestock = variantsFields[id].stock;\n      }\n\n      variantsfield = {\n        ...variantsfield,\n        [id]: {\n          id: id,\n          price: prePrice,\n          height: preheight,\n          width: prewidth,\n          thick: prethick,\n          weight: preweight,\n          stock: prestock,\n        },\n      };\n    });\n    setVariantsFields(variantsfield);\n  };\n\n  const handleVariants = (e: any) => {\n    const { name, value } = e.target;\n    const val = variantsFields[name];\n    const newValueVariant = {\n      ...variantsFields,\n      [name]: { ...val, price: value },\n    };\n    setVariantsFields(newValueVariant);\n  };\n\n  useEffect(() => {\n    const colors: string[] = optionsSelected.color.selected;\n    const sizes: string[] = optionsSelected.size.selected;\n    const variant = generateCombinations(colors, sizes);\n    geratingVariantField(variant);\n    setVariants(variant);\n  }, [optionsSelected]);\n\n  function generateCombinations(colors: string[], sizes: string[]) {\n    const combinations: any[] = [];\n    if (colors.length === 0 && sizes.length === 0) {\n      // Si ambos arreglos están vacíos, retorna una combinación vacía\n      return combinations;\n    }\n    if (colors.length === 0) {\n      // Si el arreglo de colores está vacío, genera combinaciones solo con los tamaños\n      for (let j = 0; j < sizes.length; j++) {\n        const id = `-${j}`;\n        const size = sizes[j];\n        combinations.push({ id: size, size, price: 0 });\n      }\n    } else if (sizes.length === 0) {\n      // Si el arreglo de tamaños está vacío, genera combinaciones solo con los colores\n      for (let i = 0; i < colors.length; i++) {\n        const id = `${i}-`;\n        const color = colors[i];\n        combinations.push({ id: color, color, price: 0 });\n      }\n    } else {\n      // Genera combinaciones con colores y tamaños\n      for (let i = 0; i < colors.length; i++) {\n        for (let j = 0; j < sizes.length; j++) {\n          const id = `${i}-${j}`;\n          const color = colors[i];\n          const size = sizes[j];\n          combinations.push({\n            id: color + \" / \" + size,\n            color,\n            size,\n            price: 0,\n          });\n        }\n      }\n    }\n\n    return combinations;\n  }\n\n  const toggleDrawer = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const toggleDrawerColor = () => {\n    setIsOpenColor(!isOpenColor);\n  };\n\n  const toggleDrawerSize = () => {\n    setIsOpenSize(!isOpenSize);\n  };\n\n  const toggleBoxes = () => {\n    setIsOpenBoxes(!isOpenBoxes);\n  };\n\n  const toggleVariant = () => {\n    setIsOpenVariant(!isOpenVariant);\n  };\n\n  const onChangeFields = (e: any, tag: any, isDate: boolean) => {\n    if (isDate) {\n      setFieldsValues({\n        ...fieldsValues,\n        [tag]: e,\n      });\n    } else {\n      setFieldsValues({\n        ...fieldsValues,\n        [tag]: e.target.value,\n      });\n    }\n  };\n\n  const handleSubmit = async (values: FormValues) => {\n    /* let iva: string[] | any= []\n\n    if (ivas.length > 0) {\n      iva = ivas.map((iva: any) => iva.label);\n    } */\n\n    const iva = ivas.map((iva: any) => iva.id);\n    const producstid = productosRelated.map((product: any) => product.id);\n    const channelsid = channelsSelected.map((channel: any) => channel.id);\n    const newVariants = variants.map((variant: any) => {\n      if (isphysical) {\n        return {\n          ...variant,\n          price: parseInt(variantsFields[variant.id].price, 10),\n          stock: parseInt(variantsFields[variant.id].stock, 10),\n          dimensions: {\n            height: parseInt(variantsFields[variant.id].height, 10),\n            width: parseInt(variantsFields[variant.id].width, 10),\n            thick: parseInt(variantsFields[variant.id].thick, 10),\n            weight: parseInt(variantsFields[variant.id].weight, 10),\n          },\n        };\n      } else {\n        return {\n          ...variant,\n          price: parseInt(variantsFields[variant.id].price, 10),\n          stock: parseInt(variantsFields[variant.id].stock, 10),\n        };\n      }\n    });\n\n    const newImages = images.map((img) => img.file)\n    const arrayPrices = convertPrices(typeofClientsFields)\n    const prices = arrayPrices;\n\n\n    const dataform: any = {\n      ...values,\n      iva,\n      relatedProducts: producstid,\n      tags: tagsSelected,\n      channel: channelsid,\n      variations: newVariants,\n      boxes: boxes,\n    };\n\n\n    const formData = new FormData();\n    for (const property in dataform) {\n      if (dataform.hasOwnProperty(property)) {\n        if (Array.isArray(dataform[property])) {\n          formData.append(property, JSON.stringify(dataform[property]));\n        } else {\n          formData.append(property, dataform[property]);\n        }\n      }\n    }\n    formData.append(\"prices\", JSON.stringify(prices));\n    // formData.append(\"iva\", JSON.stringify(iva));\n    newImages.forEach((image, index) => {\n      formData.append(`images`, image);\n    });\n\n    // imprimirFormData(formData);\n\n    const { data, state, error }: Responsepetition = await createProduct(formData);\n    if (state) {\n      notify(\"success\", \"Se ha creado exitosamente\");\n      router.push('../products');\n    } else {\n      notify(\"error\", error.message);\n    }\n  };\n\n  const updateVariants = (values: any) => {\n    const { id, price, stock, thick, weight, width } = values;\n    const preValues = variantsFields[id];\n    const newValuesVariants = {\n      ...variantsFields,\n      [id]: values,\n    };\n    setVariantsFields(newValuesVariants);\n  };\n\n  const onIvas = (almacenes: any) => {\n    setIvas(almacenes);\n  };\n\n  const onChannels = (almacenes: any) => {\n    setChannelsSelected(almacenes);\n  };\n\n  const onRelatedProductos = (almacenes: any) => {\n    setProductosRelated(almacenes);\n  };\n\n  const onTags = (almacenes: any) => {\n    settagsSelected(almacenes);\n  };\n\n  const getCategories = async () => {\n    const { data, state, error }: Responsepetition = await getAllCategories();\n    if (state) {\n      const newdata = data.map((category: Category) => {\n        return {\n          id: category.id,\n          label: category.name,\n        };\n      });\n\n      setCategories(newdata);\n    } else {\n      setCategories([]);\n      setErrorPage(error.message);\n    }\n  };\n\n  const getTypeOfClients = async () => {\n    const { data, state, error }: Responsepetition = await getAllTypesOfClients();\n    if (state) {\n      const newdata = data.map((type: TypeOfClient) => {\n        return {\n          id: type.id,\n          label: type.name,\n        };\n      });\n      setTypeofClients(newdata);\n    } else {\n      setTypeofClients([]);\n      setErrorPage(error.message);\n    }\n  };\n\n  const getProducts = async () => {\n    const { data, state, error }: Responsepetition = await getAllProducts();\n    if (state) {\n      const newdata = data.map((product: Product) => {\n        return {\n          id: product.id,\n          label: product.name + \"\" + product.sku,\n        };\n      });\n\n      setProducts(newdata);\n    } else {\n      setProducts([]);\n      setErrorPage(error.message);\n    }\n  };\n\n  const getFamilies = async () => {\n    const { data, state, error }: Responsepetition = await getAllFamilies();\n    if (state) {\n      setFamilies(data);\n    } else {\n      setFamilies([]);\n      setErrorPage(error.message);\n    }\n  };\n\n  const getSuppliers = async () => {\n    const { data, state, error }: Responsepetition = await getAllSuppliers();\n    if (state) {\n      setSuppliers(data);\n    } else {\n      setSuppliers([]);\n      setErrorPage(\"Error al cargar los proveedores\");\n    }\n  };\n\n  const getBrands = async () => {\n    const { data, state, error }: Responsepetition = await getAllBrands();\n    if (state) {\n      setBrands(data);\n    } else {\n      setBrands([]);\n      setErrorPage(error.message);\n    }\n  };\n\n  const addBox = (newBox: any) => {\n    setBoxes([...boxes, newBox]);\n  };\n\n  const deleteBox = (id: number) => {\n    const newBoxes = boxes.filter((box, i) => box.id !== id);\n    setBoxes(newBoxes);\n  };\n\n  const uploadImages = (images: any) => {\n    setImages(images);\n  };\n\n  const selectedOption = (property: string, value: string) => {\n    const selected = optionsSelected[property].selected;\n    const isthere = selected.find((select: string) => select === value);\n    if (isthere) {\n      const newselect = selected.filter((select: string) => select !== value);\n      setOptionsSelected({\n        ...optionsSelected,\n        [property]: { selected: newselect },\n      });\n    } else {\n      setOptionsSelected({\n        ...optionsSelected,\n        [property]: { selected: [...selected, value] },\n      });\n    }\n  };\n\n  const deleteProperty = (property: string, value: string) => {\n    const selected = optionsSelected[property].selected;\n    const newselect = selected.filter((select: string) => select !== value);\n    setOptionsSelected({\n      ...optionsSelected,\n      [property]: { selected: newselect },\n    });\n  };\n\n  const createBoxClick = async () => {\n    setActionBox(\"create\");\n    setSelectedBox(null);\n    toggleBoxes();\n  };\n\n  const editVariantClick = async (variant: any) => {\n    const { id } = variant;\n    const variantValues = variantsFields[id];\n    setSelectedVariant(variantValues);\n    toggleVariant();\n  };\n\n  const editBoxClick = async (index: number) => {\n    setActionBox(\"edit\");\n    setSelectedBox(index);\n    toggleBoxes();\n  };\n\n  const onChangePrice = (e: any, id: any) => {\n    const value = e.target.value;\n    const prevalue = typeofClientsFields[id];\n    const newValuesPrices = {\n      ...typeofClientsFields,\n      [id]: {\n        ...prevalue,\n        descuento: value,\n        total: retailPrice - (retailPrice * (value / 100))\n      }\n    }\n\n    setTypeofClientsFields(newValuesPrices)\n\n  }\n\n  const calculatePorcent = (base: number, porcent: number) => {\n    const discount = base * (porcent / 100);\n    return base - discount;\n  };\n\n  useEffect(() => {\n    console.log(\"Images: \", images)\n  }, [images])\n\n  useEffect(() => {\n    console.log(\"Valores iniciales: \", initialValues)\n  }, [initialValues])\n\n  const dataToFomrData = (data: Product) => {\n\n    const { brand, category, family, supplier, retail_price, images, dimensions } = data\n    const newImages = images.map((image: string, index) => {\n      console.log(\"name:\", image)\n      const fileimage = createFile(image)\n      const meta = {\n        name: image,\n        previewUrl: _apiUrl + \"/\" + image,\n        id: fileimage.lastModified + \"-\" + index,\n        flag: true\n      }\n\n      const newImg = {\n        file: fileimage,\n        meta\n      }\n      console.log(\"Imagen nueva:\", newImg)\n      return newImg;\n    })\n\n    setImages(newImages)\n    setRetailPrice(retail_price)\n    let newData: any = { ...data }\n    newData.brand = brand.id\n    newData.category = category.id\n    newData.family = family.id\n    newData.supplier = supplier.id\n    if (dimensions) {\n      newData.height = dimensions.height\n      newData.width = dimensions.width\n      newData.thick = dimensions.thick\n      newData.weight = dimensions.weight\n    }\n\n\n    return newData;\n  }\n\n  const getProduct = async () => {\n    const { id } = props as { id: string };\n    const { data, state, error }: Responsepetition = await getOneProduct(id);\n    if (state) {\n      setProduct(data)\n      console.log(\"data:\", data)\n      const newData = dataToFomrData(data)\n      console.log(\"Nueva Información:\", newData)\n      setInitialValues(newData)\n      console.log(data)\n    } else {\n      console.log(\"hubo un error: \", error)\n      setProduct(null)\n    }\n  };\n\n  useEffect(() => {\n    getProduct();\n    getCategories();\n    getFamilies();\n    getBrands();\n    getSuppliers();\n    getProducts();\n    getTypeOfClients();\n\n  }, []);\n\n  return (\n    <>\n      <MainLayout>\n        <div className=\"content__header content__boxed overlapping\">\n          <div className=\"content__wrap\">\n            <div className=\"content__header content__boxed overlapping\">\n              <div className=\"content__wrap\">\n                {errorPage.trim() != \"\" && (\n                  <Alert severity=\"error\">{errorPage}</Alert>\n                )}\n                <h1 className=\"page-title mb-0 mt-2 font fs-2\">\n                  EDITA EL PRODUCTO\n                </h1>\n\n                <Formik\n                  enableReinitialize\n                  initialValues={initialValues}\n                  validationSchema={validationSchema}\n                  onSubmit={handleSubmit}\n                >\n                  {({\n                    isSubmitting,\n                    errors,\n                    touched,\n                    handleChange,\n                    values,\n                    setValues,\n                  }) => (\n                    <Form>\n                      <div className=\"content__boxed\">\n                        {/*Informacion */}\n                        <div className=\"card mt-2\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                Información básica\n                              </Typography>\n                              <Box className=\"row mt-3\">\n                                <Field\n                                  as={TextField}\n                                  size=\"small\"\n                                  value={values?.name ? values.name : \"\"}\n                                  name=\"name\"\n                                  type=\"text\"\n                                  label=\"Nombre\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  helperText={\n                                    touched.name && errors.name ? (\n                                      <ErrorMessage name=\"name\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.name && errors.name ? true : false\n                                  }\n                                  onChange={handleChange}\n                                />\n                                <Field\n                                  as={TextField}\n                                  className=\"col-12 mt-4\"\n                                  size=\"small\"\n                                  value={values?.barcode ? values.barcode : \"\"}\n                                  name=\"barcode\"\n                                  type=\"text\"\n                                  label=\"Código de barras\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  helperText={\n                                    touched.barcode && errors.barcode ? (\n                                      <ErrorMessage name=\"barcode\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.barcode && errors.barcode\n                                      ? true\n                                      : false\n                                  }\n                                  onChange={handleChange}\n                                />\n                              </Box>\n\n                              <Typography mt={2} mb={1}>\n                                Descripción\n                              </Typography>\n                              <Editor\n                                name=\"description\"\n                                value={values?.description ? values.description : \"\"}\n                                onChange={handleChange}\n                              />\n                            </div>\n                          </div>\n                        </div>\n\n                        {/*Caracteristicas */}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                Características\n                              </Typography>\n                              <Grid container>\n                                <Grid item xs={6}>\n                                  <FormControl fullWidth>\n                                    <Field\n                                      as={TextField}\n                                      name=\"model\"\n                                      type=\"text\"\n                                      value={values?.model ? values.model : \"\"}\n                                      label=\"Modelo\"\n                                      fullWidth\n                                      variant=\"outlined\"\n                                      margin=\"normal\"\n                                      helperText={\n                                        touched.model && errors.model ? (\n                                          <ErrorMessage name=\"model\" />\n                                        ) : (\n                                          \"\"\n                                        )\n                                      }\n                                      error={\n                                        touched.model && errors.model\n                                          ? true\n                                          : false\n                                      }\n                                      onChange={handleChange}\n                                    />\n                                  </FormControl>\n                                </Grid>\n                                <Grid item xs={6}>\n                                  <FormControl fullWidth>\n                                    <Field\n                                      as={TextField}\n                                      name=\"max_discount\"\n                                      type=\"number\"\n                                      value={values?.max_discount ? values.max_discount : \"\"}\n                                      label=\"Max. Descuento\"\n                                      fullWidth\n                                      variant=\"outlined\"\n                                      margin=\"normal\"\n                                      helperText={\n                                        touched.max_discount &&\n                                          errors.max_discount ? (\n                                          <ErrorMessage name=\"max_discount\" />\n                                        ) : (\n                                          \"\"\n                                        )\n                                      }\n                                      error={\n                                        touched.max_discount &&\n                                          errors.max_discount\n                                          ? true\n                                          : false\n                                      }\n                                      onChange={handleChange}\n                                    />\n                                  </FormControl>\n                                </Grid>\n                                <div className=\"col-12 mt-3\">\n                                  <FormControl sx={{ width: \"100%\" }}>\n                                    <InputLabel id=\"demo-simple-select-helper-label\">\n                                      Tipo de producto\n                                    </InputLabel>\n                                    <Select\n                                      value={values.type ? values.type : \"\"}\n                                      labelId=\"demo-simple-select-helper-label\"\n                                      id=\"supplier\"\n                                      name=\"type\"\n                                      placeholder=\"Tipo de producto\"\n                                      label=\"Tipo de producto\"\n                                      onChange={(e) => {\n                                        if (e.target.value === \"1\")\n                                          setIsphysical(true);\n                                        else setIsphysical(false);\n                                        handleChange(e);\n                                      }}\n                                      fullWidth\n                                      error={\n                                        touched.type && errors.type\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      {typesProduct.map((types, index) => (\n                                        <MenuItem key={index} value={types.id}>\n                                          {types.label}\n                                        </MenuItem>\n                                      ))}\n                                    </Select>\n                                  </FormControl>\n                                </div>\n                                <div className=\"col-12 mb-2\">\n                                  <MultiSelectChip\n                                    options={IVAs}\n                                    onSelect={onIvas}\n                                    selected={[]}\n                                    label=\"IVA\"\n                                  />\n                                </div>\n\n                                <div className=\"col-6\">\n                                  <FormControl sx={{ width: \"100%\" }}>\n                                    <InputLabel id=\"demo-simple-select-helper-label\">\n                                      Código SAT\n                                    </InputLabel>\n                                    <Select\n                                      value={values.SAT_code ? values.SAT_code : \"\"}\n                                      labelId=\"demo-simple-select-helper-label\"\n                                      id=\"SAT_code\"\n                                      name=\"SAT_code\"\n                                      placeholder=\"Código SAT\"\n                                      label=\"Código SAT\"\n                                      onChange={handleChange}\n                                      fullWidth\n                                      error={\n                                        touched.SAT_code && errors.SAT_code\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      {satCodes.map((code, index) => (\n                                        <MenuItem key={index} value={code.id}>\n                                          {code.label}\n                                        </MenuItem>\n                                      ))}\n                                    </Select>\n                                  </FormControl>\n                                </div>\n                                <div className=\"col-6\">\n                                  <FormControl sx={{ width: \"100%\" }}>\n                                    <InputLabel id=\"demo-simple-select-helper-label\">\n                                      Proveedor\n                                    </InputLabel>\n                                    <Select\n                                      value={values.supplier ? values.supplier : \"\"}\n                                      labelId=\"demo-simple-select-helper-label\"\n                                      id=\"supplier\"\n                                      name=\"supplier\"\n                                      placeholder=\"supplier\"\n                                      label=\"supplier\"\n                                      onChange={handleChange}\n                                      fullWidth\n                                      error={\n                                        touched.supplier && errors.supplier\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      {suppliers.map((supplier, index) => (\n                                        <MenuItem\n                                          key={index}\n                                          value={supplier.id}\n                                        >\n                                          {supplier.name}\n                                        </MenuItem>\n                                      ))}\n                                    </Select>\n                                  </FormControl>\n                                </div>\n\n                                <div className=\"col-12 mt-3\">\n                                  <FormControl sx={{ width: \"100%\" }}>\n                                    <InputLabel id=\"demo-simple-select-helper-label\">\n                                      Categorias\n                                    </InputLabel>\n                                    <Select\n                                      value={values.category ? values.category : \"\"}\n                                      labelId=\"demo-simple-select-helper-label\"\n                                      id=\"supplier\"\n                                      name=\"category\"\n                                      placeholder=\"Categoria\"\n                                      label=\"Categoria\"\n                                      onChange={handleChange}\n                                      fullWidth\n                                      error={\n                                        touched.category && errors.category\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      {categories.map((types, index) => (\n                                        <MenuItem key={index} value={types.id}>\n                                          {types.label}\n                                        </MenuItem>\n                                      ))}\n                                    </Select>\n                                  </FormControl>\n                                </div>\n\n                                <div className=\"col-6 mt-3\">\n                                  <FormControl sx={{ width: \"100%\" }}>\n                                    <InputLabel id=\"demo-simple-select-helper-label\">\n                                      Marca\n                                    </InputLabel>\n                                    <Select\n                                      value={values.brand ? values.brand : \"\"}\n                                      labelId=\"demo-simple-select-helper-label\"\n                                      id=\"brand\"\n                                      name=\"brand\"\n                                      placeholder=\"Marca\"\n                                      label=\"Marca\"\n                                      onChange={handleChange}\n                                      fullWidth\n                                      error={\n                                        touched.brand && errors.brand\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      {brands.map((brand, index) => (\n                                        <MenuItem key={index} value={brand.id}>\n                                          {brand.name}\n                                        </MenuItem>\n                                      ))}\n                                    </Select>\n                                  </FormControl>\n                                </div>\n                                <div className=\"col-6 mt-3\">\n                                  <FormControl sx={{ width: \"100%\" }}>\n                                    <InputLabel id=\"demo-simple-select-helper-label\">\n                                      Familia\n                                    </InputLabel>\n                                    <Select\n                                      value={values.family ? values.family : \"\"}\n                                      labelId=\"demo-simple-select-helper-label\"\n                                      id=\"family\"\n                                      name=\"family\"\n                                      placeholder=\"Familia\"\n                                      label=\"Familia\"\n                                      onChange={(e) => {\n                                        const tipo: any = families.find(\n                                          (family: any) =>\n                                            family.id === e.target.value\n                                        );\n                                        setFields(tipo.fields);\n                                        handleChange(e);\n                                      }}\n                                      fullWidth\n                                      error={\n                                        touched.family && errors.family\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      {families.map((family, index) => (\n                                        <MenuItem key={index} value={family.id}>\n                                          {family.name}\n                                        </MenuItem>\n                                      ))}\n                                    </Select>\n                                  </FormControl>\n                                </div>\n                                <Box\n                                  display={\"flex\"}\n                                  flexWrap={\"wrap\"}\n                                  gap={3}\n                                  sx={{ marginTop: \"20px !important\" }}\n                                  mb={3}\n                                >\n                                  {/* Campos dinamicos     */}\n\n                                  {fields &&\n                                    fields.map(({ tag, type }, index) => (\n                                      <div key={index}>\n                                        {type === \"date\" ? (\n                                          <LocalizationProvider\n                                            dateAdapter={AdapterDayjs}\n                                          >\n                                            <DatePicker\n                                              label={tag}\n                                              disabled={type == \"view\"}\n                                              sx={{ with: \"100px\" }}\n                                              value={fieldsValues[tag]}\n                                              onChange={(newValue: any) =>\n                                                onChangeFields(\n                                                  newValue,\n                                                  tag,\n                                                  true\n                                                )\n                                              }\n                                            />\n                                          </LocalizationProvider>\n                                        ) : (\n                                          <Field\n                                            label={tag}\n                                            as={TextField}\n                                            type={type}\n                                            name={tag}\n                                            id={tag}\n                                            placeholder={tag}\n                                            value={fieldsValues[tag]}\n                                            onChange={(newValue: any) =>\n                                              onChangeFields(\n                                                newValue,\n                                                tag,\n                                                false\n                                              )\n                                            }\n                                          />\n                                        )}\n\n                                        {touched[tag] && errors[tag] && (\n                                          <div>{errors[tag]}</div>\n                                        )}\n                                      </div>\n                                    ))}\n                                </Box>\n                              </Grid>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* PRECIOS */}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                PRECIOS{\" \"}\n                              </Typography>\n                              <Box\n                                className=\"row mt-3\"\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                              >\n                                <Field\n                                  className=\"col-12\"\n                                  as={TextField}\n                                  type=\"number\"\n                                  min={0}\n                                  step=\"1\"\n                                  name=\"retail_price\"\n                                  label=\"Precio base\"\n                                  InputProps={{\n                                    startAdornment: (\n                                      <InputAdornment position=\"start\">\n                                        $\n                                      </InputAdornment>\n                                    ),\n                                  }}\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  fullWidth\n                                  helperText={\n                                    touched.retail_price && errors.retail_price ? (\n                                      <ErrorMessage name=\"retail_price\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.base_price && errors.base_price\n                                      ? true\n                                      : false\n                                  }\n                                  onChange={(e: any) => {\n                                    setRetailPrice(e.target.value)\n                                    handleChange(e);\n                                  }}\n                                />\n\n\n                                {\n                                  typeofClients?.map((type, i) => {\n                                    return <Box key={i} className=\"row col-12\">\n                                      <Typography className=\"col-4 mt-4\">\n                                        {type.label}\n                                      </Typography>\n\n\n                                      <Field\n                                        as={TextField}\n                                        className=\"col-4 mt-3\"\n                                        size=\"small\"\n                                        value={typeofClientsFields[type.id]?.descuento}\n                                        type=\"number\"\n                                        label=\"Descuento\"\n                                        fullWidth\n                                        variant=\"outlined\"\n                                        margin=\"normal\"\n                                        onChange={(e: any) => {\n                                          onChangePrice(e, type.id)\n                                        }}\n                                        InputProps={{\n                                          startAdornment: (\n                                            <InputAdornment position=\"start\">\n                                              %\n                                            </InputAdornment>\n                                          ),\n                                        }}\n                                      />\n\n\n\n                                      <Field\n                                        as={TextField}\n                                        className=\"col-4 mt-3\"\n                                        disabled\n                                        value={typeofClientsFields[type.id]?.total}\n                                        size=\"small\"\n                                        name=\"school_agreement\"\n                                        type=\"text\"\n                                        placeholder={\"Total\"}\n                                        fullWidth\n                                        variant=\"outlined\"\n                                        margin=\"normal\"\n                                      />\n                                    </Box>\n                                  })\n                                }\n\n\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Dimensiones*/}\n                        {\n                          values.type === \"1\" &&\n                          <div className=\"card mt-3\">\n                            <div className=\"d-md-flex align-content-stretch\">\n                              <div className=\"card-body flex-fill ms-md-4\">\n                                <Typography\n                                  variant=\"h6\"\n                                  sx={{ fontWeight: \"bold\" }}\n                                >\n                                  Dimensiones del producto\n                                </Typography>\n                                <Box className=\"row mt-3\">\n                                  <Field\n                                    className=\"col-6\"\n                                    as={TextField}\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    name=\"height\"\n                                    label=\"Alto\"\n                                    InputProps={{\n                                      endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                          cm\n                                        </InputAdornment>\n                                      ),\n                                    }}\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    fullWidth\n                                    helperText={\n                                      touched.height && errors.height ? (\n                                        <ErrorMessage name=\"height\" />\n                                      ) : (\n                                        \"\"\n                                      )\n                                    }\n                                    error={\n                                      touched.height && errors.height\n                                        ? true\n                                        : false\n                                    }\n                                    onChange={(e: any) => {\n                                      setheight(e.target.value)\n                                      handleChange(e)\n                                    }}\n                                  />\n                                  <Field\n                                    className=\"col-6\"\n                                    as={TextField}\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    name=\"width\"\n                                    label=\"Ancho\"\n                                    InputProps={{\n                                      endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                          cm\n                                        </InputAdornment>\n                                      ),\n                                    }}\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    fullWidth\n                                    helperText={\n                                      touched.width && errors.width ? (\n                                        <ErrorMessage name=\"width\" />\n                                      ) : (\n                                        \"\"\n                                      )\n                                    }\n                                    error={\n                                      touched.width && errors.width\n                                        ? true\n                                        : false\n                                    }\n                                    onChange={(e: any) => {\n                                      setwidth(e.target.value)\n                                      handleChange(e)\n                                    }}\n                                  />\n                                  <Field\n                                    className=\"col-6 mt-3\"\n                                    as={TextField}\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    name=\"thick\"\n                                    label=\"Largo\"\n                                    InputProps={{\n                                      endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                          cm\n                                        </InputAdornment>\n                                      ),\n                                    }}\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    fullWidth\n                                    helperText={\n                                      touched.thick && errors.thick ? (\n                                        <ErrorMessage name=\"thick\" />\n                                      ) : (\n                                        \"\"\n                                      )\n                                    }\n                                    error={\n                                      touched.thick && errors.thick\n                                        ? true\n                                        : false\n                                    }\n                                    onChange={(e: any) => {\n                                      setThick(e.target.value)\n                                      handleChange(e)\n                                    }}\n                                  />\n                                  <Field\n                                    className=\"col-6 mt-3\"\n                                    as={TextField}\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    name=\"weight\"\n                                    label=\"Peso\"\n                                    InputProps={{\n                                      endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                          Kilos\n                                        </InputAdornment>\n                                      ),\n                                    }}\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    fullWidth\n                                    helperText={\n                                      touched.weight && errors.weight ? (\n                                        <ErrorMessage name=\"weight\" />\n                                      ) : (\n                                        \"\"\n                                      )\n                                    }\n                                    error={\n                                      touched.weight && errors.weight\n                                        ? true\n                                        : false\n                                    }\n                                    onChange={(e: any) => {\n                                      setWeight(e.target.value)\n                                      handleChange(e)\n                                    }}\n                                  />\n                                </Box>\n                              </div>\n                            </div>\n                          </div>\n                        }\n\n\n                        {/*VARIANTES*/}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Box\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                                justifyContent={\"space-between\"}\n                              >\n                                <Typography\n                                  variant=\"h6\"\n                                  sx={{ fontWeight: \"bold\" }}\n                                >\n                                  Variantes\n                                </Typography>\n                                <IconButton onClick={toggleDrawer}>\n                                  <AddCircleIcon\n                                    fontSize=\"large\"\n                                    color=\"primary\"\n                                  />\n                                </IconButton>\n                              </Box>\n\n                              <Typography\n                                display={\n                                  optionsSelected.color.selected.length > 0 ||\n                                    optionsSelected.size.selected.length > 0\n                                    ? \"none\"\n                                    : \"flex\"\n                                }\n                              >\n                                Combina diferentes propiedades de tu producto.\n                                Ejemplo: color + tamaño.\n                              </Typography>\n\n                              <Box\n                                display={\n                                  optionsSelected.color.selected.length < 1 &&\n                                    optionsSelected.size.selected.length < 1\n                                    ? \"none\"\n                                    : \"flex\"\n                                }\n                                flexDirection={\"column\"}\n                              >\n                                <Box\n                                  className=\"mt-3\"\n                                  display={\"flex\"}\n                                  alignItems={\"center\"}\n                                  gap={5}\n                                  flexWrap={\"wrap\"}\n                                >\n                                  {optionsSelected.color.selected.length >\n                                    0 && (\n                                      <Typography sx={{ marginTop: \"10px\" }}>\n                                        Colores:\n                                      </Typography>\n                                    )}\n\n                                  {optionsSelected.color.selected.length > 0 &&\n                                    optionsSelected.color.selected.map(\n                                      (color: any, i: number) => {\n                                        return (\n                                          <Chip\n                                            key={i}\n                                            label={color}\n                                            color=\"secondary\"\n                                          />\n                                        );\n                                      }\n                                    )}\n\n                                  {optionsSelected.size.selected.length > 0 && (\n                                    <Typography sx={{ marginTop: \"10px\" }}>\n                                      Tamaños:\n                                    </Typography>\n                                  )}\n                                  {optionsSelected.size.selected.length > 0 &&\n                                    optionsSelected.size.selected.map(\n                                      (color: string, i: number) => {\n                                        return (\n                                          <Chip\n                                            key={i}\n                                            label={color}\n                                            color=\"primary\"\n                                          />\n                                        );\n                                      }\n                                    )}\n                                </Box>\n\n                                {/* Tabla de variantes */}\n\n                                <DataTableCustomSimple\n                                  data={dataVariants}\n                                  columns={\n                                    values.type === \"1\"\n                                      ? columnsWithDimensions\n                                      : columnsWithOutDimensions\n                                  }\n                                />\n                              </Box>\n\n                              <DrawerCustom\n                                isOpen={isOpen}\n                                toggleDrawer={toggleDrawer}\n                                title=\"Propiedades\"\n                              >\n                                <Box>\n                                  <Box\n                                    display={\"flex\"}\n                                    alignItems={\"center\"}\n                                    justifyContent={\"space-between\"}\n                                  >\n                                    <Typography>Color</Typography>\n                                    <IconButton onClick={toggleDrawerColor}>\n                                      <NavigateNextIcon />\n                                    </IconButton>\n                                  </Box>\n\n                                  <Box\n                                    display={\"flex\"}\n                                    alignItems={\"center\"}\n                                    justifyContent={\"space-between\"}\n                                  >\n                                    <Typography>Tamaño</Typography>\n                                    <IconButton onClick={toggleDrawerSize}>\n                                      <NavigateNextIcon />\n                                    </IconButton>\n                                  </Box>\n                                </Box>\n                              </DrawerCustom>\n\n                              <DrawerCustom\n                                isOpen={isOpenColor}\n                                toggleDrawer={toggleDrawerColor}\n                                title=\"Color\"\n                              >\n                                <div className=\"col-12\">\n                                  <Box mt={3} width={\"100%\"}>\n                                    <Box\n                                      display={\n                                        optionsSelected.color.selected.length >\n                                          0\n                                          ? \"flex\"\n                                          : \"none\"\n                                      }\n                                      alignItems={\"center\"}\n                                      justifyContent={\"space-between\"}\n                                      mb={3}\n                                    >\n                                      <Typography\n                                        sx={{\n                                          fontWeight: \"bolder\",\n                                          marginBottom: \"10px\",\n                                        }}\n                                      >\n                                        Colores seleccionados\n                                      </Typography>\n                                      <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={toggleDrawerColor}\n                                      >\n                                        Finalizar\n                                      </Button>\n                                    </Box>\n\n                                    <Box>\n                                      {optionsSelected.color &&\n                                        optionsSelected.color.selected.map(\n                                          (option: any, i: number) => {\n                                            return (\n                                              <Box\n                                                key={i}\n                                                display={\"flex\"}\n                                                width={\"100%\"}\n                                                mb={2}\n                                              >\n                                                <TextField\n                                                  variant=\"outlined\"\n                                                  fullWidth\n                                                  disabled\n                                                  value={option}\n                                                  size=\"small\"\n                                                ></TextField>\n                                                <Button\n                                                  variant=\"text\"\n                                                  onClick={() =>\n                                                    deleteProperty(\n                                                      \"color\",\n                                                      option\n                                                    )\n                                                  }\n                                                >\n                                                  <DeleteIcon\n                                                    sx={{ color: \"#000\" }}\n                                                  />\n                                                </Button>\n                                              </Box>\n                                            );\n                                          }\n                                        )}\n\n                                      {optionsSelected.color.selected.length >\n                                        0 && <br />}\n                                    </Box>\n\n                                    {colors.map((color, i) => (\n                                      <PropertyOption\n                                        key={i}\n                                        label={color.label}\n                                        property={\"color\"}\n                                        data={optionsSelected}\n                                        color={color.code}\n                                        onSelected={selectedOption}\n                                      />\n                                    ))}\n\n                                    <Box\n                                      display={\"flex\"}\n                                      justifyContent={\"end\"}\n                                    >\n                                      <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={toggleDrawerColor}\n                                      >\n                                        Finalizar\n                                      </Button>\n                                    </Box>\n                                  </Box>\n                                </div>\n                              </DrawerCustom>\n\n                              <DrawerCustom\n                                isOpen={isOpenSize}\n                                toggleDrawer={toggleDrawerSize}\n                                title=\"Tamaño\"\n                              >\n                                <div className=\"col-12\">\n                                  <Box mt={1} width={\"100%\"}>\n                                    <Box\n                                      display={\n                                        optionsSelected.size.selected.length > 0\n                                          ? \"flex\"\n                                          : \"none\"\n                                      }\n                                      alignItems={\"center\"}\n                                      justifyContent={\"space-between\"}\n                                      mb={3}\n                                    >\n                                      <Typography\n                                        sx={{\n                                          fontWeight: \"bolder\",\n                                        }}\n                                      >\n                                        Tamaños seleccionados\n                                      </Typography>\n                                      {/* <Button variant=\"contained\" color=\"success\" onClick={toggleDrawerSize}>Finalizar</Button> */}\n                                    </Box>\n\n                                    {optionsSelected.size &&\n                                      optionsSelected.size.selected.map(\n                                        (option: any, i: number) => {\n                                          return (\n                                            <Box\n                                              key={i}\n                                              display={\"flex\"}\n                                              width={\"100%\"}\n                                              mb={2}\n                                            >\n                                              <TextField\n                                                variant=\"outlined\"\n                                                fullWidth\n                                                disabled\n                                                value={option}\n                                                size=\"small\"\n                                              ></TextField>\n                                              <Button\n                                                variant=\"text\"\n                                                onClick={() =>\n                                                  deleteProperty(\"size\", option)\n                                                }\n                                              >\n                                                <DeleteIcon\n                                                  sx={{ color: \"#000\" }}\n                                                />\n                                              </Button>\n                                            </Box>\n                                          );\n                                        }\n                                      )}\n                                    {optionsSelected.size.selected.length >\n                                      0 && <br />}\n\n                                    {sizes.map((color, i) => (\n                                      <PropertyOption\n                                        key={i}\n                                        label={color.label}\n                                        property={\"size\"}\n                                        data={optionsSelected}\n                                        onSelected={selectedOption}\n                                      />\n                                    ))}\n\n                                    <Box\n                                      display={\"flex\"}\n                                      justifyContent={\"end\"}\n                                    >\n                                      <Button\n                                        variant=\"contained\"\n                                        onClick={toggleDrawerSize}\n                                      >\n                                        Finalizar\n                                      </Button>\n                                    </Box>\n                                  </Box>\n                                </div>\n                              </DrawerCustom>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* BOXES */}\n                        {\n                          values.type === \"1\" && (\n                            <div className=\"card mt-3\">\n                              <div className=\"d-md-flex align-content-stretch\">\n                                <div className=\"card-body flex-fill ms-md-4\">\n                                  <Box\n                                    display={\"flex\"}\n                                    alignItems={\"center\"}\n                                    justifyContent={\"space-between\"}\n                                  >\n                                    <Typography\n                                      variant=\"h6\"\n                                      sx={{ fontWeight: \"bold\" }}\n                                    >\n                                      Cajas\n                                    </Typography>\n                                    <IconButton onClick={createBoxClick}>\n                                      <AddCircleIcon\n                                        fontSize=\"large\"\n                                        color=\"primary\"\n                                      />\n                                    </IconButton>\n                                  </Box>\n\n                                  <Typography>\n                                    Agrega cajas con diferentes tamaños.\n                                  </Typography>\n                                  <hr />\n\n                                  <DragAndDropBoxes\n                                    boxes={boxes}\n                                    deleteBox={deleteBox}\n                                    editBoxClick={editBoxClick}\n                                  ></DragAndDropBoxes>\n                                </div>\n                              </div>\n                            </div>\n                          )\n                        }\n\n                        {/*Fotos */}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                IMÁGENES\n                              </Typography>\n                              <Box mt={3}>\n                                <UploadImages\n                                  text=\"Máximo 10 imágenes\"\n                                  limit={10}\n                                  onAddImage={uploadImages}\n                                  Listimages={images}\n                                ></UploadImages>\n\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Estado y canales de venta */}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                Estado y canales de venta{\" \"}\n                              </Typography>\n                              <Box\n                                className=\"row mt-3\"\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                              >\n                                <div className=\"col-7 mb-2\">\n                                  <MultiSelectChip\n                                    options={salesChannels}\n                                    onSelect={onChannels}\n                                    selected={[]}\n                                    label=\"Canales de venta\"\n                                  />\n                                </div>\n\n                                <div className=\"col-3 d-flex justify-content-end\">\n                                  <Stack\n                                    direction=\"row\"\n                                    spacing={1}\n                                    alignItems=\"center\"\n                                  >\n                                    <Typography>Inactivo</Typography>\n                                    <AntSwitch\n                                      defaultChecked\n                                      inputProps={{\n                                        \"aria-label\": \"ant design\",\n                                      }}\n                                    />\n                                    <Typography>Activo</Typography>\n                                  </Stack>\n                                </div>\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Video*/}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                Video\n                              </Typography>\n                              <Box className=\"row mt-3\">\n                                <Typography variant=\"body2\" className=\"mb-2\">\n                                  Pega un link de Youtube o de Vimeo sobre tu\n                                  producto\n                                </Typography>\n                                <Field\n                                  as={TextField}\n                                  className=\"col-12\"\n                                  size=\"small\"\n                                  name=\"youtube_url\"\n                                  type=\"text\"\n                                  label=\"\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  placeholder=\"https://\"\n                                  margin=\"normal\"\n                                  helperText={\n                                    touched.youtube_url &&\n                                      errors.youtube_url ? (\n                                      <ErrorMessage name=\"youtube_url\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.youtube_url && errors.youtube_url\n                                      ? true\n                                      : false\n                                  }\n                                  onChange={handleChange}\n                                />\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/*Productos relacionados*/}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                Etiquetas y productos relacionados\n                              </Typography>\n                              <Box className=\"row mt-3\">\n                                <div className=\"col-12 mb-2\">\n                                  <MultiSelectChip\n                                    options={products}\n                                    onSelect={onRelatedProductos}\n                                    selected={[]}\n                                    label=\"Productos relacionados\"\n                                  />\n                                </div>\n                                <div className=\"col-12 mb-2\">\n                                  <AddChips\n                                    onChipAdd={onTags}\n                                    label=\"Agrega etiquetas\"\n                                  ></AddChips>\n                                </div>\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* SEO */}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                SEO{\" \"}\n                              </Typography>\n                              <Box\n                                className=\"row mt-3\"\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                              >\n                                <Field\n                                  as={TextField}\n                                  className=\"col-12\"\n                                  size=\"small\"\n                                  value={values.seo_title ? values.seo_title : \"\"}\n                                  name=\"seo_title\"\n                                  type=\"text\"\n                                  label=\"Titulo\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  helperText={\n                                    touched.seo_title && errors.seo_title ? (\n                                      <ErrorMessage name=\"seo_title\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.seo_title && errors.seo_title\n                                      ? true\n                                      : false\n                                  }\n                                  onChange={(e: any) => {\n                                    const url = generateURL(e.target.value);\n                                    setValues({ ...values, seo_url: url });\n\n                                    handleChange(e);\n                                  }}\n                                />\n                                <div className=\"col-12\">\n                                  <Editor\n                                    name=\"seo_description\"\n                                    value={values?.seo_description ? values.seo_description : \"\"}\n                                    onChange={handleChange}\n                                  />\n                                </div>\n\n                                <Field\n                                  as={TextField}\n                                  className=\"col-12 mt-3\"\n                                  size=\"small\"\n                                  name=\"seo_url\"\n                                  type=\"text\"\n                                  label=\"URL\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  InputProps={{\n                                    startAdornment: (\n                                      <InputAdornment position=\"start\">\n                                        {baseURL}\n                                      </InputAdornment>\n                                    ),\n                                  }}\n                                  helperText={\n                                    touched.seo_url && errors.seo_url ? (\n                                      <ErrorMessage name=\"seo_url\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.seo_url && errors.seo_url\n                                      ? true\n                                      : false\n                                  }\n                                  onChange={handleChange}\n                                />\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* COSTOS */}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                COSTOS{\" \"}\n                              </Typography>\n                              <Box\n                                className=\"row mt-3\"\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                              >\n                                <Field\n                                  as={TextField}\n                                  className=\"col-6 mt-3\"\n                                  InputProps={{\n                                    startAdornment: (\n                                      <InputAdornment position=\"start\">\n                                        $\n                                      </InputAdornment>\n                                    ),\n                                  }}\n                                  size=\"small\"\n                                  name=\"last_cost\"\n                                  type=\"number\"\n                                  label=\"Último costo\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  onChange={handleChange}\n                                  helperText={\n                                    touched.last_cost && errors.last_cost ? (\n                                      <ErrorMessage name=\"last_cost\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.last_cost && errors.last_cost\n                                      ? true\n                                      : false\n                                  }\n                                />\n\n                                <Field\n                                  as={TextField}\n                                  className=\"col-6 mt-3\"\n                                  InputProps={{\n                                    startAdornment: (\n                                      <InputAdornment position=\"start\">\n                                        $\n                                      </InputAdornment>\n                                    ),\n                                  }}\n                                  size=\"small\"\n                                  name=\"average_cost\"\n                                  type=\"number\"\n                                  label=\"Costo promedio\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  onChange={handleChange}\n                                  helperText={\n                                    touched.average_cost &&\n                                      errors.average_cost ? (\n                                      <ErrorMessage name=\"average_cost\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.average_cost && errors.average_cost\n                                      ? true\n                                      : false\n                                  }\n                                />\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Inventario */}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                INVENTARIO{\" \"}\n                              </Typography>\n                              <Box\n                                className=\"row mt-3\"\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                              >\n                                <Field\n                                  as={TextField}\n                                  value={values.max_inventory ? values.max_inventory : \"\"}\n                                  className=\"col-6 mt-3\"\n                                  InputProps={{\n                                    endAdornment: (\n                                      <InputAdornment position=\"end\">\n                                        Unidades\n                                      </InputAdornment>\n                                    ),\n                                  }}\n                                  size=\"small\"\n                                  name=\"max_inventory\"\n                                  type=\"number\"\n                                  label=\"Cantidad mínima en inventario\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  onChange={handleChange}\n                                  helperText={\n                                    touched.max_inventory &&\n                                      errors.max_inventory ? (\n                                      <ErrorMessage name=\"max_inventory\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.max_inventory &&\n                                      errors.max_inventory\n                                      ? true\n                                      : false\n                                  }\n                                />\n                                <Field\n                                  as={TextField}\n                                  value={values.min_inventory ? values.min_inventory : \"\"}\n                                  className=\"col-6 mt-3\"\n                                  InputProps={{\n                                    endAdornment: (\n                                      <InputAdornment position=\"end\">\n                                        Unidades\n                                      </InputAdornment>\n                                    ),\n                                  }}\n                                  size=\"small\"\n                                  name=\"min_inventory\"\n                                  type=\"number\"\n                                  label=\"Cantidad Máxima en inventario\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  onChange={handleChange}\n                                  helperText={\n                                    touched.min_inventory &&\n                                      errors.max_inventory ? (\n                                      <ErrorMessage name=\"min_inventory\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.min_inventory &&\n                                      errors.min_inventory\n                                      ? true\n                                      : false\n                                  }\n                                />\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Monedero*/}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                MONEDERO Y DIVISA{\" \"}\n                              </Typography>\n                              <Box\n                                className=\"row mt-3\"\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                              >\n                                <div className=\"col-6 mt-3\">\n                                  <FormControl sx={{ width: \"100%\" }}>\n                                    <InputLabel id=\"demo-simple-select-helper-label\">\n                                      Divisa\n                                    </InputLabel>\n                                    <Select\n                                      value={values.currency ? values.currency : \"\"}\n                                      labelId=\"demo-simple-select-helper-label\"\n                                      id=\"supplier\"\n                                      name=\"currency\"\n                                      placeholder=\"Tipo de producto\"\n                                      label=\"Tipo de producto\"\n                                      onChange={handleChange}\n                                      fullWidth\n                                      error={\n                                        touched.currency && errors.currency\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      <MenuItem value={\"MXN\"}>\n                                        Peso (MXN)\n                                      </MenuItem>\n                                      <MenuItem value={\"USD\"}>\n                                        Dólar (USD)\n                                      </MenuItem>\n                                    </Select>\n                                  </FormControl>\n                                </div>\n                                <Field\n                                  as={TextField}\n                                  value={values.bonification_percentage ? values.bonification_percentage : \"\"}\n                                  className=\"col-6 mt-3\"\n                                  InputProps={{\n                                    endAdornment: (\n                                      <InputAdornment position=\"end\">\n                                        %\n                                      </InputAdornment>\n                                    ),\n                                  }}\n                                  name=\"bonification_percentage\"\n                                  type=\"number\"\n                                  label=\"Bonificación en monedero\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  onChange={handleChange}\n                                  helperText={\n                                    touched.bonification_percentage &&\n                                      errors.bonification_percentage ? (\n                                      <ErrorMessage name=\"bonification_percentage\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.bonification_percentage &&\n                                      errors.bonification_percentage\n                                      ? true\n                                      : false\n                                  }\n                                />\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Configuración*/}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                CONFIGURACIÓN{\" \"}\n                              </Typography>\n                              <Box\n                                className=\"row mt-3\"\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                              >\n                                <div className=\"col-4\">\n                                  <FormControl>\n                                    <FormLabel id=\"demo-radio-buttons-group-label\">\n                                      Usar costo\n                                    </FormLabel>\n                                    <RadioGroup\n                                      row\n                                      aria-labelledby=\"demo-radio-buttons-group-label\"\n                                      name=\"use_cost\"\n                                      value={values.use_cost ? values.use_cost : \"\"}\n                                      onChange={handleChange}\n                                    >\n                                      <FormControlLabel\n                                        value=\"ultimo\"\n                                        control={<Radio />}\n                                        label=\"Último\"\n                                      />\n                                      <FormControlLabel\n                                        value=\"promedio\"\n                                        control={<Radio />}\n                                        label=\"Promedio\"\n                                      />\n                                    </RadioGroup>\n                                  </FormControl>\n                                </div>\n                                <div className=\"col-4\">\n                                  <FormControlLabel\n                                    label=\"Maneja números de serie\"\n                                    control={\n                                      <Checkbox\n                                        name=\"has_serial_number\"\n                                        checked={values.has_serial_number ? values.has_serial_number : false}\n                                        onChange={handleChange}\n                                      />\n                                    }\n                                  />\n                                </div>\n                                <div className=\"col-4\">\n                                  <FormControlLabel\n                                    label=\"Permite números negativos en inventario\"\n                                    control={\n                                      <Checkbox\n                                        name=\"allow_negative\"\n                                        checked={values.allow_negative ? values.allow_negative : false}\n                                        onChange={handleChange}\n                                      />\n                                    }\n                                  />\n                                </div>\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        <Button\n                          type=\"submit\"\n                          variant=\"contained\"\n                          color=\"secondary\"\n                          className=\"mt-4\"\n                        >\n                          Guardar\n                        </Button>\n                      </div >\n                    </Form >\n                  )}\n                </Formik >\n              </div >\n            </div >\n          </div >\n        </div >\n      </MainLayout >\n\n      <CreateEditBoxes\n        open={isOpenBoxes}\n        handleClose={toggleBoxes}\n        type={actionBox}\n        addBox={addBox}\n        box={selectedBox}\n      />\n      <EditVariants\n        open={isOpenVariant}\n        handleClose={toggleVariant}\n        variant={selectedVariant}\n        updateVariants={updateVariants}\n        isphysical={isphysical}\n      />\n    </>\n  );\n};\n\nconst getProductsAfuer = async (id: string) => {\n  const { data, state, error }: Responsepetition = await getOneProduct(id);\n  if (state) {\n    // console.log(\"-data products:\", data)\n    return data\n  } else {\n    // console.log(\"Error de products:\", error)\n    return error\n  }\n}\n\n\nexport const getServerSideProps: GetServerSideProps = async ({ req, params }) => {\n  const { id } = params as { id: string };\n  /* console.log(\"header:\", req.headers)\n  console.log(\"Cokkies:\", req.cookies) */\n  const data = await getProductsAfuer(id)\n  /*  console.log(\"Producto server\", data)\n   console.log(\"ID; \", id) */\n  return {\n    props: { id, data: data.name }\n  }\n\n}\n\n\nexport default withAuth(Products);\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/products/create.tsx",["774","775"],[],"import React, { useEffect, useState } from \"react\";\nimport MainLayout from \"@/components/layout/main\";\n\nimport {\n  Typography,\n  TextField,\n  Button,\n  Box,\n  FormControl,\n  InputLabel,\n  Select,\n  Checkbox,\n  Grid,\n  Input,\n} from \"@mui/material\";\nimport Drawer from \"@mui/material/Drawer\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport { notify } from \"@/utils/constants\";\nimport * as Yup from \"yup\";\nimport dynamic from \"next/dynamic\";\nimport MultiSelectChip from \"@/components/ui/Multiselect\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport { getAllCategories } from \"@/services/CategoryService\";\nimport { Category } from \"@/types/Category\";\nimport Alert from \"@mui/material/Alert\";\nimport { getAllFamilies } from \"@/services/FamilyService\";\nimport { Supplier } from \"@/types/Supplier\";\nimport { Brand } from \"@/types/Brand\";\nimport { getAllBrands } from \"@/services/BrandService\";\nimport { InputAdornment } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport ArrowBackIosIcon from \"@mui/icons-material/ArrowBackIos\";\nimport { makeStyles, styled } from \"@mui/styles\";\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport Switch, { SwitchProps } from \"@mui/material/Switch\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport Stack from \"@mui/material/Stack\";\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Family } from \"@/types/Family\";\nimport { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\nimport dayjs, { Dayjs } from \"dayjs\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport CreateEditBoxes from \"@/components/products/CreateEditBoxes\";\nimport { BoxCustom } from \"@/components/products/BoxCustom\";\nimport { DragAndDrop } from \"@/components/ui/DragAndDrop\";\nimport { DragAndDropBoxes } from \"@/components/products/DragAndDropBoxes\";\nimport { DrawerCustom } from \"@/components/ui/DrawerCustom\";\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { PropertyOption } from \"@/components/products/PropertyOption\";\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\nimport Chip from \"@mui/material/Chip\";\nimport { UploadImages } from \"@/components/ui/UploadImages\";\nimport { getAllSuppliers } from \"@/services/SupplierService\";\nimport { createProduct, getAllProducts } from \"@/services/ProductsService\";\nimport { Product } from \"@/types/Product\";\nimport AddChips from \"@/components/ui/AddChips\";\nimport { uploadImage } from \"@/services/ImagesService\";\nimport { Responsepetition } from \"@/types/Responsepetition\";\nimport BorderColorIcon from \"@mui/icons-material/BorderColor\";\nimport DataTableCustomSimple from \"@/components/ui/DataTableCustomSimple\";\nimport EditVariants from \"@/components/products/EditVariants\";\nimport { getAllTypesOfClients } from \"@/services/TypeOfClientService\";\nimport { TypeOfClient } from \"@/types/TypeOfClient\";\nimport { IVAs } from \"@/helpers/IvasData\";\nimport { salesChannels } from \"@/helpers/ChannelsData\";\nimport { sizes } from \"@/helpers/SizeData\";\nimport { typesProduct } from \"@/helpers/TypesProducts\";\nimport { colors } from \"@/helpers/ColorsData\";\nimport { satCodes } from \"@/helpers/SatCode\";\nimport withAuth from \"../auth\";\nimport { useRouter } from \"next/router\";\n\nconst Editor = dynamic(() => import(\"../../components/ui/Editor\"), { ssr: false });\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(\"Nombre requerido\"),\n  SAT_code: Yup.string().required(\"Modelo es requerido\"),\n  supplier: Yup.string().required(\"Proveedor es requerido\"),\n  category: Yup.string().required(\"Categoria es requerido\"),\n  brand: Yup.string().required(\"Marca es requerida\"),\n  family: Yup.string().required(\"Familia es requerida\"),\n\n});\n\ninterface FormValues {\n  name: string;\n  sku: string;\n  description: string;\n  model: string;\n  max_discount: number;\n  iva: number;\n  barcode: string;\n  SAT_code: string;\n  brand: string;\n  supplier: string;\n  measuring_unit: number;\n  comercial_info: number;\n  category: string;\n  organization: string;\n  family: string;\n  seo_title: string;\n  seo_url: string;\n  seo_description: string;\n  retail_price: number;\n  type: string;\n  youtube_url: string;\n  bonification_percentage: number;\n  last_cost: number;\n  average_cost: number;\n  min_inventory: number;\n  max_inventory: number;\n  has_serial_number: boolean;\n  allow_negative: boolean;\n  use_cost: string;\n  relatedProducts: string[];\n  tags_history: string;\n  height: number;\n  width: number;\n  thick: number;\n  weight: number;\n  currency: string;\n  base_price: number;\n}\n\ninterface option {\n  id: string;\n  label: string;\n}\n\ninterface VariantField {\n  id: string;\n  price: number;\n}\n\ninterface Variant {\n  id: string;\n  color?: string;\n  size?: string;\n  price?: string;\n}\n\ninterface property {\n  name: string;\n  values: any[];\n}\n\nfunction convertirArregloAObjeto(arreglo: any) {\n  const objeto: any = {};\n\n  arreglo.forEach((item: any) => {\n    objeto[item.id] = {\n      id: item.id,\n      name: item.label,\n      descuento: 0,\n      total: 0\n    };\n  });\n\n  return objeto;\n}\n\nfunction convertPrices(objeto: any) {\n  const arreglo = [];\n  for (const key in objeto) {\n    if (objeto.hasOwnProperty(key)) {\n      const { id, name, descuento } = objeto[key];\n      arreglo.push({ id, name, discount: descuento });\n    }\n  }\n  return arreglo;\n}\n\n\nconst AntSwitch = styled(Switch)(({ theme }: any) => ({\n  width: 28,\n  height: 16,\n  padding: 0,\n  display: \"flex\",\n  \"&:active\": {\n    \"& .MuiSwitch-thumb\": {\n      width: 15,\n    },\n    \"& .MuiSwitch-switchBase.Mui-checked\": {\n      transform: \"translateX(9px)\",\n    },\n  },\n  \"& .MuiSwitch-switchBase\": {\n    padding: 2,\n    \"&.Mui-checked\": {\n      transform: \"translateX(12px)\",\n      color: \"#fff\",\n      \"& + .MuiSwitch-track\": {\n        opacity: 1,\n        backgroundColor: theme.palette.mode === \"dark\" ? \"#177ddc\" : \"#25476a\",\n      },\n    },\n  },\n  \"& .MuiSwitch-thumb\": {\n    boxShadow: \"0 2px 4px 0 rgb(0 35 11 / 20%)\",\n    width: 12,\n    height: 12,\n    borderRadius: 6,\n    transition: theme.transitions.create([\"width\"], {\n      duration: 200,\n    }),\n  },\n  \"& .MuiSwitch-track\": {\n    borderRadius: 16 / 2,\n    opacity: 1,\n    backgroundColor:\n      theme.palette.mode === \"dark\"\n        ? \"rgba(255,255,255,.35)\"\n        : \"rgba(0,0,0,.25)\",\n    boxSizing: \"border-box\",\n  },\n}));\n\nconst baseURL = \"https://www.musicalesdoris.com/products/\";\n\nconst generateURL = (title: string) => {\n  /* AGREGAR LOGICA PARA GENERAR LA URL */\n  return title;\n};\n\nfunction imprimirFormData(formData: any) {\n  for (let pair of formData.entries()) {\n    console.log(pair[0] + \": \" + pair[1]);\n  }\n}\n\nconst Products = () => {\n\n  const router = useRouter();\n\n  const [categories, setCategories] = useState<any[]>([]);\n  const [typeofClients, setTypeofClients] = useState<any[]>([]);\n  const [typeofClientsFields, setTypeofClientsFields] = useState<any[]>([]);\n  const [retailPrice, setRetailPrice] = useState<number>(0);\n  const [products, setProducts] = useState<any[]>([]);\n  const [properties, setProperties] = useState<property[]>([]);\n  const [optionsSelected, setOptionsSelected] = useState<any>({\n    color: {\n      selected: [],\n    },\n    size: {\n      selected: [],\n    },\n  });\n  const [propertySelected, setPropertySelected] = useState<string>();\n  const [families, setFamilies] = useState<Family[]>([]);\n  const [suppliers, setSuppliers] = useState<Supplier[]>([]);\n  const [brands, setBrands] = useState<Brand[]>([]);\n  const [boxes, setBoxes] = useState<any[]>([]);\n\n  const [height, setheight] = useState<number>(0);\n  const [width, setwidth] = useState<number>(0);\n  const [thick, setThick] = useState<number>(0);\n  const [weight, setWeight] = useState<number>(0);\n\n\n  const [ivas, setIvas] = useState<any>([]);\n  const [channelsSelected, setChannelsSelected] = useState<any>([]);\n  const [showBoxes, setShowBoxes] = useState<any>(false);\n\n  const [productosRelated, setProductosRelated] = useState<any>([]);\n  const [tagsSelected, settagsSelected] = useState<any>([]);\n\n  const [errorPage, setErrorPage] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenColor, setIsOpenColor] = useState(false);\n  const [isOpenSize, setIsOpenSize] = useState(false);\n  const [isOpenBoxes, setIsOpenBoxes] = useState(false);\n  const [isOpenVariant, setIsOpenVariant] = useState(false);\n  const [isphysical, setIsphysical] = useState<boolean>(false);\n\n  const [fields, setFields] = useState([]);\n  const [actionBox, setActionBox] = useState(\"\");\n  const [selectedBox, setSelectedBox] = useState<number | null>();\n  const [selectedVariant, setSelectedVariant] = useState<any | null>();\n  const [fieldsValues, setFieldsValues] = useState<any>({});\n  const [images, setImages] = useState<any[]>([]);\n  const [variants, setVariants] = useState<any>([]);\n  const [variantsFields, setVariantsFields] = useState<any>({});\n  const [dataVariants, setDataVariants] = useState<any>([]);\n\n  const columnsWithDimensions = [\n    { name: \"id\", label: \"Variante\" },\n    { name: \"price\", label: \"Precio\" },\n    { name: \"dimensions\", label: \"Dimensiones\" },\n    { name: \"stock\", label: \"Stock\" },\n    {\n      name: \"acciones\",\n      Label: \"Acciones\",\n      options: {\n        customBodyRenderLite: (index: number) => {\n          const result = dataVariants[index];\n          return (\n            <>\n              <div className=\"d-flex gap-3\">\n                <Button\n                  variant={\"text\"}\n                  color=\"primary\"\n                  onClick={() => editVariantClick(result)}\n                >\n                  <BorderColorIcon />\n                </Button>\n              </div>\n            </>\n          );\n        },\n      },\n    },\n  ];\n\n  const columnsWithOutDimensions = [\n    { name: \"id\", label: \"Variante\" },\n    { name: \"price\", label: \"Precio\" },\n    { name: \"stock\", label: \"Stock\" },\n    {\n      name: \"acciones\",\n      Label: \"Acciones\",\n      options: {\n        customBodyRenderLite: (index: number) => {\n          const result = dataVariants[index];\n          return (\n            <>\n              <div className=\"d-flex gap-3\">\n                <Button\n                  variant={\"text\"}\n                  color=\"primary\"\n                  onClick={() => editVariantClick(result)}\n                >\n                  <BorderColorIcon />\n                </Button>\n              </div>\n            </>\n          );\n        },\n      },\n    },\n  ];\n\n  const TransformDataVariant = (variants: any) => {\n    //SE PASA LOS VALORES DE LAS VARIANTES A ARREGLO PARA LA TABLA\n    const arreglo = [];\n    for (const key in variants) {\n      if (variants.hasOwnProperty(key)) {\n        const { id, price, height, width, thick, weight, stock } =\n          variants[key];\n        arreglo.push({\n          id,\n          price: \"$ \" + price,\n          dimensions:\n            height +\n            \" cm X \" +\n            width +\n            \" cm X \" +\n            thick +\n            \" con \" +\n            weight +\n            \" kg\",\n          stock,\n        });\n      }\n    }\n    return arreglo;\n  };\n\n  useEffect(() => {\n    //SE MODIFICAN LOS VALORES DE LA VARIANTES\n    const newdata = TransformDataVariant(variantsFields)\n    setDataVariants(newdata)\n  }, [variantsFields])\n\n  useEffect(() => {\n\n    const newValues = { ...typeofClientsFields }\n    for (const key in newValues) {\n      const discount = newValues[key].descuento\n      const total = retailPrice - (retailPrice * (discount / 100))\n      newValues[key].total = total\n\n    }\n\n  }, [retailPrice])\n\n\n  useEffect(() => {\n    const fieldsPrices = convertirArregloAObjeto(typeofClients)\n    setTypeofClientsFields(fieldsPrices)\n    console.log(\"campos: \", fieldsPrices)\n  }, [typeofClients])\n\n\n\n  const geratingVariantField = (variants: any) => {\n    let variantsfield = {};\n    variants.map(({ id }: Variant) => {\n      let prePrice = retailPrice;\n      let preheight = height;\n      let prewidth = width;\n      let prethick = thick;\n      let preweight = weight;\n      let prestock = 0;\n\n      //Si ya existe esta variante conservar los valores anteriores\n      if (variantsFields.hasOwnProperty(id)) {\n        prePrice = variantsFields[id].price;\n        preheight = variantsFields[id].height;\n        prewidth = variantsFields[id].width;\n        prethick = variantsFields[id].thick;\n        preweight = variantsFields[id].weight;\n        prestock = variantsFields[id].stock;\n      }\n\n      variantsfield = {\n        ...variantsfield,\n        [id]: {\n          id: id,\n          price: prePrice,\n          height: preheight,\n          width: prewidth,\n          thick: prethick,\n          weight: preweight,\n          stock: prestock,\n        },\n      };\n    });\n    setVariantsFields(variantsfield);\n  };\n\n  const handleVariants = (e: any) => {\n    const { name, value } = e.target;\n    const val = variantsFields[name];\n    const newValueVariant = {\n      ...variantsFields,\n      [name]: { ...val, price: value },\n    };\n    setVariantsFields(newValueVariant);\n  };\n\n  useEffect(() => {\n    const colors: string[] = optionsSelected.color.selected;\n    const sizes: string[] = optionsSelected.size.selected;\n    const variant = generateCombinations(colors, sizes);\n    geratingVariantField(variant);\n    setVariants(variant);\n  }, [optionsSelected]);\n\n  function generateCombinations(colors: string[], sizes: string[]) {\n    const combinations: any[] = [];\n    if (colors.length === 0 && sizes.length === 0) {\n      // Si ambos arreglos están vacíos, retorna una combinación vacía\n      return combinations;\n    }\n    if (colors.length === 0) {\n      // Si el arreglo de colores está vacío, genera combinaciones solo con los tamaños\n      for (let j = 0; j < sizes.length; j++) {\n        const id = `-${j}`;\n        const size = sizes[j];\n        combinations.push({ id: size, size, price: 0 });\n      }\n    } else if (sizes.length === 0) {\n      // Si el arreglo de tamaños está vacío, genera combinaciones solo con los colores\n      for (let i = 0; i < colors.length; i++) {\n        const id = `${i}-`;\n        const color = colors[i];\n        combinations.push({ id: color, color, price: 0 });\n      }\n    } else {\n      // Genera combinaciones con colores y tamaños\n      for (let i = 0; i < colors.length; i++) {\n        for (let j = 0; j < sizes.length; j++) {\n          const id = `${i}-${j}`;\n          const color = colors[i];\n          const size = sizes[j];\n          combinations.push({\n            id: color + \" / \" + size,\n            color,\n            size,\n            price: 0,\n          });\n        }\n      }\n    }\n\n    return combinations;\n  }\n\n  const toggleDrawer = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const toggleDrawerColor = () => {\n    setIsOpenColor(!isOpenColor);\n  };\n\n  const toggleDrawerSize = () => {\n    setIsOpenSize(!isOpenSize);\n  };\n\n  const toggleBoxes = () => {\n    setIsOpenBoxes(!isOpenBoxes);\n  };\n\n  const toggleVariant = () => {\n    setIsOpenVariant(!isOpenVariant);\n  };\n\n  const onChangeFields = (e: any, tag: any, isDate: boolean) => {\n    if (isDate) {\n      setFieldsValues({\n        ...fieldsValues,\n        [tag]: e,\n      });\n    } else {\n      setFieldsValues({\n        ...fieldsValues,\n        [tag]: e.target.value,\n      });\n    }\n  };\n\n  useEffect(() => {\n    console.log(ivas)\n  }, [ivas])\n\n\n\n  const handleSubmit = async (values: FormValues) => {\n    /* let iva: string[] | any= []\n\n    if (ivas.length > 0) {\n      iva = ivas.map((iva: any) => iva.label);\n    } */\n\n    const iva = ivas.map((iva: any) => iva.id);\n    const producstid = productosRelated.map((product: any) => product.id);\n    const channelsid = channelsSelected.map((channel: any) => channel.id);\n    const newVariants = variants.map((variant: any) => {\n      if (isphysical) {\n        return {\n          ...variant,\n          price: parseInt(variantsFields[variant.id].price, 10),\n          stock: parseInt(variantsFields[variant.id].stock, 10),\n          dimensions: {\n            height: parseInt(variantsFields[variant.id].height, 10),\n            width: parseInt(variantsFields[variant.id].width, 10),\n            thick: parseInt(variantsFields[variant.id].thick, 10),\n            weight: parseInt(variantsFields[variant.id].weight, 10),\n          },\n        };\n      } else {\n        return {\n          ...variant,\n          price: parseInt(variantsFields[variant.id].price, 10),\n          stock: parseInt(variantsFields[variant.id].stock, 10),\n        };\n      }\n    });\n\n    const newImages = images.map((img) => img.file)\n    const arrayPrices = convertPrices(typeofClientsFields)\n    const prices = arrayPrices;\n    const dimensions = {\n      height: values.height,\n      width: values.width,\n      thick: values.thick,\n      weight: values.weight\n    }\n\n    const dataform: any = {\n      ...values,\n      iva,\n      relatedProducts: producstid,\n      tags: tagsSelected,\n      channel: channelsid,\n      variations: newVariants,\n      boxes: boxes,\n\n    };\n\n\n    const formData = new FormData();\n    for (const property in dataform) {\n      if (dataform.hasOwnProperty(property)) {\n        if (Array.isArray(dataform[property])) {\n          formData.append(property, JSON.stringify(dataform[property]));\n        } else {\n          formData.append(property, dataform[property]);\n        }\n      }\n    }\n    formData.append(\"prices\", JSON.stringify(prices));\n    if (values.type === \"1\") {\n      formData.append(\"dimensions\", JSON.stringify(dimensions));\n    }\n\n    // formData.append(\"iva\", JSON.stringify(iva));\n    newImages.forEach((image, index) => {\n      formData.append(`images`, image);\n    });\n\n    // imprimirFormData(formData);\n\n    const { data, state, error }: Responsepetition = await createProduct(formData);\n    if (state) {\n      notify(\"success\", \"Se ha creado exitosamente\");\n      router.push('../products');\n    } else {\n      notify(\"error\", error.message);\n    }\n  };\n\n  const updateVariants = (values: any) => {\n    const { id, price, stock, thick, weight, width } = values;\n    const preValues = variantsFields[id];\n    const newValuesVariants = {\n      ...variantsFields,\n      [id]: values,\n    };\n    setVariantsFields(newValuesVariants);\n  };\n\n  const onIvas = (almacenes: any) => {\n    setIvas(almacenes);\n  };\n\n  const onChannels = (almacenes: any) => {\n    setChannelsSelected(almacenes);\n  };\n\n  const onRelatedProductos = (almacenes: any) => {\n    setProductosRelated(almacenes);\n  };\n\n  const onTags = (almacenes: any) => {\n    settagsSelected(almacenes);\n  };\n\n  const getCategories = async () => {\n    const { data, state, error }: Responsepetition = await getAllCategories();\n    if (state) {\n      const newdata = data.map((category: Category) => {\n        return {\n          id: category.id,\n          label: category.name,\n        };\n      });\n\n      setCategories(newdata);\n    } else {\n      setCategories([]);\n      setErrorPage(error.message);\n    }\n  };\n\n  const getTypeOfClients = async () => {\n    const { data, state, error }: Responsepetition = await getAllTypesOfClients();\n    if (state) {\n      const newdata = data.map((type: TypeOfClient) => {\n        return {\n          id: type.id,\n          label: type.name,\n        };\n      });\n      setTypeofClients(newdata);\n    } else {\n      setTypeofClients([]);\n      setErrorPage(error.message);\n    }\n  };\n\n  const getProducts = async () => {\n    const { data, state, error }: Responsepetition = await getAllProducts();\n    if (state) {\n      const newdata = data.map((product: Product) => {\n        return {\n          id: product.id,\n          label: product.name + \"\" + product.sku,\n        };\n      });\n\n      setProducts(newdata);\n    } else {\n      setProducts([]);\n      setErrorPage(error.message);\n    }\n  };\n\n  const getFamilies = async () => {\n    const { data, state, error }: Responsepetition = await getAllFamilies();\n    if (state) {\n      setFamilies(data);\n    } else {\n      setFamilies([]);\n      setErrorPage(error.message);\n    }\n  };\n\n  const getSuppliers = async () => {\n    const { data, state, error }: Responsepetition = await getAllSuppliers();\n    if (state) {\n      setSuppliers(data);\n    } else {\n      setSuppliers([]);\n      setErrorPage(\"Error al cargar los proveedores\");\n    }\n  };\n\n  const getBrands = async () => {\n    const { data, state, error }: Responsepetition = await getAllBrands();\n    if (state) {\n      setBrands(data);\n    } else {\n      setBrands([]);\n      setErrorPage(error.message);\n    }\n  };\n\n  const addBox = (newBox: any) => {\n    setBoxes([...boxes, newBox]);\n  };\n\n  const deleteBox = (id: number) => {\n    const newBoxes = boxes.filter((box, i) => box.id !== id);\n    setBoxes(newBoxes);\n  };\n\n  const uploadImages = (images: any) => {\n    setImages(images);\n  };\n\n  const selectedOption = (property: string, value: string) => {\n    const selected = optionsSelected[property].selected;\n    const isthere = selected.find((select: string) => select === value);\n    if (isthere) {\n      const newselect = selected.filter((select: string) => select !== value);\n      setOptionsSelected({\n        ...optionsSelected,\n        [property]: { selected: newselect },\n      });\n    } else {\n      setOptionsSelected({\n        ...optionsSelected,\n        [property]: { selected: [...selected, value] },\n      });\n    }\n  };\n\n  const deleteProperty = (property: string, value: string) => {\n    const selected = optionsSelected[property].selected;\n    const newselect = selected.filter((select: string) => select !== value);\n    setOptionsSelected({\n      ...optionsSelected,\n      [property]: { selected: newselect },\n    });\n  };\n\n  const createBoxClick = async () => {\n    setActionBox(\"create\");\n    setSelectedBox(null);\n    toggleBoxes();\n  };\n\n  const editVariantClick = async (variant: any) => {\n    const { id } = variant;\n    const variantValues = variantsFields[id];\n    setSelectedVariant(variantValues);\n    toggleVariant();\n  };\n\n  const editBoxClick = async (index: number) => {\n    setActionBox(\"edit\");\n    setSelectedBox(index);\n    toggleBoxes();\n  };\n\n  const onChangePrice = (e: any, id: any) => {\n    const value = e.target.value;\n    const prevalue = typeofClientsFields[id];\n    const newValuesPrices = {\n      ...typeofClientsFields,\n      [id]: {\n        ...prevalue,\n        descuento: value,\n        total: retailPrice - (retailPrice * (value / 100))\n      }\n    }\n\n    setTypeofClientsFields(newValuesPrices)\n\n  }\n\n  const calculatePorcent = (base: number, porcent: number) => {\n    const discount = base * (porcent / 100);\n    return base - discount;\n  };\n\n  useEffect(() => {\n    getCategories();\n    getFamilies();\n    getBrands();\n    getSuppliers();\n    getProducts();\n    getTypeOfClients();\n  }, []);\n\n  return (\n    <>\n      <MainLayout>\n        <div className=\"content__header content__boxed overlapping\">\n          <div className=\"content__wrap\">\n            <div className=\"content__header content__boxed overlapping\">\n              <div className=\"content__wrap\">\n                {errorPage.trim() != \"\" && (\n                  <Alert severity=\"error\">{errorPage}</Alert>\n                )}\n                <h1 className=\"page-title mb-0 mt-2 font fs-2\">\n                  CREAR NUEVO PRODUCTO\n                </h1>\n\n                <Formik\n                  initialValues={{\n                    name: \"\",\n                    sku: \"\",\n                    description: \"\",\n                    model: \"\",\n                    max_discount: 0,\n                    iva: 0,\n                    barcode: \"\",\n                    SAT_code: \"\",\n                    brand: \"\",\n                    supplier: \"\",\n                    measuring_unit: 0,\n                    comercial_info: 0,\n                    category: \"\",\n                    relatedProducts: [],\n                    organization: \"\",\n                    family: \"\",\n                    seo_title: \"\",\n                    seo_url: \"\",\n                    seo_description: \"\",\n                    type: \"\",\n                    youtube_url: \"\",\n                    bonification_percentage: 0,\n                    last_cost: 0,\n                    average_cost: 0,\n                    min_inventory: 0,\n                    max_inventory: 0,\n                    has_serial_number: false,\n                    allow_negative: false,\n                    use_cost: \"\",\n                    tags_history: \"\",\n                    base_price: 0,\n                    retail_price: 0,\n                    currency: \"\",\n                    height: 0,\n                    width: 0,\n                    thick: 0,\n                    weight: 0,\n\n                  }}\n                  validationSchema={validationSchema}\n                  onSubmit={handleSubmit}\n                >\n                  {({\n                    isSubmitting,\n                    errors,\n                    touched,\n                    handleChange,\n                    values,\n                    setValues,\n                  }) => (\n                    <Form>\n                      <div className=\"content__boxed\">\n                        {/*Informac */}\n                        <div className=\"card mt-2\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                Información básica\n                              </Typography>\n                              <Box className=\"row mt-3\">\n                                <Field\n                                  as={TextField}\n                                  size=\"small\"\n                                  name=\"name\"\n                                  type=\"text\"\n                                  label=\"Nombre\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  helperText={\n                                    touched.name && errors.name ? (\n                                      <ErrorMessage name=\"name\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.name && errors.name ? true : false\n                                  }\n                                  onChange={handleChange}\n                                />\n                                <Field\n                                  as={TextField}\n                                  className=\"col-12 mt-4\"\n                                  size=\"small\"\n                                  name=\"barcode\"\n                                  type=\"text\"\n                                  label=\"Código de barras\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  helperText={\n                                    touched.barcode && errors.barcode ? (\n                                      <ErrorMessage name=\"barcode\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.barcode && errors.barcode\n                                      ? true\n                                      : false\n                                  }\n                                  onChange={handleChange}\n                                />\n                              </Box>\n\n                              <Typography mt={2} mb={1}>\n                                Descripción\n                              </Typography>\n                              <Editor\n                                name=\"description\"\n                                value={values.description}\n                                onChange={handleChange}\n                              />\n                            </div>\n                          </div>\n                        </div>\n\n                        {/*Caracteristicas */}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                Características\n                              </Typography>\n                              <Grid container>\n                                <Grid item xs={6}>\n                                  <FormControl fullWidth>\n                                    <Field\n                                      as={TextField}\n                                      name=\"model\"\n                                      type=\"text\"\n                                      label=\"Modelo\"\n                                      fullWidth\n                                      variant=\"outlined\"\n                                      margin=\"normal\"\n                                      helperText={\n                                        touched.model && errors.model ? (\n                                          <ErrorMessage name=\"model\" />\n                                        ) : (\n                                          \"\"\n                                        )\n                                      }\n                                      error={\n                                        touched.model && errors.model\n                                          ? true\n                                          : false\n                                      }\n                                      onChange={handleChange}\n                                    />\n                                  </FormControl>\n                                </Grid>\n                                <Grid item xs={6}>\n                                  <FormControl fullWidth>\n                                    <Field\n                                      as={TextField}\n                                      name=\"max_discount\"\n                                      type=\"number\"\n                                      label=\"Max. Descuento\"\n                                      fullWidth\n                                      variant=\"outlined\"\n                                      margin=\"normal\"\n                                      helperText={\n                                        touched.max_discount &&\n                                          errors.max_discount ? (\n                                          <ErrorMessage name=\"max_discount\" />\n                                        ) : (\n                                          \"\"\n                                        )\n                                      }\n                                      error={\n                                        touched.max_discount &&\n                                          errors.max_discount\n                                          ? true\n                                          : false\n                                      }\n                                      onChange={handleChange}\n                                    />\n                                  </FormControl>\n                                </Grid>\n                                <div className=\"col-12 mt-3\">\n                                  <FormControl sx={{ width: \"100%\" }}>\n                                    <InputLabel id=\"demo-simple-select-helper-label\">\n                                      Tipo de producto\n                                    </InputLabel>\n                                    <Select\n                                      value={values.type}\n                                      labelId=\"demo-simple-select-helper-label\"\n                                      id=\"supplier\"\n                                      name=\"type\"\n                                      placeholder=\"Tipo de producto\"\n                                      label=\"Tipo de producto\"\n                                      onChange={(e) => {\n                                        if (e.target.value === \"1\")\n                                          setIsphysical(true);\n                                        else setIsphysical(false);\n                                        handleChange(e);\n                                      }}\n                                      fullWidth\n                                      error={\n                                        touched.type && errors.type\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      {typesProduct.map((types, index) => (\n                                        <MenuItem key={index} value={types.id}>\n                                          {types.label}\n                                        </MenuItem>\n                                      ))}\n                                    </Select>\n                                  </FormControl>\n                                </div>\n                                <div className=\"col-12 mb-2\">\n                                  <MultiSelectChip\n                                    options={IVAs}\n                                    onSelect={onIvas}\n                                    selected={[]}\n                                    label=\"IVA\"\n                                  />\n                                </div>\n\n                                <div className=\"col-6\">\n                                  <FormControl sx={{ width: \"100%\" }}>\n                                    <InputLabel id=\"demo-simple-select-helper-label\">\n                                      Código SAT\n                                    </InputLabel>\n                                    <Select\n                                      value={values.SAT_code}\n                                      labelId=\"demo-simple-select-helper-label\"\n                                      id=\"SAT_code\"\n                                      name=\"SAT_code\"\n                                      placeholder=\"Código SAT\"\n                                      label=\"Código SAT\"\n                                      onChange={handleChange}\n                                      fullWidth\n                                      error={\n                                        touched.SAT_code && errors.SAT_code\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      {satCodes.map((code, index) => (\n                                        <MenuItem key={index} value={code.id}>\n                                          {code.label}\n                                        </MenuItem>\n                                      ))}\n                                    </Select>\n                                  </FormControl>\n                                </div>\n                                <div className=\"col-6\">\n                                  <FormControl sx={{ width: \"100%\" }}>\n                                    <InputLabel id=\"demo-simple-select-helper-label\">\n                                      Proveedor\n                                    </InputLabel>\n                                    <Select\n                                      value={values.supplier}\n                                      labelId=\"demo-simple-select-helper-label\"\n                                      id=\"supplier\"\n                                      name=\"supplier\"\n                                      placeholder=\"supplier\"\n                                      label=\"supplier\"\n                                      onChange={handleChange}\n                                      fullWidth\n                                      error={\n                                        touched.supplier && errors.supplier\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      {suppliers.map((supplier, index) => (\n                                        <MenuItem\n                                          key={index}\n                                          value={supplier.id}\n                                        >\n                                          {supplier.name}\n                                        </MenuItem>\n                                      ))}\n                                    </Select>\n                                  </FormControl>\n                                </div>\n\n                                <div className=\"col-12 mt-3\">\n                                  <FormControl sx={{ width: \"100%\" }}>\n                                    <InputLabel id=\"demo-simple-select-helper-label\">\n                                      Categorias\n                                    </InputLabel>\n                                    <Select\n                                      value={values.category}\n                                      labelId=\"demo-simple-select-helper-label\"\n                                      id=\"supplier\"\n                                      name=\"category\"\n                                      placeholder=\"Categoria\"\n                                      label=\"Categoria\"\n                                      onChange={handleChange}\n                                      fullWidth\n                                      error={\n                                        touched.category && errors.category\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      {categories.map((types, index) => (\n                                        <MenuItem key={index} value={types.id}>\n                                          {types.label}\n                                        </MenuItem>\n                                      ))}\n                                    </Select>\n                                  </FormControl>\n                                </div>\n\n                                <div className=\"col-6 mt-3\">\n                                  <FormControl sx={{ width: \"100%\" }}>\n                                    <InputLabel id=\"demo-simple-select-helper-label\">\n                                      Marca\n                                    </InputLabel>\n                                    <Select\n                                      value={values.brand}\n                                      labelId=\"demo-simple-select-helper-label\"\n                                      id=\"brand\"\n                                      name=\"brand\"\n                                      placeholder=\"Marca\"\n                                      label=\"Marca\"\n                                      onChange={handleChange}\n                                      fullWidth\n                                      error={\n                                        touched.brand && errors.brand\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      {brands.map((brand, index) => (\n                                        <MenuItem key={index} value={brand.id}>\n                                          {brand.name}\n                                        </MenuItem>\n                                      ))}\n                                    </Select>\n                                  </FormControl>\n                                </div>\n                                <div className=\"col-6 mt-3\">\n                                  <FormControl sx={{ width: \"100%\" }}>\n                                    <InputLabel id=\"demo-simple-select-helper-label\">\n                                      Familia\n                                    </InputLabel>\n                                    <Select\n                                      value={values.family}\n                                      labelId=\"demo-simple-select-helper-label\"\n                                      id=\"family\"\n                                      name=\"family\"\n                                      placeholder=\"Familia\"\n                                      label=\"Familia\"\n                                      onChange={(e) => {\n                                        const tipo: any = families.find(\n                                          (family: any) =>\n                                            family.id === e.target.value\n                                        );\n                                        setFields(tipo.fields);\n                                        handleChange(e);\n                                      }}\n                                      fullWidth\n                                      error={\n                                        touched.family && errors.family\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      {families.map((family, index) => (\n                                        <MenuItem key={index} value={family.id}>\n                                          {family.name}\n                                        </MenuItem>\n                                      ))}\n                                    </Select>\n                                  </FormControl>\n                                </div>\n                                <Box\n                                  display={\"flex\"}\n                                  flexWrap={\"wrap\"}\n                                  gap={3}\n                                  sx={{ marginTop: \"20px !important\" }}\n                                  mb={3}\n                                >\n                                  {/* Campos dinamicos     */}\n\n                                  {fields &&\n                                    fields.map(({ tag, type }, index) => (\n                                      <div key={index}>\n                                        {type === \"date\" ? (\n                                          <LocalizationProvider\n                                            dateAdapter={AdapterDayjs}\n                                          >\n                                            <DatePicker\n                                              label={tag}\n                                              disabled={type == \"view\"}\n                                              sx={{ with: \"100px\" }}\n                                              value={fieldsValues[tag]}\n                                              onChange={(newValue: any) =>\n                                                onChangeFields(\n                                                  newValue,\n                                                  tag,\n                                                  true\n                                                )\n                                              }\n                                            />\n                                          </LocalizationProvider>\n                                        ) : (\n                                          <Field\n                                            label={tag}\n                                            as={TextField}\n                                            type={type}\n                                            name={tag}\n                                            id={tag}\n                                            placeholder={tag}\n                                            value={fieldsValues[tag]}\n                                            onChange={(newValue: any) =>\n                                              onChangeFields(\n                                                newValue,\n                                                tag,\n                                                false\n                                              )\n                                            }\n                                          />\n                                        )}\n\n                                        {touched[tag] && errors[tag] && (\n                                          <div>{errors[tag]}</div>\n                                        )}\n                                      </div>\n                                    ))}\n                                </Box>\n                              </Grid>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* PRECIOS */}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                PRECIOS{\" \"}\n                              </Typography>\n                              <Box\n                                className=\"row mt-3\"\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                              >\n                                <Field\n                                  className=\"col-12\"\n                                  as={TextField}\n                                  type=\"number\"\n                                  min={0}\n                                  step=\"1\"\n                                  name=\"retail_price\"\n                                  label=\"Precio base\"\n                                  InputProps={{\n                                    startAdornment: (\n                                      <InputAdornment position=\"start\">\n                                        $\n                                      </InputAdornment>\n                                    ),\n                                  }}\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  fullWidth\n                                  helperText={\n                                    touched.retail_price && errors.retail_price ? (\n                                      <ErrorMessage name=\"retail_price\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.base_price && errors.base_price\n                                      ? true\n                                      : false\n                                  }\n                                  onChange={(e: any) => {\n                                    setRetailPrice(e.target.value)\n                                    handleChange(e);\n                                  }}\n                                />\n\n\n                                {\n                                  typeofClients?.map((type, i) => {\n                                    return <Box key={i} className=\"row col-12\">\n                                      <Typography className=\"col-4 mt-4\">\n                                        {type.label}\n                                      </Typography>\n\n\n                                      <Field\n                                        as={TextField}\n                                        className=\"col-4 mt-3\"\n                                        size=\"small\"\n                                        value={typeofClientsFields[type.id]?.descuento}\n                                        type=\"number\"\n                                        label=\"Descuento\"\n                                        fullWidth\n                                        variant=\"outlined\"\n                                        margin=\"normal\"\n                                        onChange={(e: any) => {\n                                          onChangePrice(e, type.id)\n                                        }}\n                                        InputProps={{\n                                          startAdornment: (\n                                            <InputAdornment position=\"start\">\n                                              %\n                                            </InputAdornment>\n                                          ),\n                                        }}\n                                      />\n\n\n\n                                      <Field\n                                        as={TextField}\n                                        className=\"col-4 mt-3\"\n                                        disabled\n                                        value={typeofClientsFields[type.id]?.total}\n                                        size=\"small\"\n                                        name=\"school_agreement\"\n                                        type=\"text\"\n                                        placeholder={\"Total\"}\n                                        fullWidth\n                                        variant=\"outlined\"\n                                        margin=\"normal\"\n                                      />\n                                    </Box>\n                                  })\n                                }\n\n\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Dimensiones*/}\n                        {\n                          values.type === \"1\" &&\n                          <div className=\"card mt-3\">\n                            <div className=\"d-md-flex align-content-stretch\">\n                              <div className=\"card-body flex-fill ms-md-4\">\n                                <Typography\n                                  variant=\"h6\"\n                                  sx={{ fontWeight: \"bold\" }}\n                                >\n                                  Dimensiones del producto\n                                </Typography>\n                                <Box className=\"row mt-3\">\n                                  <Field\n                                    className=\"col-6\"\n                                    as={TextField}\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    name=\"height\"\n                                    label=\"Alto\"\n                                    InputProps={{\n                                      endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                          cm\n                                        </InputAdornment>\n                                      ),\n                                    }}\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    fullWidth\n                                    helperText={\n                                      touched.height && errors.height ? (\n                                        <ErrorMessage name=\"height\" />\n                                      ) : (\n                                        \"\"\n                                      )\n                                    }\n                                    error={\n                                      touched.height && errors.height\n                                        ? true\n                                        : false\n                                    }\n                                    onChange={(e: any) => {\n                                      setheight(e.target.value)\n                                      handleChange(e)\n                                    }}\n                                  />\n                                  <Field\n                                    className=\"col-6\"\n                                    as={TextField}\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    name=\"width\"\n                                    label=\"Ancho\"\n                                    InputProps={{\n                                      endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                          cm\n                                        </InputAdornment>\n                                      ),\n                                    }}\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    fullWidth\n                                    helperText={\n                                      touched.width && errors.width ? (\n                                        <ErrorMessage name=\"width\" />\n                                      ) : (\n                                        \"\"\n                                      )\n                                    }\n                                    error={\n                                      touched.width && errors.width\n                                        ? true\n                                        : false\n                                    }\n                                    onChange={(e: any) => {\n                                      setwidth(e.target.value)\n                                      handleChange(e)\n                                    }}\n                                  />\n                                  <Field\n                                    className=\"col-6 mt-3\"\n                                    as={TextField}\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    name=\"thick\"\n                                    label=\"Largo\"\n                                    InputProps={{\n                                      endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                          cm\n                                        </InputAdornment>\n                                      ),\n                                    }}\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    fullWidth\n                                    helperText={\n                                      touched.thick && errors.thick ? (\n                                        <ErrorMessage name=\"thick\" />\n                                      ) : (\n                                        \"\"\n                                      )\n                                    }\n                                    error={\n                                      touched.thick && errors.thick\n                                        ? true\n                                        : false\n                                    }\n                                    onChange={(e: any) => {\n                                      setThick(e.target.value)\n                                      handleChange(e)\n                                    }}\n                                  />\n                                  <Field\n                                    className=\"col-6 mt-3\"\n                                    as={TextField}\n                                    type=\"number\"\n                                    min={0}\n                                    step=\"0.1\"\n                                    name=\"weight\"\n                                    label=\"Peso\"\n                                    InputProps={{\n                                      endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                          Kilos\n                                        </InputAdornment>\n                                      ),\n                                    }}\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    fullWidth\n                                    helperText={\n                                      touched.weight && errors.weight ? (\n                                        <ErrorMessage name=\"weight\" />\n                                      ) : (\n                                        \"\"\n                                      )\n                                    }\n                                    error={\n                                      touched.weight && errors.weight\n                                        ? true\n                                        : false\n                                    }\n                                    onChange={(e: any) => {\n                                      setWeight(e.target.value)\n                                      handleChange(e)\n                                    }}\n                                  />\n                                </Box>\n                              </div>\n                            </div>\n                          </div>\n                        }\n\n                        {/*VARIANTES*/}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Box\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                                justifyContent={\"space-between\"}\n                              >\n                                <Typography\n                                  variant=\"h6\"\n                                  sx={{ fontWeight: \"bold\" }}\n                                >\n                                  Variantes\n                                </Typography>\n                                <IconButton onClick={toggleDrawer}>\n                                  <AddCircleIcon\n                                    fontSize=\"large\"\n                                    color=\"primary\"\n                                  />\n                                </IconButton>\n                              </Box>\n\n                              <Typography\n                                display={\n                                  optionsSelected.color.selected.length > 0 ||\n                                    optionsSelected.size.selected.length > 0\n                                    ? \"none\"\n                                    : \"flex\"\n                                }\n                              >\n                                Combina diferentes propiedades de tu producto.\n                                Ejemplo: color + tamaño.\n                              </Typography>\n\n                              <Box\n                                display={\n                                  optionsSelected.color.selected.length < 1 &&\n                                    optionsSelected.size.selected.length < 1\n                                    ? \"none\"\n                                    : \"flex\"\n                                }\n                                flexDirection={\"column\"}\n                              >\n                                <Box\n                                  className=\"mt-3\"\n                                  display={\"flex\"}\n                                  alignItems={\"center\"}\n                                  gap={5}\n                                  flexWrap={\"wrap\"}\n                                >\n                                  {optionsSelected.color.selected.length >\n                                    0 && (\n                                      <Typography sx={{ marginTop: \"10px\" }}>\n                                        Colores:\n                                      </Typography>\n                                    )}\n\n                                  {optionsSelected.color.selected.length > 0 &&\n                                    optionsSelected.color.selected.map(\n                                      (color: any, i: number) => {\n                                        return (\n                                          <Chip\n                                            key={i}\n                                            label={color}\n                                            color=\"secondary\"\n                                          />\n                                        );\n                                      }\n                                    )}\n\n                                  {optionsSelected.size.selected.length > 0 && (\n                                    <Typography sx={{ marginTop: \"10px\" }}>\n                                      Tamaños:\n                                    </Typography>\n                                  )}\n                                  {optionsSelected.size.selected.length > 0 &&\n                                    optionsSelected.size.selected.map(\n                                      (color: string, i: number) => {\n                                        return (\n                                          <Chip\n                                            key={i}\n                                            label={color}\n                                            color=\"primary\"\n                                          />\n                                        );\n                                      }\n                                    )}\n                                </Box>\n\n                                {/* Tabla de variantes */}\n\n                                <DataTableCustomSimple\n                                  data={dataVariants}\n                                  columns={\n                                    values.type === \"1\"\n                                      ? columnsWithDimensions\n                                      : columnsWithOutDimensions\n                                  }\n                                />\n                              </Box>\n\n                              <DrawerCustom\n                                isOpen={isOpen}\n                                toggleDrawer={toggleDrawer}\n                                title=\"Propiedades\"\n                              >\n                                <Box>\n                                  <Box\n                                    display={\"flex\"}\n                                    alignItems={\"center\"}\n                                    justifyContent={\"space-between\"}\n                                  >\n                                    <Typography>Color</Typography>\n                                    <IconButton onClick={toggleDrawerColor}>\n                                      <NavigateNextIcon />\n                                    </IconButton>\n                                  </Box>\n\n                                  <Box\n                                    display={\"flex\"}\n                                    alignItems={\"center\"}\n                                    justifyContent={\"space-between\"}\n                                  >\n                                    <Typography>Tamaño</Typography>\n                                    <IconButton onClick={toggleDrawerSize}>\n                                      <NavigateNextIcon />\n                                    </IconButton>\n                                  </Box>\n                                </Box>\n                              </DrawerCustom>\n\n                              <DrawerCustom\n                                isOpen={isOpenColor}\n                                toggleDrawer={toggleDrawerColor}\n                                title=\"Color\"\n                              >\n                                <div className=\"col-12\">\n                                  <Box mt={3} width={\"100%\"}>\n                                    <Box\n                                      display={\n                                        optionsSelected.color.selected.length >\n                                          0\n                                          ? \"flex\"\n                                          : \"none\"\n                                      }\n                                      alignItems={\"center\"}\n                                      justifyContent={\"space-between\"}\n                                      mb={3}\n                                    >\n                                      <Typography\n                                        sx={{\n                                          fontWeight: \"bolder\",\n                                          marginBottom: \"10px\",\n                                        }}\n                                      >\n                                        Colores seleccionados\n                                      </Typography>\n                                      <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={toggleDrawerColor}\n                                      >\n                                        Finalizar\n                                      </Button>\n                                    </Box>\n\n                                    <Box>\n                                      {optionsSelected.color &&\n                                        optionsSelected.color.selected.map(\n                                          (option: any, i: number) => {\n                                            return (\n                                              <Box\n                                                key={i}\n                                                display={\"flex\"}\n                                                width={\"100%\"}\n                                                mb={2}\n                                              >\n                                                <TextField\n                                                  variant=\"outlined\"\n                                                  fullWidth\n                                                  disabled\n                                                  value={option}\n                                                  size=\"small\"\n                                                ></TextField>\n                                                <Button\n                                                  variant=\"text\"\n                                                  onClick={() =>\n                                                    deleteProperty(\n                                                      \"color\",\n                                                      option\n                                                    )\n                                                  }\n                                                >\n                                                  <DeleteIcon\n                                                    sx={{ color: \"#000\" }}\n                                                  />\n                                                </Button>\n                                              </Box>\n                                            );\n                                          }\n                                        )}\n\n                                      {optionsSelected.color.selected.length >\n                                        0 && <br />}\n                                    </Box>\n\n                                    {colors.map((color, i) => (\n                                      <PropertyOption\n                                        key={i}\n                                        label={color.label}\n                                        property={\"color\"}\n                                        data={optionsSelected}\n                                        color={color.code}\n                                        onSelected={selectedOption}\n                                      />\n                                    ))}\n\n                                    <Box\n                                      display={\"flex\"}\n                                      justifyContent={\"end\"}\n                                    >\n                                      <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={toggleDrawerColor}\n                                      >\n                                        Finalizar\n                                      </Button>\n                                    </Box>\n                                  </Box>\n                                </div>\n                              </DrawerCustom>\n\n                              <DrawerCustom\n                                isOpen={isOpenSize}\n                                toggleDrawer={toggleDrawerSize}\n                                title=\"Tamaño\"\n                              >\n                                <div className=\"col-12\">\n                                  <Box mt={1} width={\"100%\"}>\n                                    <Box\n                                      display={\n                                        optionsSelected.size.selected.length > 0\n                                          ? \"flex\"\n                                          : \"none\"\n                                      }\n                                      alignItems={\"center\"}\n                                      justifyContent={\"space-between\"}\n                                      mb={3}\n                                    >\n                                      <Typography\n                                        sx={{\n                                          fontWeight: \"bolder\",\n                                        }}\n                                      >\n                                        Tamaños seleccionados\n                                      </Typography>\n                                      {/* <Button variant=\"contained\" color=\"success\" onClick={toggleDrawerSize}>Finalizar</Button> */}\n                                    </Box>\n\n                                    {optionsSelected.size &&\n                                      optionsSelected.size.selected.map(\n                                        (option: any, i: number) => {\n                                          return (\n                                            <Box\n                                              key={i}\n                                              display={\"flex\"}\n                                              width={\"100%\"}\n                                              mb={2}\n                                            >\n                                              <TextField\n                                                variant=\"outlined\"\n                                                fullWidth\n                                                disabled\n                                                value={option}\n                                                size=\"small\"\n                                              ></TextField>\n                                              <Button\n                                                variant=\"text\"\n                                                onClick={() =>\n                                                  deleteProperty(\"size\", option)\n                                                }\n                                              >\n                                                <DeleteIcon\n                                                  sx={{ color: \"#000\" }}\n                                                />\n                                              </Button>\n                                            </Box>\n                                          );\n                                        }\n                                      )}\n                                    {optionsSelected.size.selected.length >\n                                      0 && <br />}\n\n                                    {sizes.map((color, i) => (\n                                      <PropertyOption\n                                        key={i}\n                                        label={color.label}\n                                        property={\"size\"}\n                                        data={optionsSelected}\n                                        onSelected={selectedOption}\n                                      />\n                                    ))}\n\n                                    <Box\n                                      display={\"flex\"}\n                                      justifyContent={\"end\"}\n                                    >\n                                      <Button\n                                        variant=\"contained\"\n                                        onClick={toggleDrawerSize}\n                                      >\n                                        Finalizar\n                                      </Button>\n                                    </Box>\n                                  </Box>\n                                </div>\n                              </DrawerCustom>\n                            </div>\n                          </div>\n                        </div>\n\n\n\n\n                        {/* BOXES */}\n                        {\n                          values.type === \"1\" && (\n                            <div className=\"card mt-3\">\n                              <div className=\"d-md-flex align-content-stretch\">\n                                <div className=\"card-body flex-fill ms-md-4\">\n                                  <Box\n                                    display={\"flex\"}\n                                    alignItems={\"center\"}\n                                    justifyContent={\"space-between\"}\n                                  >\n                                    <Typography\n                                      variant=\"h6\"\n                                      sx={{ fontWeight: \"bold\" }}\n                                    >\n                                      Cajas\n                                    </Typography>\n                                    <IconButton onClick={createBoxClick}>\n                                      <AddCircleIcon\n                                        fontSize=\"large\"\n                                        color=\"primary\"\n                                      />\n                                    </IconButton>\n                                  </Box>\n\n                                  <Typography>\n                                    Agrega cajas con diferentes tamaños.\n                                  </Typography>\n                                  <hr />\n\n                                  <DragAndDropBoxes\n                                    boxes={boxes}\n                                    deleteBox={deleteBox}\n                                    editBoxClick={editBoxClick}\n                                  ></DragAndDropBoxes>\n                                </div>\n                              </div>\n                            </div>\n                          )\n                        }\n\n                        {/*Fotos */}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                IMÁGENES\n                              </Typography>\n                              <Box mt={3}>\n                                <UploadImages\n                                  text=\"Máximo 10 imágenes\"\n                                  limit={10}\n                                  onAddImage={uploadImages}\n                                ></UploadImages>\n\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Estado y canales de venta */}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                Estado y canales de venta{\" \"}\n                              </Typography>\n                              <Box\n                                className=\"row mt-3\"\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                              >\n                                <div className=\"col-7 mb-2\">\n                                  <MultiSelectChip\n                                    options={salesChannels}\n                                    onSelect={onChannels}\n                                    selected={[]}\n                                    label=\"Canales de venta\"\n                                  />\n                                </div>\n\n                                <div className=\"col-3 d-flex justify-content-end\">\n                                  <Stack\n                                    direction=\"row\"\n                                    spacing={1}\n                                    alignItems=\"center\"\n                                  >\n                                    <Typography>Inactivo</Typography>\n                                    <AntSwitch\n                                      defaultChecked\n                                      inputProps={{\n                                        \"aria-label\": \"ant design\",\n                                      }}\n                                    />\n                                    <Typography>Activo</Typography>\n                                  </Stack>\n                                </div>\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Video*/}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                Video\n                              </Typography>\n                              <Box className=\"row mt-3\">\n                                <Typography variant=\"body2\" className=\"mb-2\">\n                                  Pega un link de Youtube o de Vimeo sobre tu\n                                  producto\n                                </Typography>\n                                <Field\n                                  as={TextField}\n                                  className=\"col-12\"\n                                  size=\"small\"\n                                  name=\"youtube_url\"\n                                  type=\"text\"\n                                  label=\"\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  placeholder=\"https://\"\n                                  margin=\"normal\"\n                                  helperText={\n                                    touched.youtube_url &&\n                                      errors.youtube_url ? (\n                                      <ErrorMessage name=\"youtube_url\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.youtube_url && errors.youtube_url\n                                      ? true\n                                      : false\n                                  }\n                                  onChange={handleChange}\n                                />\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/*Productos relacionados*/}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                Etiquetas y productos relacionados\n                              </Typography>\n                              <Box className=\"row mt-3\">\n                                <div className=\"col-12 mb-2\">\n                                  <MultiSelectChip\n                                    options={products}\n                                    onSelect={onRelatedProductos}\n                                    selected={[]}\n                                    label=\"Productos relacionados\"\n                                  />\n                                </div>\n                                <div className=\"col-12 mb-2\">\n                                  <AddChips\n                                    onChipAdd={onTags}\n                                    label=\"Agrega etiquetas\"\n                                  ></AddChips>\n                                </div>\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              {/* SEO */}\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                SEO{\" \"}\n                              </Typography>\n                              <Box\n                                className=\"row mt-3\"\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                              >\n                                <Field\n                                  as={TextField}\n                                  className=\"col-12\"\n                                  size=\"small\"\n                                  name=\"seo_title\"\n                                  type=\"text\"\n                                  label=\"Titulo\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  helperText={\n                                    touched.seo_title && errors.seo_title ? (\n                                      <ErrorMessage name=\"seo_title\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.seo_title && errors.seo_title\n                                      ? true\n                                      : false\n                                  }\n                                  onChange={(e: any) => {\n                                    const url = generateURL(e.target.value);\n                                    setValues({ ...values, seo_url: url });\n\n                                    handleChange(e);\n                                  }}\n                                />\n                                <div className=\"col-12\">\n                                  <Editor\n                                    name=\"seo_description\"\n                                    value={values.seo_description}\n                                    onChange={handleChange}\n                                  />\n                                </div>\n\n                                <Field\n                                  as={TextField}\n                                  className=\"col-12 mt-3\"\n                                  size=\"small\"\n                                  name=\"seo_url\"\n                                  type=\"text\"\n                                  label=\"URL\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  InputProps={{\n                                    startAdornment: (\n                                      <InputAdornment position=\"start\">\n                                        {baseURL}\n                                      </InputAdornment>\n                                    ),\n                                  }}\n                                  helperText={\n                                    touched.seo_url && errors.seo_url ? (\n                                      <ErrorMessage name=\"seo_url\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.seo_url && errors.seo_url\n                                      ? true\n                                      : false\n                                  }\n                                  onChange={handleChange}\n                                />\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n\n\n                        {/* COSTOS */}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                COSTOS{\" \"}\n                              </Typography>\n                              <Box\n                                className=\"row mt-3\"\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                              >\n                                <Field\n                                  as={TextField}\n                                  className=\"col-6 mt-3\"\n                                  InputProps={{\n                                    startAdornment: (\n                                      <InputAdornment position=\"start\">\n                                        $\n                                      </InputAdornment>\n                                    ),\n                                  }}\n                                  size=\"small\"\n                                  name=\"last_cost\"\n                                  type=\"number\"\n                                  label=\"Último costo\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  onChange={handleChange}\n                                  helperText={\n                                    touched.last_cost && errors.last_cost ? (\n                                      <ErrorMessage name=\"last_cost\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.last_cost && errors.last_cost\n                                      ? true\n                                      : false\n                                  }\n                                />\n\n                                <Field\n                                  as={TextField}\n                                  className=\"col-6 mt-3\"\n                                  InputProps={{\n                                    startAdornment: (\n                                      <InputAdornment position=\"start\">\n                                        $\n                                      </InputAdornment>\n                                    ),\n                                  }}\n                                  size=\"small\"\n                                  name=\"average_cost\"\n                                  type=\"number\"\n                                  label=\"Costo promedio\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  onChange={handleChange}\n                                  helperText={\n                                    touched.average_cost &&\n                                      errors.average_cost ? (\n                                      <ErrorMessage name=\"average_cost\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.average_cost && errors.average_cost\n                                      ? true\n                                      : false\n                                  }\n                                />\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Inventario */}\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                INVENTARIO{\" \"}\n                              </Typography>\n                              <Box\n                                className=\"row mt-3\"\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                              >\n                                <Field\n                                  as={TextField}\n                                  className=\"col-6 mt-3\"\n                                  InputProps={{\n                                    endAdornment: (\n                                      <InputAdornment position=\"end\">\n                                        Unidades\n                                      </InputAdornment>\n                                    ),\n                                  }}\n                                  size=\"small\"\n                                  name=\"max_inventory\"\n                                  type=\"number\"\n                                  label=\"Cantidad mínima en inventario\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  onChange={handleChange}\n                                  helperText={\n                                    touched.max_inventory &&\n                                      errors.max_inventory ? (\n                                      <ErrorMessage name=\"max_inventory\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.max_inventory &&\n                                      errors.max_inventory\n                                      ? true\n                                      : false\n                                  }\n                                />\n                                <Field\n                                  as={TextField}\n                                  className=\"col-6 mt-3\"\n                                  InputProps={{\n                                    endAdornment: (\n                                      <InputAdornment position=\"end\">\n                                        Unidades\n                                      </InputAdornment>\n                                    ),\n                                  }}\n                                  size=\"small\"\n                                  name=\"min_inventory\"\n                                  type=\"number\"\n                                  label=\"Cantidad Máxima en inventario\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  onChange={handleChange}\n                                  helperText={\n                                    touched.min_inventory &&\n                                      errors.max_inventory ? (\n                                      <ErrorMessage name=\"min_inventory\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.min_inventory &&\n                                      errors.min_inventory\n                                      ? true\n                                      : false\n                                  }\n                                />\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              {/* Monedero*/}\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                MONEDERO Y DIVISA{\" \"}\n                              </Typography>\n                              <Box\n                                className=\"row mt-3\"\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                              >\n                                <div className=\"col-6 mt-3\">\n                                  <FormControl sx={{ width: \"100%\" }}>\n                                    <InputLabel id=\"demo-simple-select-helper-label\">\n                                      Divisa\n                                    </InputLabel>\n                                    <Select\n                                      value={values.currency}\n                                      labelId=\"demo-simple-select-helper-label\"\n                                      id=\"supplier\"\n                                      name=\"currency\"\n                                      placeholder=\"Tipo de producto\"\n                                      label=\"Tipo de producto\"\n                                      onChange={handleChange}\n                                      fullWidth\n                                      error={\n                                        touched.currency && errors.currency\n                                          ? true\n                                          : false\n                                      }\n                                    >\n                                      <MenuItem value={\"MXN\"}>\n                                        Peso (MXN)\n                                      </MenuItem>\n                                      <MenuItem value={\"USD\"}>\n                                        Dólar (USD)\n                                      </MenuItem>\n                                    </Select>\n                                  </FormControl>\n                                </div>\n                                <Field\n                                  as={TextField}\n                                  className=\"col-6 mt-3\"\n                                  InputProps={{\n                                    endAdornment: (\n                                      <InputAdornment position=\"end\">\n                                        %\n                                      </InputAdornment>\n                                    ),\n                                  }}\n                                  name=\"bonification_percentage\"\n                                  type=\"number\"\n                                  label=\"Bonificación en monedero\"\n                                  fullWidth\n                                  variant=\"outlined\"\n                                  margin=\"normal\"\n                                  onChange={handleChange}\n                                  helperText={\n                                    touched.bonification_percentage &&\n                                      errors.bonification_percentage ? (\n                                      <ErrorMessage name=\"bonification_percentage\" />\n                                    ) : (\n                                      \"\"\n                                    )\n                                  }\n                                  error={\n                                    touched.bonification_percentage &&\n                                      errors.bonification_percentage\n                                      ? true\n                                      : false\n                                  }\n                                />\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"card mt-3\">\n                          <div className=\"d-md-flex align-content-stretch\">\n                            <div className=\"card-body flex-fill ms-md-4\">\n                              {/* Monedero*/}\n                              <Typography\n                                variant=\"h6\"\n                                sx={{ fontWeight: \"bold\" }}\n                              >\n                                CONFIGURACIÓN{\" \"}\n                              </Typography>\n                              <Box\n                                className=\"row mt-3\"\n                                display={\"flex\"}\n                                alignItems={\"center\"}\n                              >\n                                <div className=\"col-4\">\n                                  <FormControl>\n                                    <FormLabel id=\"demo-radio-buttons-group-label\">\n                                      Usar costo\n                                    </FormLabel>\n                                    <RadioGroup\n                                      row\n                                      aria-labelledby=\"demo-radio-buttons-group-label\"\n                                      name=\"use_cost\"\n                                      onChange={handleChange}\n                                    >\n                                      <FormControlLabel\n                                        value=\"ultimo\"\n                                        control={<Radio />}\n                                        label=\"Último\"\n                                      />\n                                      <FormControlLabel\n                                        value=\"promedio\"\n                                        control={<Radio />}\n                                        label=\"Promedio\"\n                                      />\n                                    </RadioGroup>\n                                  </FormControl>\n                                </div>\n                                <div className=\"col-4\">\n                                  <FormControlLabel\n                                    label=\"Maneja números de serie\"\n                                    control={\n                                      <Checkbox\n                                        name=\"has_serial_number\"\n                                        checked={values.has_serial_number}\n                                        onChange={handleChange}\n                                      />\n                                    }\n                                  />\n                                </div>\n                                <div className=\"col-4\">\n                                  <FormControlLabel\n                                    label=\"Permite números negativos en inventario\"\n                                    control={\n                                      <Checkbox\n                                        name=\"allow_negative\"\n                                        checked={values.allow_negative}\n                                        onChange={handleChange}\n                                      />\n                                    }\n                                  />\n                                </div>\n                              </Box>\n                            </div>\n                          </div>\n                        </div>\n\n                        <Button\n                          type=\"submit\"\n                          variant=\"contained\"\n                          color=\"secondary\"\n                          className=\"mt-4\"\n                        >\n                          Guardar\n                        </Button>\n                      </div >\n                    </Form >\n                  )}\n                </Formik >\n              </div >\n            </div >\n          </div >\n        </div >\n      </MainLayout >\n\n      <CreateEditBoxes\n        open={isOpenBoxes}\n        handleClose={toggleBoxes}\n        type={actionBox}\n        addBox={addBox}\n        box={selectedBox}\n      />\n      <EditVariants\n        open={isOpenVariant}\n        handleClose={toggleVariant}\n        variant={selectedVariant}\n        updateVariants={updateVariants}\n        isphysical={isphysical}\n      />\n    </>\n  );\n};\n\nexport default withAuth(Products);\n","/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/products/index.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/pages/stock.tsx",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/OffersService.ts",[],[],"/Users/danielvaldez/Desktop/dev/work/inventario-doris/inventario/src/services/StockService.ts",[],[],{"ruleId":"776","severity":1,"message":"777","line":132,"column":6,"nodeType":"778","endLine":132,"endColumn":12,"suggestions":"779"},{"ruleId":"780","severity":1,"message":"781","line":246,"column":23,"nodeType":"782","endLine":246,"endColumn":74},{"ruleId":"776","severity":1,"message":"783","line":81,"column":6,"nodeType":"778","endLine":81,"endColumn":12,"suggestions":"784"},{"ruleId":"780","severity":1,"message":"781","line":41,"column":17,"nodeType":"782","endLine":45,"endColumn":19},{"ruleId":"780","severity":1,"message":"781","line":125,"column":23,"nodeType":"782","endLine":130,"endColumn":25},{"ruleId":"776","severity":1,"message":"785","line":46,"column":6,"nodeType":"778","endLine":46,"endColumn":8,"suggestions":"786"},{"ruleId":"776","severity":1,"message":"787","line":53,"column":6,"nodeType":"778","endLine":53,"endColumn":8,"suggestions":"788"},{"ruleId":"776","severity":1,"message":"789","line":77,"column":6,"nodeType":"778","endLine":77,"endColumn":8,"suggestions":"790"},{"ruleId":"776","severity":1,"message":"791","line":107,"column":6,"nodeType":"778","endLine":107,"endColumn":12,"suggestions":"792"},{"ruleId":"776","severity":1,"message":"793","line":116,"column":6,"nodeType":"778","endLine":116,"endColumn":12,"suggestions":"794"},{"ruleId":"776","severity":1,"message":"795","line":30,"column":8,"nodeType":"778","endLine":30,"endColumn":10,"suggestions":"796"},{"ruleId":"776","severity":1,"message":"797","line":132,"column":6,"nodeType":"778","endLine":132,"endColumn":12,"suggestions":"798"},{"ruleId":"780","severity":1,"message":"781","line":266,"column":25,"nodeType":"782","endLine":266,"endColumn":75},{"ruleId":"776","severity":1,"message":"799","line":99,"column":6,"nodeType":"778","endLine":99,"endColumn":12,"suggestions":"800"},{"ruleId":"776","severity":1,"message":"801","line":14,"column":8,"nodeType":"778","endLine":14,"endColumn":10,"suggestions":"802"},{"ruleId":"803","severity":1,"message":"804","line":98,"column":18,"nodeType":"782","endLine":98,"endColumn":75},{"ruleId":"780","severity":1,"message":"781","line":98,"column":18,"nodeType":"782","endLine":98,"endColumn":75},{"ruleId":"776","severity":1,"message":"805","line":125,"column":6,"nodeType":"778","endLine":125,"endColumn":8,"suggestions":"806"},{"ruleId":"780","severity":1,"message":"781","line":247,"column":41,"nodeType":"782","endLine":251,"endColumn":43},{"ruleId":"776","severity":1,"message":"807","line":115,"column":6,"nodeType":"778","endLine":115,"endColumn":14,"suggestions":"808"},{"ruleId":"776","severity":1,"message":"809","line":169,"column":6,"nodeType":"778","endLine":169,"endColumn":12,"suggestions":"810"},{"ruleId":"776","severity":1,"message":"811","line":178,"column":6,"nodeType":"778","endLine":178,"endColumn":14,"suggestions":"812"},{"ruleId":"776","severity":1,"message":"813","line":39,"column":8,"nodeType":"778","endLine":39,"endColumn":14,"suggestions":"814"},{"ruleId":"776","severity":1,"message":"815","line":200,"column":6,"nodeType":"778","endLine":200,"endColumn":12,"suggestions":"816"},{"ruleId":"776","severity":1,"message":"817","line":220,"column":6,"nodeType":"778","endLine":220,"endColumn":14,"suggestions":"818"},{"ruleId":"780","severity":1,"message":"781","line":750,"column":47,"nodeType":"782","endLine":754,"endColumn":49},{"ruleId":"780","severity":1,"message":"781","line":785,"column":47,"nodeType":"782","endLine":789,"endColumn":49},{"ruleId":"780","severity":1,"message":"781","line":81,"column":11,"nodeType":"782","endLine":87,"endColumn":13},{"ruleId":"776","severity":1,"message":"819","line":36,"column":6,"nodeType":"778","endLine":36,"endColumn":14,"suggestions":"820"},{"ruleId":"780","severity":1,"message":"781","line":173,"column":27,"nodeType":"782","endLine":178,"endColumn":29},{"ruleId":"780","severity":1,"message":"781","line":37,"column":21,"nodeType":"782","endLine":42,"endColumn":23},{"ruleId":"776","severity":1,"message":"821","line":409,"column":6,"nodeType":"778","endLine":409,"endColumn":19,"suggestions":"822"},{"ruleId":"776","severity":1,"message":"823","line":433,"column":6,"nodeType":"778","endLine":433,"endColumn":21,"suggestions":"824"},{"ruleId":"776","severity":1,"message":"825","line":495,"column":6,"nodeType":"778","endLine":495,"endColumn":23,"suggestions":"826"},{"ruleId":"776","severity":1,"message":"827","line":903,"column":6,"nodeType":"778","endLine":903,"endColumn":8,"suggestions":"828"},{"ruleId":"776","severity":1,"message":"821","line":389,"column":6,"nodeType":"778","endLine":389,"endColumn":19,"suggestions":"829"},{"ruleId":"776","severity":1,"message":"825","line":452,"column":6,"nodeType":"778","endLine":452,"endColumn":23,"suggestions":"830"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'collection.filters', 'collection.image', and 'type'. Either include them or remove the dependency array. If 'setFilter' needs the current value of 'collection.filters', you can also switch to useReducer instead of useState and read 'collection.filters' in the reducer.","ArrayExpression",["831"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","React Hook useEffect has missing dependencies: 'family' and 'type'. Either include them or remove the dependency array.",["832"],"React Hook useEffect has a missing dependency: 'currentPath'. Either include it or remove the dependency array.",["833"],"React Hook useEffect has missing dependencies: 'opciones' and 'selected'. Either include them or remove the dependency array.",["834"],"React Hook useEffect has a missing dependency: 'role'. Either include it or remove the dependency array.",["835"],"React Hook useEffect has missing dependencies: 'type' and 'typeofclient'. Either include them or remove the dependency array.",["836"],"React Hook useEffect has missing dependencies: 'companies', 'institutions', and 'typeofclient'. Either include them or remove the dependency array.",["837"],"React Hook useEffect has a missing dependency: 'selected'. Either include it or remove the dependency array. If 'setSelectedOptions' needs the current value of 'selected', you can also switch to useReducer instead of useState and read 'selected' in the reducer.",["838"],"React Hook useEffect has missing dependencies: 'organization?.can_see', 'organization.logo', 'organizations', and 'type'. Either include them or remove the dependency array. If 'setOrganizationsSelect' needs the current value of 'organizations', you can also switch to useReducer instead of useState and read 'organizations' in the reducer.",["839"],"React Hook useEffect has missing dependencies: 'type' and 'warehouse'. Either include them or remove the dependency array.",["840"],"React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["841"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'paymentPlataforms'. Either include it or remove the dependency array.",["842"],"React Hook useEffect has missing dependencies: 'generingFields' and 'generingFieldsValues'. Either include them or remove the dependency array.",["843"],"React Hook useEffect has missing dependencies: 'client' and 'type'. Either include them or remove the dependency array.",["844"],"React Hook useEffect has missing dependencies: 'client', 'generingEmptyFieldsValues', and 'generingFieldsValues'. Either include them or remove the dependency array.",["845"],"React Hook useEffect has missing dependencies: 'label' and 'property'. Either include them or remove the dependency array.",["846"],"React Hook useEffect has a missing dependency: 'type'. Either include it or remove the dependency array.",["847"],"React Hook useEffect has missing dependencies: 'generingEmptyFieldsValues' and 'supplier'. Either include them or remove the dependency array.",["848"],"React Hook useEffect has a missing dependency: 'onClickSearchProducts'. Either include it or remove the dependency array.",["849"],"React Hook useEffect has a missing dependency: 'typeofClientsFields'. Either include it or remove the dependency array.",["850"],"React Hook useEffect has missing dependencies: 'initialValues.prices' and 'initialValues.retail_price'. Either include them or remove the dependency array.",["851"],"React Hook useEffect has a missing dependency: 'geratingVariantField'. Either include it or remove the dependency array.",["852"],"React Hook useEffect has a missing dependency: 'getProduct'. Either include it or remove the dependency array.",["853"],["854"],["855"],{"desc":"856","fix":"857"},{"desc":"858","fix":"859"},{"desc":"860","fix":"861"},{"desc":"862","fix":"863"},{"desc":"864","fix":"865"},{"desc":"866","fix":"867"},{"desc":"868","fix":"869"},{"desc":"870","fix":"871"},{"desc":"872","fix":"873"},{"desc":"874","fix":"875"},{"desc":"876","fix":"877"},{"desc":"878","fix":"879"},{"desc":"880","fix":"881"},{"desc":"882","fix":"883"},{"desc":"884","fix":"885"},{"desc":"886","fix":"887"},{"desc":"888","fix":"889"},{"desc":"890","fix":"891"},{"desc":"892","fix":"893"},{"desc":"894","fix":"895"},{"desc":"896","fix":"897"},{"desc":"898","fix":"899"},{"desc":"900","fix":"901"},{"desc":"894","fix":"902"},{"desc":"898","fix":"903"},"Update the dependencies array to be: [collection.filters, collection.image, open, type]",{"range":"904","text":"905"},"Update the dependencies array to be: [family, open, type]",{"range":"906","text":"907"},"Update the dependencies array to be: [currentPath]",{"range":"908","text":"909"},"Update the dependencies array to be: [opciones, selected]",{"range":"910","text":"911"},"Update the dependencies array to be: [role]",{"range":"912","text":"913"},"Update the dependencies array to be: [open, type, typeofclient]",{"range":"914","text":"915"},"Update the dependencies array to be: [companies, institutions, open, typeofclient]",{"range":"916","text":"917"},"Update the dependencies array to be: [selected]",{"range":"918","text":"919"},"Update the dependencies array to be: [open, organization?.can_see, organization.logo, organizations, type]",{"range":"920","text":"921"},"Update the dependencies array to be: [open, type, warehouse]",{"range":"922","text":"923"},"Update the dependencies array to be: [login]",{"range":"924","text":"925"},"Update the dependencies array to be: [paymentPlataforms]",{"range":"926","text":"927"},"Update the dependencies array to be: [client, generingFields, generingFieldsValues]",{"range":"928","text":"929"},"Update the dependencies array to be: [client, open, type]",{"range":"930","text":"931"},"Update the dependencies array to be: [client, fields, generingEmptyFieldsValues, generingFieldsValues]",{"range":"932","text":"933"},"Update the dependencies array to be: [data, label, property]",{"range":"934","text":"935"},"Update the dependencies array to be: [open, type]",{"range":"936","text":"937"},"Update the dependencies array to be: [fields, generingEmptyFieldsValues, supplier]",{"range":"938","text":"939"},"Update the dependencies array to be: [filter, onClickSearchProducts]",{"range":"940","text":"941"},"Update the dependencies array to be: [retailPrice, typeofClientsFields]",{"range":"942","text":"943"},"Update the dependencies array to be: [initialValues.prices, initialValues.retail_price, typeofClients]",{"range":"944","text":"945"},"Update the dependencies array to be: [geratingVariantField, optionsSelected]",{"range":"946","text":"947"},"Update the dependencies array to be: [getProduct]",{"range":"948","text":"949"},{"range":"950","text":"943"},{"range":"951","text":"947"},[3378,3384],"[collection.filters, collection.image, open, type]",[1708,1714],"[family, open, type]",[1169,1171],"[currentPath]",[1126,1128],"[opciones, selected]",[1637,1639],"[role]",[2597,2603],"[open, type, typeofclient]",[2755,2761],"[companies, institutions, open, typeofclient]",[836,838],"[selected]",[3433,3439],"[open, organization?.can_see, organization.logo, organizations, type]",[2649,2655],"[open, type, warehouse]",[437,439],"[login]",[2991,2993],"[paymentPlataforms]",[3080,3088],"[client, generingFields, generingFieldsValues]",[4226,4232],"[client, open, type]",[4398,4406],"[client, fields, generingEmptyFieldsValues, generingFieldsValues]",[1005,1011],"[data, label, property]",[5133,5139],"[open, type]",[5680,5688],"[fields, generingEmptyFieldsValues, supplier]",[1187,1195],"[filter, onClickSearchProducts]",[12330,12343],"[retailPrice, typeofClientsFields]",[13001,13016],"[initialValues.prices, initialValues.retail_price, typeofClients]",[14614,14631],"[geratingVariantField, optionsSelected]",[25374,25376],"[getProduct]",[11732,11745],[13482,13499]]